{"ast":null,"code":"var _jsxFileName = \"/Users/imrun10/Documents/GitHub/GradeCourseApp/client/src/pages/CoursePage.js\",\n  _s = $RefreshSig$();\nimport react from \"react\";\nimport { useLocation } from \"react-router-dom\"; // useLocation will allow us to use data sent from other pages when they link here\nimport Axios from \"axios\"; // Axios is a HTTP client for the browser and node.js (send data to backend)\nimport { useState } from \"react\"; // useState is a hook that allows us to use variables in the html portoin of the code\nimport \"../App.css\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Table from \"../components/Table\"; // table component\nimport Papa from \"papaparse\"; // papa parse is a library that allows us to parse csv files\nimport Navbar from \"../components/NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CoursePage() {\n  _s();\n  const location = useLocation(); // we create and instance of this function and use it to get the data sent from the previous page\n  const [importedStudents, setImportedStudents] = useState([]); // this use state will help us save the data we get from the backend of all the students in the course the user clicked\n\n  /*------------------------------- NOT DONE YET -------------------------------*/\n  //   function getStudent(x){\n  //     Axios.get(\"http://localhost:3001/api/show/\").then((response)=>{\n  //       setStudent(response.data);\n  // })\n  //  }\n\n  //}\n  /*----------------------------------------------------------------------------*/\n\n  /*------------------------------- Axios Requests -------------------------------*/\n  Axios.get(\"http://localhost:3001/api/student\", {\n    // this is a get request to the backend to get all the students in the course the user clicked\n    params: {\n      // this is how you send data to the back end when using a get request\n      name: location.state.name\n      // we send the name of the course so when parsing the test_student array we can get the right students for the right course\n    }\n  }).then(response => setImportedStudents(response.data)); // we save the data we get from the backend in the importedStudents variable\n\n  function sendFile() {\n    // this function will send the csv file to the backend\n    Axios.post(\"http://localhost:3001/api/save/\", {\n      arr: parsedData // this is how we send data to the backend when using a post request, parsedData is an object, and you could add more objects or vars if you want after the comma but it has to be same format\n    }).then(console.log(\"SENT\")); // this is just a console log to make sure the data was sent\n  }\n\n  function showData() {\n    // this function will send a get request to the backend to check the array has been saved in the database\n    Axios.get(\"http://localhost:3001/api/checkArray\").then(console.log(\"shown\"));\n  }\n  /*--------------------------------------------------------------------------*/\n\n  /*------------------------------- Convert csv to an array -------------------------------*/\n  //State to store all data in a list of objects\n  const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n  const changeHandler = event => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map(d => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // Parsed Data Response in array format\n        setParsedData(results.data);\n\n        // Filtered Column Names\n        setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        setValues(valuesArray);\n      }\n    });\n  };\n\n  /*-----------------------------------------------------------------------------------*/\n\n  /*------------------------------- NOT DONE YET -------------------------------*/\n  /*\n  //const checker = () => {\n  //if(!(location.state.students == undefined || location.state.students == null || location.state.students == [] || importedStudents == [] || importedStudents == null || importedStudents == undefined)){\n  //return (\n  <div>\n    <header></header>\n     <body>\n      <div class=\"wrapper\">\n        <div id=\"content\">{location.state.name}</div>\n        <footer class=\"footer\">\n          <input\n            type=\"file\"\n            name=\"file\"\n            accept=\".csv\"\n            onChange={changeHandler}\n            style={{ display: \"block\", margin: \"10px auto\" }}\n          />\n           <button\n            class=\"btn btn-primary\"\n            style={{\n              backgroundColor: \"RGB(100, 239, 100\",\n              borderColor: \"RGB(100, 239, 100)\",\n            }}\n            onClick={(e) => {}}\n          >\n            +\n          </button>\n        </footer>\n      </div>\n    </body>\n  </div>;\n  //);}\n  //else {\n  // return <div>EMPTY COURSE</div>\n  //} */\n  /*----------------------------------------------------------------------------*/\n\n  if (!(location.state.students === undefined || location.state.students === null || location.state.students === [] || importedStudents === [] || importedStudents === null || importedStudents === undefined)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          class: \"smaller-title\",\n          children: location.state.name.charAt(0).toUpperCase() + location.state.name.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(Table, {\n              props: importedStudents\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n            class: \"footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              class: \"btn btn-primary\",\n              type: \"file\",\n              name: \"file\",\n              accept: \".csv\",\n              onChange: changeHandler // this is how we call the function that converts the csv file to an array\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn btn-primary\",\n              style: {\n                backgroundColor: \"RGB(100, 239, 100\",\n                borderColor: \"RGB(100, 239, 100)\"\n              },\n              onClick: e => {\n                sendFile();\n                showData();\n              },\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(CoursePage, \"0tdr6UnU2j7ljc7N46vGg0zmVCY=\", false, function () {\n  return [useLocation];\n});\n_c = CoursePage;\nvar _c;\n$RefreshReg$(_c, \"CoursePage\");","map":{"version":3,"names":["react","useLocation","Axios","useState","Table","Papa","Navbar","jsxDEV","_jsxDEV","CoursePage","_s","location","importedStudents","setImportedStudents","get","params","name","state","then","response","data","sendFile","post","arr","parsedData","console","log","showData","setParsedData","tableRows","setTableRows","values","setValues","changeHandler","event","parse","target","files","header","skipEmptyLines","complete","results","rowsArray","valuesArray","map","d","push","Object","keys","students","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","class","charAt","toUpperCase","slice","id","props","type","accept","onChange","style","backgroundColor","borderColor","onClick","e","_c","$RefreshReg$"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/src/pages/CoursePage.js"],"sourcesContent":["import react from \"react\";\nimport { useLocation } from \"react-router-dom\"; // useLocation will allow us to use data sent from other pages when they link here\nimport Axios from \"axios\"; // Axios is a HTTP client for the browser and node.js (send data to backend)\nimport { useState } from \"react\"; // useState is a hook that allows us to use variables in the html portoin of the code\nimport \"../App.css\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Table from \"../components/Table\"; // table component\nimport Papa from \"papaparse\"; // papa parse is a library that allows us to parse csv files\nimport Navbar from \"../components/NavBar\";\nexport default function CoursePage() {\n  const location = useLocation(); // we create and instance of this function and use it to get the data sent from the previous page\n  const [importedStudents, setImportedStudents] = useState([]); // this use state will help us save the data we get from the backend of all the students in the course the user clicked\n\n  /*------------------------------- NOT DONE YET -------------------------------*/\n  //   function getStudent(x){\n  //     Axios.get(\"http://localhost:3001/api/show/\").then((response)=>{\n  //       setStudent(response.data);\n  // })\n  //  }\n\n  //}\n  /*----------------------------------------------------------------------------*/\n\n  /*------------------------------- Axios Requests -------------------------------*/\n  Axios.get(\"http://localhost:3001/api/student\", {\n    // this is a get request to the backend to get all the students in the course the user clicked\n    params: {\n      // this is how you send data to the back end when using a get request\n      name: location.state.name,\n      // we send the name of the course so when parsing the test_student array we can get the right students for the right course\n    },\n  }).then((response) => setImportedStudents(response.data)); // we save the data we get from the backend in the importedStudents variable\n\n  function sendFile() {\n    // this function will send the csv file to the backend\n    Axios.post(\"http://localhost:3001/api/save/\", {\n      arr: parsedData, // this is how we send data to the backend when using a post request, parsedData is an object, and you could add more objects or vars if you want after the comma but it has to be same format\n    }).then(console.log(\"SENT\")); // this is just a console log to make sure the data was sent\n  }\n\n  function showData() {\n    // this function will send a get request to the backend to check the array has been saved in the database\n    Axios.get(\"http://localhost:3001/api/checkArray\").then(\n      console.log(\"shown\")\n    );\n  }\n  /*--------------------------------------------------------------------------*/\n\n  /*------------------------------- Convert csv to an array -------------------------------*/\n  //State to store all data in a list of objects\n  const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n\n  const changeHandler = (event) => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map((d) => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // Parsed Data Response in array format\n        setParsedData(results.data);\n\n        // Filtered Column Names\n        setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        setValues(valuesArray);\n      },\n    });\n  };\n\n  /*-----------------------------------------------------------------------------------*/\n\n  /*------------------------------- NOT DONE YET -------------------------------*/\n  /*\n  //const checker = () => {\n  //if(!(location.state.students == undefined || location.state.students == null || location.state.students == [] || importedStudents == [] || importedStudents == null || importedStudents == undefined)){\n  //return (\n  <div>\n    <header></header>\n\n    <body>\n      <div class=\"wrapper\">\n        <div id=\"content\">{location.state.name}</div>\n        <footer class=\"footer\">\n          <input\n            type=\"file\"\n            name=\"file\"\n            accept=\".csv\"\n            onChange={changeHandler}\n            style={{ display: \"block\", margin: \"10px auto\" }}\n          />\n\n          <button\n            class=\"btn btn-primary\"\n            style={{\n              backgroundColor: \"RGB(100, 239, 100\",\n              borderColor: \"RGB(100, 239, 100)\",\n            }}\n            onClick={(e) => {}}\n          >\n            +\n          </button>\n        </footer>\n      </div>\n    </body>\n  </div>;\n  //);}\n  //else {\n  // return <div>EMPTY COURSE</div>\n  //} */\n  /*----------------------------------------------------------------------------*/\n\n  if (\n    !(\n      location.state.students === undefined ||\n      location.state.students === null ||\n      location.state.students === [] ||\n      importedStudents === [] ||\n      importedStudents === null ||\n      importedStudents === undefined\n    )\n  ) {\n    return (\n      <div>\n        <header>\n          <Navbar />\n          <h1 class=\"smaller-title\">\n            {location.state.name.charAt(0).toUpperCase() +\n              location.state.name.slice(1)}\n          </h1>\n        </header>\n\n        <body>\n          <div class=\"wrapper\">\n            <div id=\"content\">\n              <Table props={importedStudents} />{\" \"}\n              {/* this is how we pass data to the table component */}\n            </div>\n            <footer class=\"footer\">\n              <input\n                class=\"btn btn-primary\"\n                type=\"file\"\n                name=\"file\"\n                accept=\".csv\"\n                onChange={changeHandler} // this is how we call the function that converts the csv file to an array\n              />\n\n              <button\n                class=\"btn btn-primary\"\n                style={{\n                  backgroundColor: \"RGB(100, 239, 100\",\n                  borderColor: \"RGB(100, 239, 100)\",\n                }}\n                onClick={(e) => {\n                  sendFile();\n                  showData();\n                }}\n              >\n                +\n              </button>\n            </footer>\n          </div>\n        </body>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}