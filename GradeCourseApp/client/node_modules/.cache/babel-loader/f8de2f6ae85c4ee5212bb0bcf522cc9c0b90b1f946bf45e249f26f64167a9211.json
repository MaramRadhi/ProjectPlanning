{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\nimport purify from 'dompurify';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Render an HTML string as rich text\n *\n * Note: This component leverages the `dangerouslySetInnerHTML` attribute,\n * but uses the DomPurify library to sanitize the HTML before rendering it.\n *\n * It means it is safe from Cross-Site Scripting (XSS) attacks - but it's still\n * a good practice to sanitize the value server-side.\n *\n * @example\n * <RichTextField source=\"description\" />\n *\n * @example // remove all tags and output text only\n * <RichTextField source=\"description\" stripTags />\n */\nexport var RichTextField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    _a = props.stripTags,\n    stripTags = _a === void 0 ? false : _a,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"stripTags\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  return React.createElement(Typography, __assign({\n    className: className,\n    variant: \"body2\",\n    component: \"span\"\n  }, sanitizeFieldRestProps(rest)), value == null && emptyText ? emptyText : stripTags ? removeTags(value) : React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: purify.sanitize(value)\n    }\n  }));\n});\nRichTextField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  stripTags: PropTypes.bool\n});\nRichTextField.displayName = 'RichTextField';\nexport var removeTags = function (input) {\n  return input ? input.replace(/<[^>]+>/gm, '') : '';\n};","map":{"version":3,"names":["React","memo","PropTypes","get","Typography","useRecordContext","purify","sanitizeFieldRestProps","fieldPropTypes","RichTextField","props","className","emptyText","source","_a","stripTags","rest","__rest","record","value","createElement","__assign","variant","component","removeTags","dangerouslySetInnerHTML","__html","sanitize","propTypes","bool","displayName","input","replace"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/field/RichTextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FC, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport { useRecordContext } from 'ra-core';\nimport purify from 'dompurify';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { InjectedFieldProps, PublicFieldProps, fieldPropTypes } from './types';\n\n/**\n * Render an HTML string as rich text\n *\n * Note: This component leverages the `dangerouslySetInnerHTML` attribute,\n * but uses the DomPurify library to sanitize the HTML before rendering it.\n *\n * It means it is safe from Cross-Site Scripting (XSS) attacks - but it's still\n * a good practice to sanitize the value server-side.\n *\n * @example\n * <RichTextField source=\"description\" />\n *\n * @example // remove all tags and output text only\n * <RichTextField source=\"description\" stripTags />\n */\nexport const RichTextField: FC<RichTextFieldProps> = memo<RichTextFieldProps>(\n    props => {\n        const {\n            className,\n            emptyText,\n            source,\n            stripTags = false,\n            ...rest\n        } = props;\n        const record = useRecordContext(props);\n        const value = get(record, source);\n\n        return (\n            <Typography\n                className={className}\n                variant=\"body2\"\n                component=\"span\"\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {value == null && emptyText ? (\n                    emptyText\n                ) : stripTags ? (\n                    removeTags(value)\n                ) : (\n                    <span\n                        dangerouslySetInnerHTML={{\n                            __html: purify.sanitize(value),\n                        }}\n                    />\n                )}\n            </Typography>\n        );\n    }\n);\n\nRichTextField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    stripTags: PropTypes.bool,\n};\n\nexport interface RichTextFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {\n    stripTags?: boolean;\n}\n\nRichTextField.displayName = 'RichTextField';\n\nexport const removeTags = (input: string) =>\n    input ? input.replace(/<[^>]+>/gm, '') : '';\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAaC,IAAI,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,UAA+B,MAAM,0BAA0B;AACtE,SAASC,gBAAgB,QAAQ,SAAS;AAC1C,OAAOC,MAAM,MAAM,WAAW;AAE9B,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+CC,cAAc,QAAQ,SAAS;AAE9E;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,aAAa,GAA2BR,IAAI,CACrD,UAAAS,KAAK;EAEG,IAAAC,SAAS,GAKTD,KAAK,CAAAC,SALI;IACTC,SAAS,GAITF,KAAK,CAAAE,SAJI;IACTC,MAAM,GAGNH,KAAK,CAAAG,MAHC;IACNC,EAAA,GAEAJ,KAAK,CAAAK,SAFY;IAAjBA,SAAS,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;IACdE,IAAI,GAAAC,MAAA,CACPP,KAAK,EANH,iDAML,CADU;EAEX,IAAMQ,MAAM,GAAGb,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAMS,KAAK,GAAGhB,GAAG,CAACe,MAAM,EAAEL,MAAM,CAAC;EAEjC,OACIb,KAAA,CAAAoB,aAAA,CAAChB,UAAU,EAAAiB,QAAA;IACPV,SAAS,EAAEA,SAAS;IACpBW,OAAO,EAAC,OAAO;IACfC,SAAS,EAAC;EAAM,GACZhB,sBAAsB,CAACS,IAAI,CAAC,GAE/BG,KAAK,IAAI,IAAI,IAAIP,SAAS,GACvBA,SAAS,GACTG,SAAS,GACTS,UAAU,CAACL,KAAK,CAAC,GAEjBnB,KAAA,CAAAoB,aAAA;IACIK,uBAAuB,EAAE;MACrBC,MAAM,EAAEpB,MAAM,CAACqB,QAAQ,CAACR,KAAK;;EAChC,EAER,CACQ;AAErB,CAAC,CACJ;AAEDV,aAAa,CAACmB,SAAS,GAAAP,QAAA,CAAAA,QAAA,CAAAA,QAAA,KAEhBjB,UAAU,CAACwB,SAAS,GACpBpB,cAAc;EACjBO,SAAS,EAAEb,SAAS,CAAC2B;AAAI,EAC5B;AASDpB,aAAa,CAACqB,WAAW,GAAG,eAAe;AAE3C,OAAO,IAAMN,UAAU,GAAG,SAAAA,CAACO,KAAa;EACpC,OAAAA,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,EAAE;AAA3C,CAA2C"},"metadata":{},"sourceType":"module","externalDependencies":[]}