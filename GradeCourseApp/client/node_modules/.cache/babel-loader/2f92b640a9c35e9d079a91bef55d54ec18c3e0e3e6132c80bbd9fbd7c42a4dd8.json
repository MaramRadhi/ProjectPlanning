{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { cloneElement, useCallback } from 'react';\nimport clsx from 'clsx';\nimport { ListContextProvider, useChoicesContext, useInput } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { Datagrid } from '../list/datagrid';\nimport { FilterButton, FilterForm } from '../list/filter';\nimport { FilterContext } from '../list/FilterContext';\nimport { Pagination as DefaultPagination } from '../list/pagination';\nvar defaultPagination = React.createElement(DefaultPagination, null);\n/**\n * WIP: This component is not yet ready to be used.\n *\n * An input for selecting items displayed in a datagrid\n *\n * @example\n * const membersFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n * ];\n * const TeamEdit = () => (\n *    <Edit>\n *        <SimpleForm>\n *            <TextInput source=\"name\" />\n *            <ReferenceArrayInput\n *                source=\"members\"\n *                reference=\"users\"\n *                filter={{ is_retired: false }}\n *                perPage={50}\n *                sort={{ field: 'lastName', order: 'ASC' }}\n *            >\n *                <DatagridInput\n *                    filters={membersFilters}\n *                >\n *                    <TextField source=\"firstName\" />\n *                    <TextField source=\"lastName\" />\n *                </DatagridInput>\n *            </ReferenceArrayInput>\n *        </SimpleForm>\n *    </Edit>\n * );\n */\nexport var DatagridInput = function (props) {\n  var _a;\n  var choices = props.choices,\n    className = props.className,\n    _b = props.pagination,\n    pagination = _b === void 0 ? defaultPagination : _b,\n    filters = props.filters,\n    sourceProp = props.source,\n    resourceProp = props.resource,\n    rest = __rest(props, [\"choices\", \"className\", \"pagination\", \"filters\", \"source\", \"resource\"]);\n  var _c = useChoicesContext({\n      choices: choices,\n      resource: resourceProp,\n      source: sourceProp\n    }),\n    allChoices = _c.allChoices,\n    availableChoices = _c.availableChoices,\n    selectedChoices = _c.selectedChoices,\n    fetchError = _c.error,\n    source = _c.source,\n    choicesContext = __rest(_c, [\"allChoices\", \"availableChoices\", \"selectedChoices\", \"error\", \"source\"]);\n  var _d = useInput(__assign(__assign(__assign({}, props), choicesContext), {\n      source: source\n    })),\n    field = _d.field,\n    fieldState = _d.fieldState,\n    formState = _d.formState;\n  var onSelect = useCallback(function (idsToAdd) {\n    field.onChange(idsToAdd);\n  }, [field]);\n  var onToggleItem = useCallback(function (id) {\n    if (field.value.includes(id)) {\n      field.onChange(field.value.filter(function (item) {\n        return item !== id;\n      }));\n    } else {\n      field.onChange(__spreadArray(__spreadArray([], field.value, true), [id], false));\n    }\n  }, [field]);\n  var onUnselectItems = useCallback(function () {\n    field.onChange([]);\n  }, [field]);\n  var listContext = React.useMemo(function () {\n    return __assign(__assign({}, choicesContext), {\n      data: availableChoices,\n      onSelect: onSelect,\n      onToggleItem: onToggleItem,\n      onUnselectItems: onUnselectItems,\n      selectedIds: field.value\n    });\n  }, [availableChoices, choicesContext, field, onSelect, onToggleItem, onUnselectItems]);\n  return React.createElement(\"div\", {\n    className: clsx('ra-input', \"ra-input-\".concat(source), className)\n  }, React.createElement(ListContextProvider, {\n    value: listContext\n  }, filters ? Array.isArray(filters) ? React.createElement(FilterContext.Provider, {\n    value: filters\n  }, React.createElement(React.Fragment, null, React.createElement(FilterForm, null), React.createElement(FilterButton, null))) : React.createElement(React.Fragment, null, cloneElement(filters, {\n    context: 'form'\n  }), cloneElement(filters, {\n    context: 'button'\n  })) : null, !fieldState.error && !fetchError && React.createElement(React.Fragment, null, React.createElement(Datagrid, __assign({}, rest)), pagination !== false && pagination), React.createElement(InputHelperText, {\n    touched: fieldState.isTouched || formState.isSubmitted || fetchError,\n    error: ((_a = fieldState.error) === null || _a === void 0 ? void 0 : _a.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message)\n  })));\n};","map":{"version":3,"names":["React","cloneElement","useCallback","clsx","ListContextProvider","useChoicesContext","useInput","InputHelperText","Datagrid","FilterButton","FilterForm","FilterContext","Pagination","DefaultPagination","defaultPagination","createElement","DatagridInput","props","choices","className","_b","pagination","filters","sourceProp","source","resourceProp","resource","rest","__rest","_c","allChoices","availableChoices","selectedChoices","fetchError","error","choicesContext","_d","__assign","field","fieldState","formState","onSelect","idsToAdd","onChange","onToggleItem","id","value","includes","filter","item","__spreadArray","onUnselectItems","listContext","useMemo","data","selectedIds","concat","Array","isArray","Provider","Fragment","context","touched","isTouched","isSubmitted","_a","message"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/input/DatagridInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { cloneElement, ReactElement, ReactNode, useCallback } from 'react';\nimport clsx from 'clsx';\nimport {\n    ChoicesProps,\n    Identifier,\n    ListContextProvider,\n    useChoicesContext,\n    useInput,\n} from 'ra-core';\nimport { CommonInputProps } from './CommonInputProps';\nimport { InputHelperText } from './InputHelperText';\nimport { SupportCreateSuggestionOptions } from './useSupportCreateSuggestion';\nimport { Datagrid, DatagridProps } from '../list/datagrid';\nimport { FilterButton, FilterForm } from '../list/filter';\nimport { FilterContext } from '../list/FilterContext';\nimport { Pagination as DefaultPagination } from '../list/pagination';\n\nconst defaultPagination = <DefaultPagination />;\n\n/**\n * WIP: This component is not yet ready to be used.\n *\n * An input for selecting items displayed in a datagrid\n *\n * @example\n * const membersFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n * ];\n * const TeamEdit = () => (\n *    <Edit>\n *        <SimpleForm>\n *            <TextInput source=\"name\" />\n *            <ReferenceArrayInput\n *                source=\"members\"\n *                reference=\"users\"\n *                filter={{ is_retired: false }}\n *                perPage={50}\n *                sort={{ field: 'lastName', order: 'ASC' }}\n *            >\n *                <DatagridInput\n *                    filters={membersFilters}\n *                >\n *                    <TextField source=\"firstName\" />\n *                    <TextField source=\"lastName\" />\n *                </DatagridInput>\n *            </ReferenceArrayInput>\n *        </SimpleForm>\n *    </Edit>\n * );\n */\nexport const DatagridInput = (props: DatagridInputProps) => {\n    const {\n        choices,\n        className,\n        pagination = defaultPagination,\n        filters,\n        source: sourceProp,\n        resource: resourceProp,\n        ...rest\n    } = props;\n\n    const {\n        allChoices,\n        availableChoices,\n        selectedChoices,\n        error: fetchError,\n        source,\n        ...choicesContext\n    } = useChoicesContext({\n        choices,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n    const { field, fieldState, formState } = useInput({\n        ...props,\n        ...choicesContext,\n        source,\n    });\n\n    const onSelect = useCallback(\n        (idsToAdd: Identifier[]) => {\n            field.onChange(idsToAdd);\n        },\n        [field]\n    );\n\n    const onToggleItem = useCallback(\n        (id: Identifier) => {\n            if (field.value.includes(id)) {\n                field.onChange(field.value.filter(item => item !== id));\n            } else {\n                field.onChange([...field.value, id]);\n            }\n        },\n        [field]\n    );\n\n    const onUnselectItems = useCallback(() => {\n        field.onChange([]);\n    }, [field]);\n\n    const listContext = React.useMemo(\n        () => ({\n            ...choicesContext,\n            data: availableChoices,\n            onSelect,\n            onToggleItem,\n            onUnselectItems,\n            selectedIds: field.value,\n        }),\n        [\n            availableChoices,\n            choicesContext,\n            field,\n            onSelect,\n            onToggleItem,\n            onUnselectItems,\n        ]\n    );\n    return (\n        <div className={clsx('ra-input', `ra-input-${source}`, className)}>\n            <ListContextProvider value={listContext}>\n                {filters ? (\n                    Array.isArray(filters) ? (\n                        <FilterContext.Provider value={filters}>\n                            <>\n                                <FilterForm />\n                                <FilterButton />\n                            </>\n                        </FilterContext.Provider>\n                    ) : (\n                        <>\n                            {cloneElement(filters, {\n                                context: 'form',\n                            })}\n                            {cloneElement(filters, {\n                                context: 'button',\n                            })}\n                        </>\n                    )\n                ) : null}\n                {!fieldState.error && !fetchError && (\n                    <>\n                        <Datagrid {...rest} />\n                        {pagination !== false && pagination}\n                    </>\n                )}\n                <InputHelperText\n                    touched={\n                        fieldState.isTouched ||\n                        formState.isSubmitted ||\n                        fetchError\n                    }\n                    error={fieldState.error?.message || fetchError?.message}\n                />\n            </ListContextProvider>\n        </div>\n    );\n};\n\nexport type DatagridInputProps = Omit<CommonInputProps, 'source'> &\n    ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    DatagridProps & {\n        children?: ReactNode;\n        source?: string;\n        filters?: ReactElement | ReactElement[];\n        pagination?: ReactElement | false;\n    };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}