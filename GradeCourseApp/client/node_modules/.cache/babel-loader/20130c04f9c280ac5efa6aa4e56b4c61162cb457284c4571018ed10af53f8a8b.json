{"ast":null,"code":"import { __assign } from './_virtual/_tslib.js';\nimport Cookies from 'js-cookie';\n\n/**\n * @class TokenObject\n *\n * Stores and retrieve Token\n */\nvar TokenObject = /** @class */function () {\n  /**\n   * TokenObject - Stores, retrieve and process tokens\n   *\n   * @param authStorageName - Name of the Token,\n   * which will store the Authorization Token\n   *\n   * @param authStorageType - Type of the auth Storage, `\n   * cookie` or `localstorage`\n   *\n   * @param refreshTokenName - Name of the refresh Token,\n   * if `undefined`, then no refreshToken feature is using\n   *\n   * @param cookieDomain - domain name for the Cookies,\n   * only applicable when `authStorageType` is `cookie`\n   *\n   * @param cookieSecure - cookies are secure or not,\n   * only applicable when `authStorageType` is `cookie`\n   *\n   * @constructor\n   */\n  function TokenObject(authStorageName, authStorageType, refreshTokenName, cookieDomain, cookieSecure) {\n    this.authStorageType = authStorageType;\n    this.authStorageName = authStorageName;\n    this.authTimeStorageName = \"\".concat(authStorageName, \"_storage\");\n    this.stateStorageName = \"\".concat(authStorageName, \"_state\");\n    this.refreshTokenName = refreshTokenName;\n    this.cookieDomain = cookieDomain;\n    this.cookieSecure = cookieSecure;\n    this.authStorageTypeName = \"\".concat(this.authStorageName, \"_type\");\n    this.isUsingRefreshToken = !!this.refreshTokenName;\n    this.refreshTokenTimeName = this.refreshTokenName ? \"\".concat(this.refreshTokenName, \"_time\") : null;\n  }\n  /**\n   * Get the Initial Tokens and states\n   * Called externally in `AuthProvider`\n   * when the Application is bootstrapping or refreshed\n   *\n   * If the `authStorageType` is `cookie`,\n   * get information from `initialCookieToken()` function\n   *\n   * If the `authTokenType` is `localStorage`\n   * get information from `initialLSToken()` function\n   *\n   * @returns AuthKitStateInterface\n   */\n  TokenObject.prototype.initialToken = function () {\n    if (this.authStorageType === 'cookie') {\n      return this.initialCookieToken_();\n    } else {\n      return this.initialLSToken_();\n    }\n  };\n  /**\n   * Get the Initial Token from Cookies\n   * Called internally by `initialToken` method\n   *\n   * If the `authStorageType` is `cookie`\n   * then this function is called\n   * And returns the Tokens and states Stored in all 4 cookies\n   *\n   * @returns AuthKitStateInterface\n   */\n  TokenObject.prototype.initialCookieToken_ = function () {\n    var authToken = Cookies.get(this.authStorageName);\n    var authTokenType = Cookies.get(this.authStorageTypeName);\n    var authTokenTime = Cookies.get(this.authTimeStorageName);\n    var stateCookie = Cookies.get(this.stateStorageName);\n    var refreshToken = this.isUsingRefreshToken && this.refreshTokenName != null ? Cookies.get(this.refreshTokenName) : null;\n    var refreshTokenTime = this.isUsingRefreshToken && this.refreshTokenTimeName != null ? Cookies.get(this.refreshTokenTimeName) : null;\n    return this.checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime);\n  };\n  /**\n   * Get the Initial Token from LocalStorage\n   * Called internally by `initialToken` method\n   *\n   * If the `authStorageType` is `localstorage`\n   * then this function is called\n   * And returns the Tokens and states Stored in all 4 cookies\n   *\n   * @returns AuthKitStateInterface\n   */\n  TokenObject.prototype.initialLSToken_ = function () {\n    var authToken = localStorage.getItem(this.authStorageName);\n    var authTokenType = localStorage.getItem(this.authStorageTypeName);\n    var authTokenTime = localStorage.getItem(this.authTimeStorageName);\n    var stateCookie = localStorage.getItem(this.stateStorageName);\n    var refreshToken = this.isUsingRefreshToken && this.refreshTokenName != null ? localStorage.getItem(this.refreshTokenName) : null;\n    var refreshTokenTime = this.isUsingRefreshToken && this.refreshTokenTimeName != null ? localStorage.getItem(this.refreshTokenTimeName) : null;\n    return this.checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime);\n  };\n  /**\n   * Check if the Initial token is valid or not,\n   * Called Internally by `initialCookieToken_()` and `initialLSToken_()`\n   *\n   * If the tokens are valid,\n   * then it response TokenObject with auth Information\n   * Else it response TokenObject with all null\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param authTokenTime\n   * @param stateCookie\n   * @param refreshToken\n   * @param refreshTokenTime\n   *\n   * @returns AuthKitStateInterface\n   *\n   */\n  TokenObject.prototype.checkTokenExist = function (authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime) {\n    if (!!authToken && !!authTokenType && !!authTokenTime && !!stateCookie) {\n      var expiresAt = new Date(authTokenTime);\n      try {\n        var authState = JSON.parse(stateCookie);\n        var obj = {\n          auth: {\n            token: authToken,\n            type: authTokenType,\n            expiresAt: expiresAt\n          },\n          userState: authState,\n          isSignIn: true,\n          isUsingRefreshToken: this.isUsingRefreshToken,\n          refresh: undefined\n        };\n        if (this.isUsingRefreshToken && !!refreshToken && !!refreshTokenTime) {\n          var refreshTokenExpiresAt = new Date(refreshTokenTime);\n          return __assign(__assign({}, obj), {\n            refresh: {\n              token: refreshToken,\n              expiresAt: refreshTokenExpiresAt\n            }\n          });\n        } else {\n          return __assign(__assign({}, obj), {\n            refresh: null\n          });\n        }\n      } catch (e) {\n        return {\n          auth: null,\n          refresh: null,\n          userState: null,\n          isUsingRefreshToken: this.isUsingRefreshToken,\n          isSignIn: false\n        };\n      }\n    } else {\n      return {\n        auth: null,\n        refresh: null,\n        userState: null,\n        isUsingRefreshToken: this.isUsingRefreshToken,\n        isSignIn: false\n      };\n    }\n  };\n  /**\n   * Sync Auth Tokens on time of login and logout\n   *\n   * Set the New Cookies or new Localstorage on login\n   * Or Remove the old Cookies or old Localstorage on logout\n   *\n   * @param authState\n   */\n  TokenObject.prototype.syncTokens = function (authState) {\n    if (authState.auth) {\n      if (this.isUsingRefreshToken && authState.refresh) {\n        this.setToken(authState.auth.token, authState.auth.type, authState.refresh.token, authState.refresh.expiresAt, authState.auth.expiresAt, authState.userState);\n      } else {\n        this.setToken(authState.auth.token, authState.auth.type, null, null, authState.auth.expiresAt, authState.userState);\n      }\n    } else {\n      this.removeToken();\n    }\n  };\n  /**\n   * Set Cookies or localstorage on login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param refreshTokenExpiresAt\n   * @param expiresAt\n   * @param authState\n   */\n  TokenObject.prototype.setToken = function (authToken, authTokenType, refreshToken, refreshTokenExpiresAt, expiresAt, authState) {\n    if (this.authStorageType === 'cookie') {\n      this.setCookieToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState);\n    } else {\n      this.setLSToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState);\n    }\n  };\n  /**\n   *\n   * Set Cookie on time of Login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param expiresAt\n   * @param refreshTokenExpiresAt\n   * @param authState\n   */\n  TokenObject.prototype.setCookieToken_ = function (authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState) {\n    Cookies.set(this.authStorageName, authToken, {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.set(this.authStorageTypeName, authTokenType, {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.set(this.authTimeStorageName, expiresAt.toISOString(), {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    if (authState) {\n      Cookies.set(this.stateStorageName, JSON.stringify(authState), {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenName && !!refreshToken) {\n      Cookies.set(this.refreshTokenName, refreshToken, {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName && !!refreshTokenExpiresAt) {\n      Cookies.set(this.refreshTokenTimeName, refreshTokenExpiresAt.toISOString(), {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n  };\n  /**\n   * Set LocalStorage at the time of Login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param expiresAt\n   * @param refreshTokenExpiresAt\n   * @param authState\n   */\n  TokenObject.prototype.setLSToken_ = function (authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState) {\n    localStorage.setItem(this.authStorageName, authToken);\n    localStorage.setItem(this.authStorageTypeName, authTokenType);\n    localStorage.setItem(this.authTimeStorageName, expiresAt.toISOString());\n    if (authState) {\n      localStorage.setItem(this.stateStorageName, JSON.stringify(authState));\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenName && !!refreshToken) {\n      localStorage.setItem(this.refreshTokenName, refreshToken);\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName && !!refreshTokenExpiresAt) {\n      localStorage.setItem(this.refreshTokenTimeName, refreshTokenExpiresAt.toISOString());\n    }\n  };\n  /**\n   * Remove Tokens on time of Logout\n   */\n  TokenObject.prototype.removeToken = function () {\n    if (this.authStorageType === 'cookie') {\n      this.removeCookieToken_();\n    } else {\n      this.removeLSToken_();\n    }\n  };\n  /**\n   * Remove Token from Cookies\n   */\n  TokenObject.prototype.removeCookieToken_ = function () {\n    Cookies.remove(this.authStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.remove(this.authTimeStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.remove(this.authStorageTypeName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    Cookies.remove(this.stateStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure\n    });\n    if (this.isUsingRefreshToken && !!this.refreshTokenName) {\n      Cookies.remove(this.refreshTokenName, {\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {\n      Cookies.remove(this.refreshTokenTimeName, {\n        domain: this.cookieDomain,\n        secure: this.cookieSecure\n      });\n    }\n  };\n  /**\n   * Remove Token from LocalStorage\n   */\n  TokenObject.prototype.removeLSToken_ = function () {\n    localStorage.removeItem(this.authStorageName);\n    localStorage.removeItem(this.authTimeStorageName);\n    localStorage.removeItem(this.authStorageTypeName);\n    localStorage.removeItem(this.stateStorageName);\n    if (this.isUsingRefreshToken && !!this.refreshTokenName) {\n      localStorage.removeItem(this.refreshTokenName);\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {\n      localStorage.removeItem(this.refreshTokenTimeName);\n    }\n  };\n  return TokenObject;\n}();\nexport { TokenObject as default };","map":{"version":3,"names":["TokenObject","authStorageName","authStorageType","refreshTokenName","cookieDomain","cookieSecure","authTimeStorageName","concat","stateStorageName","authStorageTypeName","isUsingRefreshToken","refreshTokenTimeName","prototype","initialToken","initialCookieToken_","initialLSToken_","authToken","Cookies","get","authTokenType","authTokenTime","stateCookie","refreshToken","refreshTokenTime","checkTokenExist","localStorage","getItem","expiresAt","Date","authState","JSON","parse","obj","auth","token","type","userState","isSignIn","refresh","undefined","refreshTokenExpiresAt","__assign","e","syncTokens","setToken","removeToken","setCookieToken_","setLSToken_","set","expires","domain","secure","toISOString","stringify","setItem","removeCookieToken_","removeLSToken_","remove","removeItem"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/react-auth-kit/src/TokenObject.ts"],"sourcesContent":["import Cookies from 'js-cookie';\nimport {AuthKitStateInterface, AuthStateUserObject} from './types';\n\n/**\n * @class TokenObject\n *\n * Stores and retrieve Token\n */\nclass TokenObject {\n  private readonly authStorageName: string;\n  private readonly stateStorageName: string;\n  private readonly authTimeStorageName: string;\n  private readonly cookieDomain?: string;\n  private readonly cookieSecure?: boolean;\n  private readonly authStorageTypeName: string;\n  private readonly authStorageType: 'cookie' | 'localstorage';\n  private readonly refreshTokenName: string | null;\n  private readonly refreshTokenTimeName: string | null;\n  private readonly isUsingRefreshToken: boolean;\n\n  /**\n   * TokenObject - Stores, retrieve and process tokens\n   *\n   * @param authStorageName - Name of the Token,\n   * which will store the Authorization Token\n   *\n   * @param authStorageType - Type of the auth Storage, `\n   * cookie` or `localstorage`\n   *\n   * @param refreshTokenName - Name of the refresh Token,\n   * if `undefined`, then no refreshToken feature is using\n   *\n   * @param cookieDomain - domain name for the Cookies,\n   * only applicable when `authStorageType` is `cookie`\n   *\n   * @param cookieSecure - cookies are secure or not,\n   * only applicable when `authStorageType` is `cookie`\n   *\n   * @constructor\n   */\n  constructor(\n      authStorageName:string,\n      authStorageType:'cookie' | 'localstorage',\n      refreshTokenName:string | null,\n      cookieDomain?:string,\n      cookieSecure?:boolean,\n  ) {\n    this.authStorageType = authStorageType;\n    this.authStorageName = authStorageName;\n    this.authTimeStorageName = `${authStorageName}_storage`;\n    this.stateStorageName = `${authStorageName}_state`;\n    this.refreshTokenName = refreshTokenName;\n    this.cookieDomain = cookieDomain;\n    this.cookieSecure = cookieSecure;\n    this.authStorageTypeName = `${this.authStorageName}_type`;\n    this.isUsingRefreshToken = !!this.refreshTokenName;\n    this.refreshTokenTimeName = this.refreshTokenName ?\n      `${this.refreshTokenName}_time` : null;\n  }\n\n  /**\n   * Get the Initial Tokens and states\n   * Called externally in `AuthProvider`\n   * when the Application is bootstrapping or refreshed\n   *\n   * If the `authStorageType` is `cookie`,\n   * get information from `initialCookieToken()` function\n   *\n   * If the `authTokenType` is `localStorage`\n   * get information from `initialLSToken()` function\n   *\n   * @returns AuthKitStateInterface\n   */\n  initialToken(): AuthKitStateInterface {\n    if (this.authStorageType === 'cookie') {\n      return this.initialCookieToken_();\n    } else {\n      return this.initialLSToken_();\n    }\n  }\n\n  /**\n   * Get the Initial Token from Cookies\n   * Called internally by `initialToken` method\n   *\n   * If the `authStorageType` is `cookie`\n   * then this function is called\n   * And returns the Tokens and states Stored in all 4 cookies\n   *\n   * @returns AuthKitStateInterface\n   */\n  initialCookieToken_(): AuthKitStateInterface {\n    const authToken = Cookies.get(this.authStorageName);\n    const authTokenType = Cookies.get(this.authStorageTypeName);\n    const authTokenTime = Cookies.get(this.authTimeStorageName);\n    const stateCookie = Cookies.get(this.stateStorageName);\n\n    const refreshToken = this.isUsingRefreshToken &&\n    this.refreshTokenName != null ? Cookies.get(this.refreshTokenName) : null;\n\n    const refreshTokenTime = this.isUsingRefreshToken &&\n    this.refreshTokenTimeName != null ?\n      Cookies.get(this.refreshTokenTimeName) : null;\n\n    return this.checkTokenExist(\n        authToken,\n        authTokenType,\n        authTokenTime,\n        stateCookie,\n        refreshToken,\n        refreshTokenTime);\n  }\n\n  /**\n   * Get the Initial Token from LocalStorage\n   * Called internally by `initialToken` method\n   *\n   * If the `authStorageType` is `localstorage`\n   * then this function is called\n   * And returns the Tokens and states Stored in all 4 cookies\n   *\n   * @returns AuthKitStateInterface\n   */\n  initialLSToken_(): AuthKitStateInterface {\n    const authToken = localStorage.getItem(this.authStorageName);\n    const authTokenType = localStorage.getItem(this.authStorageTypeName);\n    const authTokenTime = localStorage.getItem(this.authTimeStorageName);\n    const stateCookie = localStorage.getItem(this.stateStorageName);\n\n    const refreshToken = this.isUsingRefreshToken &&\n    this.refreshTokenName != null ?\n      localStorage.getItem(this.refreshTokenName) : null;\n\n    const refreshTokenTime = this.isUsingRefreshToken &&\n    this.refreshTokenTimeName != null ?\n      localStorage.getItem(this.refreshTokenTimeName) : null;\n\n    return this.checkTokenExist(\n        authToken,\n        authTokenType,\n        authTokenTime,\n        stateCookie,\n        refreshToken,\n        refreshTokenTime);\n  }\n\n  /**\n   * Check if the Initial token is valid or not,\n   * Called Internally by `initialCookieToken_()` and `initialLSToken_()`\n   *\n   * If the tokens are valid,\n   * then it response TokenObject with auth Information\n   * Else it response TokenObject with all null\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param authTokenTime\n   * @param stateCookie\n   * @param refreshToken\n   * @param refreshTokenTime\n   *\n   * @returns AuthKitStateInterface\n   *\n   */\n  checkTokenExist(\n      authToken: string | null | undefined,\n      authTokenType: string | null | undefined,\n      authTokenTime: string | null | undefined,\n      stateCookie: string | null | undefined,\n      refreshToken: string | null | undefined,\n      refreshTokenTime: string | null | undefined):\n    AuthKitStateInterface {\n    if (!!authToken && !!authTokenType && !!authTokenTime && !!stateCookie) {\n      const expiresAt = new Date(authTokenTime);\n      try {\n        const authState = JSON.parse(stateCookie);\n        const obj = {\n          auth: {\n            token: authToken,\n            type: authTokenType,\n            expiresAt: expiresAt,\n          },\n          userState: authState,\n          isSignIn: true,\n          isUsingRefreshToken: this.isUsingRefreshToken,\n          refresh: undefined,\n        };\n        if (this.isUsingRefreshToken && !!refreshToken && !! refreshTokenTime) {\n          const refreshTokenExpiresAt = new Date(refreshTokenTime);\n          return {\n            ...obj,\n            refresh: {\n              token: refreshToken,\n              expiresAt: refreshTokenExpiresAt,\n            },\n          };\n        } else {\n          return {\n            ...obj,\n            refresh: null,\n          };\n        }\n      } catch (e) {\n        return {\n          auth: null,\n          refresh: null,\n          userState: null,\n          isUsingRefreshToken: this.isUsingRefreshToken,\n          isSignIn: false,\n        };\n      }\n    } else {\n      return {\n        auth: null,\n        refresh: null,\n        userState: null,\n        isUsingRefreshToken: this.isUsingRefreshToken,\n        isSignIn: false,\n      };\n    }\n  }\n\n  /**\n   * Sync Auth Tokens on time of login and logout\n   *\n   * Set the New Cookies or new Localstorage on login\n   * Or Remove the old Cookies or old Localstorage on logout\n   *\n   * @param authState\n   */\n  syncTokens(authState: AuthKitStateInterface): void {\n    if (authState.auth) {\n      if (this.isUsingRefreshToken && authState.refresh) {\n        this.setToken(\n            authState.auth.token,\n            authState.auth.type,\n            authState.refresh.token,\n            authState.refresh.expiresAt,\n            authState.auth.expiresAt,\n            authState.userState,\n        );\n      } else {\n        this.setToken(\n            authState.auth.token,\n            authState.auth.type,\n            null,\n            null,\n            authState.auth.expiresAt,\n            authState.userState,\n        );\n      }\n    } else {\n      this.removeToken();\n    }\n  }\n\n  /**\n   * Set Cookies or localstorage on login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param refreshTokenExpiresAt\n   * @param expiresAt\n   * @param authState\n   */\n  setToken(\n      authToken: string,\n      authTokenType: string,\n      refreshToken: string | null,\n      refreshTokenExpiresAt: Date | null,\n      expiresAt: Date,\n      authState: AuthStateUserObject|null): void {\n    if (this.authStorageType === 'cookie') {\n      this.setCookieToken_(\n          authToken,\n          authTokenType,\n          refreshToken,\n          expiresAt,\n          refreshTokenExpiresAt,\n          authState);\n    } else {\n      this.setLSToken_(\n          authToken,\n          authTokenType,\n          refreshToken,\n          expiresAt,\n          refreshTokenExpiresAt,\n          authState);\n    }\n  }\n\n  /**\n   *\n   * Set Cookie on time of Login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param expiresAt\n   * @param refreshTokenExpiresAt\n   * @param authState\n   */\n  setCookieToken_(\n      authToken: string,\n      authTokenType: string,\n      refreshToken: string | null,\n      expiresAt: Date,\n      refreshTokenExpiresAt: Date | null,\n      authState: AuthStateUserObject|null): void {\n    Cookies.set(this.authStorageName, authToken, {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.set(this.authStorageTypeName, authTokenType, {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.set(this.authTimeStorageName, expiresAt.toISOString(), {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    if (authState) {\n      Cookies.set(this.stateStorageName, JSON.stringify(authState), {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure,\n      });\n    }\n\n    if (this.isUsingRefreshToken && !!this.refreshTokenName &&\n      !!refreshToken) {\n      Cookies.set(this.refreshTokenName, refreshToken, {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure,\n      });\n    }\n\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName &&\n      !!refreshTokenExpiresAt) {\n      Cookies.set(this.refreshTokenTimeName,\n          refreshTokenExpiresAt.toISOString(), {\n            expires: expiresAt,\n            domain: this.cookieDomain,\n            secure: this.cookieSecure,\n          });\n    }\n  }\n\n  /**\n   * Set LocalStorage at the time of Login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param expiresAt\n   * @param refreshTokenExpiresAt\n   * @param authState\n   */\n  setLSToken_(\n      authToken: string,\n      authTokenType: string,\n      refreshToken: string | null,\n      expiresAt: Date,\n      refreshTokenExpiresAt: Date | null,\n      authState: AuthStateUserObject|null): void {\n    localStorage.setItem(this.authStorageName, authToken);\n    localStorage.setItem(this.authStorageTypeName, authTokenType);\n    localStorage.setItem(this.authTimeStorageName, expiresAt.toISOString());\n    if (authState) {\n      localStorage.setItem(this.stateStorageName, JSON.stringify(authState));\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenName &&\n      !!refreshToken) {\n      localStorage.setItem(this.refreshTokenName, refreshToken);\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName &&\n      !!refreshTokenExpiresAt) {\n      localStorage.setItem(this.refreshTokenTimeName,\n          refreshTokenExpiresAt.toISOString());\n    }\n  }\n\n  /**\n   * Remove Tokens on time of Logout\n   */\n  removeToken(): void {\n    if (this.authStorageType === 'cookie') {\n      this.removeCookieToken_();\n    } else {\n      this.removeLSToken_();\n    }\n  }\n\n  /**\n   * Remove Token from Cookies\n   */\n  removeCookieToken_(): void {\n    Cookies.remove(this.authStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.remove(this.authTimeStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.remove(this.authStorageTypeName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.remove(this.stateStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    if (this.isUsingRefreshToken && !!this.refreshTokenName) {\n      Cookies.remove(this.refreshTokenName, {\n        domain: this.cookieDomain,\n        secure: this.cookieSecure,\n      });\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {\n      Cookies.remove(this.refreshTokenTimeName, {\n        domain: this.cookieDomain,\n        secure: this.cookieSecure,\n      });\n    }\n  }\n\n  /**\n   * Remove Token from LocalStorage\n   */\n  removeLSToken_(): void {\n    localStorage.removeItem(this.authStorageName);\n    localStorage.removeItem(this.authTimeStorageName);\n    localStorage.removeItem(this.authStorageTypeName);\n    localStorage.removeItem(this.stateStorageName);\n    if (this.isUsingRefreshToken && !!this.refreshTokenName) {\n      localStorage.removeItem(this.refreshTokenName);\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {\n      localStorage.removeItem(this.refreshTokenTimeName);\n    }\n  }\n}\n\nexport default TokenObject;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}