{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport { Divider } from '@mui/material';\nimport { Outlet, Routes, Route } from 'react-router-dom';\nimport { useRecordContext, OptionalRecordContextProvider } from 'ra-core';\nimport { TabbedShowLayoutTabs, getShowLayoutTabFullPath } from './TabbedShowLayoutTabs';\nimport { Tab } from './Tab';\n/**\n * Layout for a Show view showing fields grouped in tabs and laid out in a single column.\n *\n * It pulls the record from the RecordContext. It renders a set of `<Tabs>`,\n * each of which contains a list of record fields in a single-column layout\n * (via MUI's `<Stack>` component).\n * `<TabbedShowLayout>` delegates the actual rendering of fields to its children,\n * which should be `<TabbedShowLayout.Tab>` components.\n * `<TabbedShowLayout.Tab>` wraps each field inside a `<Labeled>` component to add a label.\n *\n * @example\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, TabbedShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <TabbedShowLayout>\n *             <TabbedShowLayout.Tab label=\"Content\">\n *                 <TextField source=\"title\" />\n *                 <TextField source=\"subtitle\" />\n *            </TabbedShowLayout.Tab>\n *             <TabbedShowLayout.Tab label=\"Metadata\">\n *                 <TextField source=\"category\" />\n *            </TabbedShowLayout.Tab>\n *         </TabbedShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n *\n * @param {TabbedShowLayoutProps} props\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {ReactNode} props.divider An optional divider between each field, passed to `<Stack>`.\n * @param {number} props.spacing The spacing to use between each field, passed to `<Stack>`. Defaults to 1.\n * @param {Object} props.sx Custom style object.\n * @param {boolean} props.syncWithLocation Whether to update the URL when the tab changes. Defaults to true.\n * @param {ElementType} props.tabs A custom component for rendering tabs.\n */\nexport var TabbedShowLayout = function (props) {\n  var children = props.children,\n    className = props.className,\n    spacing = props.spacing,\n    divider = props.divider,\n    _a = props.syncWithLocation,\n    syncWithLocation = _a === void 0 ? true : _a,\n    _b = props.tabs,\n    tabs = _b === void 0 ? DefaultTabs : _b,\n    value = props.value,\n    rest = __rest(props, [\"children\", \"className\", \"spacing\", \"divider\", \"syncWithLocation\", \"tabs\", \"value\"]);\n  var record = useRecordContext(props);\n  var nonNullChildren = Children.toArray(children).filter(function (child) {\n    return child !== null;\n  });\n  var _c = useState(0),\n    tabValue = _c[0],\n    setTabValue = _c[1];\n  var handleTabChange = function (event, value) {\n    if (!syncWithLocation) {\n      setTabValue(value);\n    }\n  };\n  if (!record) {\n    return null;\n  }\n  var renderTabHeaders = function () {\n    return cloneElement(tabs, {\n      onChange: handleTabChange,\n      syncWithLocation: syncWithLocation,\n      value: tabValue\n    }, nonNullChildren);\n  };\n  return React.createElement(OptionalRecordContextProvider, {\n    value: props.record\n  }, React.createElement(Root, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), syncWithLocation ? React.createElement(Routes, null, React.createElement(Route, {\n    path: \"/*\",\n    element: React.createElement(React.Fragment, null, renderTabHeaders(), React.createElement(Divider, null), React.createElement(\"div\", {\n      className: TabbedShowLayoutClasses.content\n    }, React.createElement(Outlet, null)))\n  }, Children.map(nonNullChildren, function (tab, index) {\n    return isValidElement(tab) ? React.createElement(Route, {\n      path: getShowLayoutTabFullPath(tab, index),\n      element: cloneElement(tab, {\n        context: 'content',\n        spacing: spacing,\n        divider: divider\n      })\n    }) : null;\n  }))) : React.createElement(React.Fragment, null, renderTabHeaders(), React.createElement(Divider, null), React.createElement(\"div\", {\n    className: TabbedShowLayoutClasses.content\n  }, Children.map(nonNullChildren, function (tab, index) {\n    if (!isValidElement(tab) || tabValue !== index) {\n      return null;\n    }\n    return cloneElement(tab, {\n      context: 'content',\n      spacing: spacing,\n      divider: divider\n    });\n  })))));\n};\nTabbedShowLayout.Tab = Tab;\nTabbedShowLayout.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  record: PropTypes.object,\n  spacing: PropTypes.any,\n  sx: PropTypes.any,\n  syncWithLocation: PropTypes.bool,\n  tabs: PropTypes.element,\n  value: PropTypes.number\n};\nvar DefaultTabs = React.createElement(TabbedShowLayoutTabs, null);\nvar PREFIX = 'RaTabbedShowLayout';\nexport var TabbedShowLayoutClasses = {\n  content: \"\".concat(PREFIX, \"-content\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    flex: 1\n  }, _b[\"& .\".concat(TabbedShowLayoutClasses.content)] = {\n    padding: \"\".concat(theme.spacing(1), \" \").concat(theme.spacing(2))\n  }, _b;\n});\nvar sanitizeRestProps = function (_a) {\n  var record = _a.record,\n    resource = _a.resource,\n    initialValues = _a.initialValues,\n    staticContext = _a.staticContext,\n    translate = _a.translate,\n    tabs = _a.tabs,\n    rest = __rest(_a, [\"record\", \"resource\", \"initialValues\", \"staticContext\", \"translate\", \"tabs\"]);\n  return rest;\n};","map":{"version":3,"names":["React","Children","cloneElement","isValidElement","useState","PropTypes","styled","Divider","Outlet","Routes","Route","useRecordContext","OptionalRecordContextProvider","TabbedShowLayoutTabs","getShowLayoutTabFullPath","Tab","TabbedShowLayout","props","children","className","spacing","divider","_a","syncWithLocation","_b","tabs","DefaultTabs","value","rest","__rest","record","nonNullChildren","toArray","filter","child","_c","tabValue","setTabValue","handleTabChange","event","renderTabHeaders","onChange","createElement","Root","__assign","sanitizeRestProps","path","element","Fragment","TabbedShowLayoutClasses","content","map","tab","index","context","propTypes","node","string","object","any","sx","bool","number","PREFIX","concat","name","overridesResolver","styles","root","theme","flex","padding","resource","initialValues","staticContext","translate"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/detail/TabbedShowLayout.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    ChangeEvent,\n    Children,\n    cloneElement,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { ResponsiveStyleValue, SxProps } from '@mui/system';\nimport { styled } from '@mui/material/styles';\nimport { Divider } from '@mui/material';\nimport { Outlet, Routes, Route } from 'react-router-dom';\nimport {\n    RaRecord,\n    useRecordContext,\n    OptionalRecordContextProvider,\n} from 'ra-core';\n\nimport {\n    TabbedShowLayoutTabs,\n    getShowLayoutTabFullPath,\n} from './TabbedShowLayoutTabs';\nimport { Tab } from './Tab';\n\n/**\n * Layout for a Show view showing fields grouped in tabs and laid out in a single column.\n *\n * It pulls the record from the RecordContext. It renders a set of `<Tabs>`,\n * each of which contains a list of record fields in a single-column layout\n * (via MUI's `<Stack>` component).\n * `<TabbedShowLayout>` delegates the actual rendering of fields to its children,\n * which should be `<TabbedShowLayout.Tab>` components.\n * `<TabbedShowLayout.Tab>` wraps each field inside a `<Labeled>` component to add a label.\n *\n * @example\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, TabbedShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <TabbedShowLayout>\n *             <TabbedShowLayout.Tab label=\"Content\">\n *                 <TextField source=\"title\" />\n *                 <TextField source=\"subtitle\" />\n *            </TabbedShowLayout.Tab>\n *             <TabbedShowLayout.Tab label=\"Metadata\">\n *                 <TextField source=\"category\" />\n *            </TabbedShowLayout.Tab>\n *         </TabbedShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n *\n * @param {TabbedShowLayoutProps} props\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {ReactNode} props.divider An optional divider between each field, passed to `<Stack>`.\n * @param {number} props.spacing The spacing to use between each field, passed to `<Stack>`. Defaults to 1.\n * @param {Object} props.sx Custom style object.\n * @param {boolean} props.syncWithLocation Whether to update the URL when the tab changes. Defaults to true.\n * @param {ElementType} props.tabs A custom component for rendering tabs.\n */\nexport const TabbedShowLayout = (props: TabbedShowLayoutProps) => {\n    const {\n        children,\n        className,\n        spacing,\n        divider,\n        syncWithLocation = true,\n        tabs = DefaultTabs,\n        value,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const nonNullChildren = Children.toArray(children).filter(\n        child => child !== null\n    ) as ReactElement<{\n        context?: string;\n        spacing?: ResponsiveStyleValue<number | string>;\n        divider?: ReactNode;\n    }>[];\n    const [tabValue, setTabValue] = useState(0);\n\n    const handleTabChange = (event: ChangeEvent<{}>, value: any): void => {\n        if (!syncWithLocation) {\n            setTabValue(value);\n        }\n    };\n\n    if (!record) {\n        return null;\n    }\n\n    const renderTabHeaders = () =>\n        cloneElement(\n            tabs,\n            {\n                onChange: handleTabChange,\n                syncWithLocation,\n                value: tabValue,\n            },\n            nonNullChildren\n        );\n\n    return (\n        <OptionalRecordContextProvider value={props.record}>\n            <Root className={className} {...sanitizeRestProps(rest)}>\n                {syncWithLocation ? (\n                    <Routes>\n                        <Route\n                            path=\"/*\"\n                            element={\n                                <>\n                                    {renderTabHeaders()}\n                                    <Divider />\n                                    <div\n                                        className={\n                                            TabbedShowLayoutClasses.content\n                                        }\n                                    >\n                                        <Outlet />\n                                    </div>\n                                </>\n                            }\n                        >\n                            {Children.map(nonNullChildren, (tab, index) =>\n                                isValidElement(tab) ? (\n                                    <Route\n                                        path={getShowLayoutTabFullPath(\n                                            tab,\n                                            index\n                                        )}\n                                        element={cloneElement(tab, {\n                                            context: 'content',\n                                            spacing,\n                                            divider,\n                                        })}\n                                    />\n                                ) : null\n                            )}\n                        </Route>\n                    </Routes>\n                ) : (\n                    <>\n                        {renderTabHeaders()}\n                        <Divider />\n                        <div className={TabbedShowLayoutClasses.content}>\n                            {Children.map(nonNullChildren, (tab, index) => {\n                                if (\n                                    !isValidElement(tab) ||\n                                    tabValue !== index\n                                ) {\n                                    return null;\n                                }\n                                return cloneElement(tab, {\n                                    context: 'content',\n                                    spacing,\n                                    divider,\n                                });\n                            })}\n                        </div>\n                    </>\n                )}\n            </Root>\n        </OptionalRecordContextProvider>\n    );\n};\n\nTabbedShowLayout.Tab = Tab;\n\nexport interface TabbedShowLayoutProps {\n    children: ReactNode;\n    className?: string;\n    divider?: ReactNode;\n    record?: RaRecord;\n    rootPath?: string;\n    spacing?: ResponsiveStyleValue<number | string>;\n    sx?: SxProps;\n    syncWithLocation?: boolean;\n    tabs?: ReactElement;\n    value?: any;\n}\n\nTabbedShowLayout.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    record: PropTypes.object,\n    spacing: PropTypes.any,\n    sx: PropTypes.any,\n    syncWithLocation: PropTypes.bool,\n    tabs: PropTypes.element,\n    value: PropTypes.number,\n};\n\nconst DefaultTabs = <TabbedShowLayoutTabs />;\n\nconst PREFIX = 'RaTabbedShowLayout';\n\nexport const TabbedShowLayoutClasses = {\n    content: `${PREFIX}-content`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flex: 1,\n    [`& .${TabbedShowLayoutClasses.content}`]: {\n        padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    },\n}));\n\nconst sanitizeRestProps = ({\n    record,\n    resource,\n    initialValues,\n    staticContext,\n    translate,\n    tabs,\n    ...rest\n}: any) => rest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}