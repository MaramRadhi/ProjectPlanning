{"ast":null,"code":"import React from 'react';\nimport { notifyManager, useQueryClient } from 'react-query';\n/**\n * Get the state of the dataProvider connection.\n *\n * Returns true if a query or a mutation is pending.\n *\n * Custom implementation because react-query's useIsFetching and useIsMutating\n * render each time the number of active queries changes, which is too often.\n *\n * @see useIsFetching\n * @see useIsMutating\n */\nexport var useLoading = function () {\n  var client = useQueryClient();\n  var mountedRef = React.useRef(false);\n  var isFetchingRef = React.useRef(client.isFetching() > 0);\n  var isMutatingRef = React.useRef(client.isMutating() > 0);\n  var _a = React.useState(isFetchingRef.current || isMutatingRef.current),\n    isLoading = _a[0],\n    setIsLoading = _a[1];\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribeQueryCache = client.getQueryCache().subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        isFetchingRef.current = client.isFetching() > 0;\n        setIsLoading(isFetchingRef.current || isMutatingRef.current);\n      }\n    }));\n    var unsubscribeMutationCache = client.getMutationCache().subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        isMutatingRef.current = client.isMutating() > 0;\n        setIsLoading(isFetchingRef.current || isMutatingRef.current);\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribeQueryCache();\n      unsubscribeMutationCache();\n    };\n  }, [client]);\n  return isLoading;\n};","map":{"version":3,"names":["React","notifyManager","useQueryClient","useLoading","client","mountedRef","useRef","isFetchingRef","isFetching","isMutatingRef","isMutating","_a","useState","current","isLoading","setIsLoading","useEffect","unsubscribeQueryCache","getQueryCache","subscribe","batchCalls","unsubscribeMutationCache","getMutationCache"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/dataProvider/useLoading.ts"],"sourcesContent":["import React from 'react';\n\nimport { notifyManager, useQueryClient } from 'react-query';\n\n/**\n * Get the state of the dataProvider connection.\n *\n * Returns true if a query or a mutation is pending.\n *\n * Custom implementation because react-query's useIsFetching and useIsMutating\n * render each time the number of active queries changes, which is too often.\n *\n * @see useIsFetching\n * @see useIsMutating\n */\nexport const useLoading = (): boolean => {\n    const client = useQueryClient();\n    const mountedRef = React.useRef(false);\n    const isFetchingRef = React.useRef(client.isFetching() > 0);\n    const isMutatingRef = React.useRef(client.isMutating() > 0);\n\n    const [isLoading, setIsLoading] = React.useState<boolean>(\n        isFetchingRef.current || isMutatingRef.current\n    );\n\n    React.useEffect(() => {\n        mountedRef.current = true;\n\n        const unsubscribeQueryCache = client.getQueryCache().subscribe(\n            notifyManager.batchCalls(() => {\n                if (mountedRef.current) {\n                    isFetchingRef.current = client.isFetching() > 0;\n                    setIsLoading(\n                        isFetchingRef.current || isMutatingRef.current\n                    );\n                }\n            })\n        );\n\n        const unsubscribeMutationCache = client.getMutationCache().subscribe(\n            notifyManager.batchCalls(() => {\n                if (mountedRef.current) {\n                    isMutatingRef.current = client.isMutating() > 0;\n                    setIsLoading(\n                        isFetchingRef.current || isMutatingRef.current\n                    );\n                }\n            })\n        );\n\n        return () => {\n            mountedRef.current = false;\n            unsubscribeQueryCache();\n            unsubscribeMutationCache();\n        };\n    }, [client]);\n\n    return isLoading;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,EAAEC,cAAc,QAAQ,aAAa;AAE3D;;;;;;;;;;;AAWA,OAAO,IAAMC,UAAU,GAAG,SAAAA,CAAA;EACtB,IAAMC,MAAM,GAAGF,cAAc,EAAE;EAC/B,IAAMG,UAAU,GAAGL,KAAK,CAACM,MAAM,CAAC,KAAK,CAAC;EACtC,IAAMC,aAAa,GAAGP,KAAK,CAACM,MAAM,CAACF,MAAM,CAACI,UAAU,EAAE,GAAG,CAAC,CAAC;EAC3D,IAAMC,aAAa,GAAGT,KAAK,CAACM,MAAM,CAACF,MAAM,CAACM,UAAU,EAAE,GAAG,CAAC,CAAC;EAErD,IAAAC,EAAA,GAA4BX,KAAK,CAACY,QAAQ,CAC5CL,aAAa,CAACM,OAAO,IAAIJ,aAAa,CAACI,OAAO,CACjD;IAFMC,SAAS,GAAAH,EAAA;IAAEI,YAAY,GAAAJ,EAAA,GAE7B;EAEDX,KAAK,CAACgB,SAAS,CAAC;IACZX,UAAU,CAACQ,OAAO,GAAG,IAAI;IAEzB,IAAMI,qBAAqB,GAAGb,MAAM,CAACc,aAAa,EAAE,CAACC,SAAS,CAC1DlB,aAAa,CAACmB,UAAU,CAAC;MACrB,IAAIf,UAAU,CAACQ,OAAO,EAAE;QACpBN,aAAa,CAACM,OAAO,GAAGT,MAAM,CAACI,UAAU,EAAE,GAAG,CAAC;QAC/CO,YAAY,CACRR,aAAa,CAACM,OAAO,IAAIJ,aAAa,CAACI,OAAO,CACjD;;IAET,CAAC,CAAC,CACL;IAED,IAAMQ,wBAAwB,GAAGjB,MAAM,CAACkB,gBAAgB,EAAE,CAACH,SAAS,CAChElB,aAAa,CAACmB,UAAU,CAAC;MACrB,IAAIf,UAAU,CAACQ,OAAO,EAAE;QACpBJ,aAAa,CAACI,OAAO,GAAGT,MAAM,CAACM,UAAU,EAAE,GAAG,CAAC;QAC/CK,YAAY,CACRR,aAAa,CAACM,OAAO,IAAIJ,aAAa,CAACI,OAAO,CACjD;;IAET,CAAC,CAAC,CACL;IAED,OAAO;MACHR,UAAU,CAACQ,OAAO,GAAG,KAAK;MAC1BI,qBAAqB,EAAE;MACvBI,wBAAwB,EAAE;IAC9B,CAAC;EACL,CAAC,EAAE,CAACjB,MAAM,CAAC,CAAC;EAEZ,OAAOU,SAAS;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}