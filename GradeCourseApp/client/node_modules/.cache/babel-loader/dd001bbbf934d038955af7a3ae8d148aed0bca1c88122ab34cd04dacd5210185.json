{"ast":null,"code":"import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { TranslatableContextProvider, useTranslatable } from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to MUI tabs.\n */\nexport var TranslatableInputs = function (props) {\n  var className = props.className,\n    defaultLocale = props.defaultLocale,\n    locales = props.locales,\n    _a = props.groupKey,\n    groupKey = _a === void 0 ? '' : _a,\n    _b = props.selector,\n    selector = _b === void 0 ? React.createElement(TranslatableInputsTabs, {\n      groupKey: groupKey\n    }) : _b,\n    children = props.children,\n    variant = props.variant,\n    margin = props.margin;\n  var context = useTranslatable({\n    defaultLocale: defaultLocale,\n    locales: locales\n  });\n  return React.createElement(Root, {\n    className: className\n  }, React.createElement(TranslatableContextProvider, {\n    value: context\n  }, selector, locales.map(function (locale) {\n    return React.createElement(TranslatableInputsTabContent, {\n      key: locale,\n      locale: locale,\n      groupKey: groupKey,\n      variant: variant,\n      margin: margin\n    }, children);\n  })));\n};\nvar PREFIX = 'RaTranslatableInputs';\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5)\n  };\n});","map":{"version":3,"names":["React","styled","TranslatableContextProvider","useTranslatable","TranslatableInputsTabs","TranslatableInputsTabContent","TranslatableInputs","props","className","defaultLocale","locales","_a","groupKey","_b","selector","createElement","children","variant","margin","context","Root","value","map","locale","key","PREFIX","name","overridesResolver","styles","root","theme","flexGrow","marginTop","spacing","marginBottom"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/input/TranslatableInputs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ReactElement, ReactNode } from 'react';\nimport {\n    TranslatableContextProvider,\n    useTranslatable,\n    UseTranslatableOptions,\n} from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\n\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * @param props The component props\n * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to MUI tabs.\n */\nexport const TranslatableInputs = (\n    props: TranslatableInputsProps\n): ReactElement => {\n    const {\n        className,\n        defaultLocale,\n        locales,\n        groupKey = '',\n        selector = <TranslatableInputsTabs groupKey={groupKey} />,\n        children,\n        variant,\n        margin,\n    } = props;\n    const context = useTranslatable({ defaultLocale, locales });\n\n    return (\n        <Root className={className}>\n            <TranslatableContextProvider value={context}>\n                {selector}\n                {locales.map(locale => (\n                    <TranslatableInputsTabContent\n                        key={locale}\n                        locale={locale}\n                        groupKey={groupKey}\n                        variant={variant}\n                        margin={margin}\n                    >\n                        {children}\n                    </TranslatableInputsTabContent>\n                ))}\n            </TranslatableContextProvider>\n        </Root>\n    );\n};\n\nexport interface TranslatableInputsProps extends UseTranslatableOptions {\n    className?: string;\n    selector?: ReactElement;\n    children: ReactNode;\n    groupKey?: string;\n    margin?: 'none' | 'normal' | 'dense';\n    variant?: 'standard' | 'outlined' | 'filled';\n}\n\nconst PREFIX = 'RaTranslatableInputs';\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flexGrow: 1,\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(0.5),\n}));\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAE7C,SACIC,2BAA2B,EAC3BC,eAAe,QAEZ,SAAS;AAChB,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAASC,4BAA4B,QAAQ,gCAAgC;AAE7E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,OAAO,IAAMC,kBAAkB,GAAG,SAAAA,CAC9BC,KAA8B;EAG1B,IAAAC,SAAS,GAQTD,KAAK,CAAAC,SARI;IACTC,aAAa,GAObF,KAAK,CAAAE,aAPQ;IACbC,OAAO,GAMPH,KAAK,CAAAG,OANE;IACPC,EAAA,GAKAJ,KAAK,CAAAK,QALQ;IAAbA,QAAQ,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACbE,EAAA,GAIAN,KAAK,CAAAO,QAJoD;IAAzDA,QAAQ,GAAAD,EAAA,cAAGb,KAAA,CAAAe,aAAA,CAACX,sBAAsB;MAACQ,QAAQ,EAAEA;IAAQ,EAAI,GAAAC,EAAA;IACzDG,QAAQ,GAGRT,KAAK,CAAAS,QAHG;IACRC,OAAO,GAEPV,KAAK,CAAAU,OAFE;IACPC,MAAM,GACNX,KAAK,CAAAW,MADC;EAEV,IAAMC,OAAO,GAAGhB,eAAe,CAAC;IAAEM,aAAa,EAAAA,aAAA;IAAEC,OAAO,EAAAA;EAAA,CAAE,CAAC;EAE3D,OACIV,KAAA,CAAAe,aAAA,CAACK,IAAI;IAACZ,SAAS,EAAEA;EAAS,GACtBR,KAAA,CAAAe,aAAA,CAACb,2BAA2B;IAACmB,KAAK,EAAEF;EAAO,GACtCL,QAAQ,EACRJ,OAAO,CAACY,GAAG,CAAC,UAAAC,MAAM;IAAI,OACnBvB,KAAA,CAAAe,aAAA,CAACV,4BAA4B;MACzBmB,GAAG,EAAED,MAAM;MACXA,MAAM,EAAEA,MAAM;MACdX,QAAQ,EAAEA,QAAQ;MAClBK,OAAO,EAAEA,OAAO;MAChBC,MAAM,EAAEA;IAAM,GAEbF,QAAQ,CACkB;EATZ,CAUtB,CAAC,CACwB,CAC3B;AAEf,CAAC;AAWD,IAAMS,MAAM,GAAG,sBAAsB;AAErC,IAAML,IAAI,GAAGnB,MAAM,CAAC,KAAK,EAAE;EACvByB,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,SAAAA,CAACpB,KAAK,EAAEqB,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAClB,EAAS;MAAPmB,KAAK,GAAAnB,EAAA,CAAAmB,KAAA;EAAO,OAAC;IACfC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAEF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC;IAC3BC,YAAY,EAAEJ,KAAK,CAACG,OAAO,CAAC,GAAG;GAClC;AAJiB,CAIhB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}