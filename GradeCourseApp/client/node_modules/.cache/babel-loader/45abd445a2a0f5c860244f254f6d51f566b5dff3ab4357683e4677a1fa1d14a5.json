{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { cloneElement, useMemo, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useResourceContext, useResourceDefinition } from 'ra-core';\nimport TopToolbar from '../layout/TopToolbar';\nimport { CreateButton, ExportButton } from '../button';\nimport { FilterContext } from './FilterContext';\nimport { FilterButton } from './filter';\n/**\n * Action Toolbar for the List view\n *\n * Internal component. If you want to add or remove actions for a List view,\n * write your own ListActions Component. Then, in the <List> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import { cloneElement } from 'react';\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, List, CreateButton, ExportButton } from 'react-admin';\n *\n *     const PostListActions = ({ filters }) => (\n *         <TopToolbar>\n *             { cloneElement(filters, { context: 'button' }) }\n *             <CreateButton/>\n *             <ExportButton/>\n *             // Add your custom actions here //\n *             <Button onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostList = (props) => (\n *         <List actions={<PostListActions />} {...props}>\n *             ...\n *         </List>\n *     );\n */\nexport var ListActions = function (props) {\n  var className = props.className,\n    filtersProp = props.filters,\n    _ = props.hasCreate,\n    rest = __rest(props, [\"className\", \"filters\", \"hasCreate\"]);\n  var _a = useListContext(props),\n    sort = _a.sort,\n    displayedFilters = _a.displayedFilters,\n    filterValues = _a.filterValues,\n    exporter = _a.exporter,\n    showFilter = _a.showFilter,\n    total = _a.total;\n  var resource = useResourceContext(props);\n  var hasCreate = useResourceDefinition(props).hasCreate;\n  var filters = useContext(FilterContext) || filtersProp;\n  return useMemo(function () {\n    return React.createElement(TopToolbar, __assign({\n      className: className\n    }, sanitizeListRestProps(rest)), filtersProp ? cloneElement(filtersProp, {\n      resource: resource,\n      showFilter: showFilter,\n      displayedFilters: displayedFilters,\n      filterValues: filterValues,\n      context: 'button'\n    }) : filters && React.createElement(FilterButton, null), hasCreate && React.createElement(CreateButton, null), exporter !== false && React.createElement(ExportButton, {\n      disabled: total === 0,\n      resource: resource,\n      sort: sort,\n      filterValues: filterValues\n    }));\n  }, /* eslint-disable react-hooks/exhaustive-deps */\n  [resource, displayedFilters, filterValues, filtersProp, showFilter, filters, total, className, sort, exporter, hasCreate]);\n};\nListActions.propTypes = {\n  className: PropTypes.string,\n  sort: PropTypes.any,\n  displayedFilters: PropTypes.object,\n  exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  filters: PropTypes.element,\n  filterValues: PropTypes.object,\n  hasCreate: PropTypes.bool,\n  resource: PropTypes.string,\n  onUnselectItems: PropTypes.func.isRequired,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  showFilter: PropTypes.func,\n  total: PropTypes.number\n};\nListActions.defaultProps = {\n  selectedIds: [],\n  onUnselectItems: function () {\n    return null;\n  }\n};","map":{"version":3,"names":["React","cloneElement","useMemo","useContext","PropTypes","sanitizeListRestProps","useListContext","useResourceContext","useResourceDefinition","TopToolbar","CreateButton","ExportButton","FilterContext","FilterButton","ListActions","props","className","filtersProp","filters","_","hasCreate","rest","__rest","_a","sort","displayedFilters","filterValues","exporter","showFilter","total","resource","createElement","__assign","context","disabled","propTypes","string","any","object","oneOfType","func","bool","element","onUnselectItems","isRequired","selectedIds","arrayOf","number","defaultProps"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/list/ListActions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { cloneElement, useMemo, useContext, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    sanitizeListRestProps,\n    Identifier,\n    SortPayload,\n    Exporter,\n    useListContext,\n    useResourceContext,\n    useResourceDefinition,\n} from 'ra-core';\nimport { ToolbarProps } from '@mui/material';\n\nimport TopToolbar from '../layout/TopToolbar';\nimport { CreateButton, ExportButton } from '../button';\nimport { FilterContext } from './FilterContext';\nimport { FilterButton } from './filter';\n\n/**\n * Action Toolbar for the List view\n *\n * Internal component. If you want to add or remove actions for a List view,\n * write your own ListActions Component. Then, in the <List> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import { cloneElement } from 'react';\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, List, CreateButton, ExportButton } from 'react-admin';\n *\n *     const PostListActions = ({ filters }) => (\n *         <TopToolbar>\n *             { cloneElement(filters, { context: 'button' }) }\n *             <CreateButton/>\n *             <ExportButton/>\n *             // Add your custom actions here //\n *             <Button onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostList = (props) => (\n *         <List actions={<PostListActions />} {...props}>\n *             ...\n *         </List>\n *     );\n */\nexport const ListActions = (props: ListActionsProps) => {\n    const { className, filters: filtersProp, hasCreate: _, ...rest } = props;\n    const {\n        sort,\n        displayedFilters,\n        filterValues,\n        exporter,\n        showFilter,\n        total,\n    } = useListContext(props);\n    const resource = useResourceContext(props);\n    const { hasCreate } = useResourceDefinition(props);\n    const filters = useContext(FilterContext) || filtersProp;\n    return useMemo(\n        () => (\n            <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\n                {filtersProp\n                    ? cloneElement(filtersProp, {\n                          resource,\n                          showFilter,\n                          displayedFilters,\n                          filterValues,\n                          context: 'button',\n                      })\n                    : filters && <FilterButton />}\n                {hasCreate && <CreateButton />}\n                {exporter !== false && (\n                    <ExportButton\n                        disabled={total === 0}\n                        resource={resource}\n                        sort={sort}\n                        filterValues={filterValues}\n                    />\n                )}\n            </TopToolbar>\n        ),\n        /* eslint-disable react-hooks/exhaustive-deps */\n        [\n            resource,\n            displayedFilters,\n            filterValues,\n            filtersProp,\n            showFilter,\n            filters,\n            total,\n            className,\n            sort,\n            exporter,\n            hasCreate,\n        ]\n    );\n};\n\nListActions.propTypes = {\n    className: PropTypes.string,\n    sort: PropTypes.any,\n    displayedFilters: PropTypes.object,\n    exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    filters: PropTypes.element,\n    filterValues: PropTypes.object,\n    hasCreate: PropTypes.bool,\n    resource: PropTypes.string,\n    onUnselectItems: PropTypes.func.isRequired,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    showFilter: PropTypes.func,\n    total: PropTypes.number,\n};\n\nListActions.defaultProps = {\n    selectedIds: [],\n    onUnselectItems: () => null,\n};\n\nexport interface ListActionsProps extends ToolbarProps {\n    sort?: SortPayload;\n    className?: string;\n    resource?: string;\n    filters?: ReactElement<any>;\n    displayedFilters?: any;\n    exporter?: Exporter | boolean;\n    filterValues?: any;\n    permanentFilter?: any;\n    hasCreate?: boolean;\n    selectedIds?: Identifier[];\n    onUnselectItems?: () => void;\n    showFilter?: (filterName: string, defaultValue: any) => void;\n    total?: number;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,EAAEC,OAAO,EAAEC,UAAU,QAAsB,OAAO;AACvE,OAAOC,SAAS,MAAM,YAAY;AAClC,SACIC,qBAAqB,EAIrBC,cAAc,EACdC,kBAAkB,EAClBC,qBAAqB,QAClB,SAAS;AAGhB,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,SAASC,YAAY,EAAEC,YAAY,QAAQ,WAAW;AACtD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,YAAY,QAAQ,UAAU;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAAO,IAAMC,WAAW,GAAG,SAAAA,CAACC,KAAuB;EACvC,IAAAC,SAAS,GAAkDD,KAAK,CAAAC,SAAvD;IAAWC,WAAW,GAA4BF,KAAK,CAAAG,OAAjC;IAAaC,CAAC,GAAcJ,KAAK,CAAAK,SAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKP,KAAK,EAAlE,qCAA0D,CAAF;EACxD,IAAAQ,EAAA,GAOFjB,cAAc,CAACS,KAAK,CAAC;IANrBS,IAAI,GAAAD,EAAA,CAAAC,IAAA;IACJC,gBAAgB,GAAAF,EAAA,CAAAE,gBAAA;IAChBC,YAAY,GAAAH,EAAA,CAAAG,YAAA;IACZC,QAAQ,GAAAJ,EAAA,CAAAI,QAAA;IACRC,UAAU,GAAAL,EAAA,CAAAK,UAAA;IACVC,KAAK,GAAAN,EAAA,CAAAM,KACgB;EACzB,IAAMC,QAAQ,GAAGvB,kBAAkB,CAACQ,KAAK,CAAC;EAClC,IAAAK,SAAS,GAAKZ,qBAAqB,CAACO,KAAK,CAAC,CAAAK,SAAjC;EACjB,IAAMF,OAAO,GAAGf,UAAU,CAACS,aAAa,CAAC,IAAIK,WAAW;EACxD,OAAOf,OAAO,CACV;IAAM,OACFF,KAAA,CAAA+B,aAAA,CAACtB,UAAU,EAAAuB,QAAA;MAAChB,SAAS,EAAEA;IAAS,GAAMX,qBAAqB,CAACgB,IAAI,CAAC,GAC5DJ,WAAW,GACNhB,YAAY,CAACgB,WAAW,EAAE;MACtBa,QAAQ,EAAAA,QAAA;MACRF,UAAU,EAAAA,UAAA;MACVH,gBAAgB,EAAAA,gBAAA;MAChBC,YAAY,EAAAA,YAAA;MACZO,OAAO,EAAE;KACZ,CAAC,GACFf,OAAO,IAAIlB,KAAA,CAAA+B,aAAA,CAAClB,YAAY,OAAG,EAChCO,SAAS,IAAIpB,KAAA,CAAA+B,aAAA,CAACrB,YAAY,OAAG,EAC7BiB,QAAQ,KAAK,KAAK,IACf3B,KAAA,CAAA+B,aAAA,CAACpB,YAAY;MACTuB,QAAQ,EAAEL,KAAK,KAAK,CAAC;MACrBC,QAAQ,EAAEA,QAAQ;MAClBN,IAAI,EAAEA,IAAI;MACVE,YAAY,EAAEA;IAAY,EAEjC,CACQ;EApBX,CAqBL,EACD;EACA,CACII,QAAQ,EACRL,gBAAgB,EAChBC,YAAY,EACZT,WAAW,EACXW,UAAU,EACVV,OAAO,EACPW,KAAK,EACLb,SAAS,EACTQ,IAAI,EACJG,QAAQ,EACRP,SAAS,CACZ,CACJ;AACL,CAAC;AAEDN,WAAW,CAACqB,SAAS,GAAG;EACpBnB,SAAS,EAAEZ,SAAS,CAACgC,MAAM;EAC3BZ,IAAI,EAAEpB,SAAS,CAACiC,GAAG;EACnBZ,gBAAgB,EAAErB,SAAS,CAACkC,MAAM;EAClCX,QAAQ,EAAEvB,SAAS,CAACmC,SAAS,CAAC,CAACnC,SAAS,CAACoC,IAAI,EAAEpC,SAAS,CAACqC,IAAI,CAAC,CAAC;EAC/DvB,OAAO,EAAEd,SAAS,CAACsC,OAAO;EAC1BhB,YAAY,EAAEtB,SAAS,CAACkC,MAAM;EAC9BlB,SAAS,EAAEhB,SAAS,CAACqC,IAAI;EACzBX,QAAQ,EAAE1B,SAAS,CAACgC,MAAM;EAC1BO,eAAe,EAAEvC,SAAS,CAACoC,IAAI,CAACI,UAAU;EAC1CC,WAAW,EAAEzC,SAAS,CAAC0C,OAAO,CAAC1C,SAAS,CAACiC,GAAG,CAAC;EAC7CT,UAAU,EAAExB,SAAS,CAACoC,IAAI;EAC1BX,KAAK,EAAEzB,SAAS,CAAC2C;CACpB;AAEDjC,WAAW,CAACkC,YAAY,GAAG;EACvBH,WAAW,EAAE,EAAE;EACfF,eAAe,EAAE,SAAAA,CAAA;IAAM,WAAI;EAAJ;CAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}