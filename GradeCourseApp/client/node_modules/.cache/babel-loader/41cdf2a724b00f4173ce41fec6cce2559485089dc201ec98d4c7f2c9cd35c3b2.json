{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport { EditContext } from './EditContext';\n/**\n * Hook to read the edit controller props from the CreateContext.\n *\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\n *\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} EditControllerProps\n *\n * @returns {EditControllerResult} edit controller props\n *\n * @see useEditController for how it is filled\n *\n */\nexport var useEditContext = function (props) {\n  // Can't find a way to specify the RecordType when EditContext is declared\n  // @ts-ignore\n  var context = useContext(EditContext);\n  // Props take precedence over the context\n  return useMemo(function () {\n    return defaults({}, props != null ? extractEditContextProps(props) : {}, context);\n  }, [context, props]);\n};\n/**\n * Extract only the edit controller props\n *\n * @param {Object} props props passed to the useEditContext hook\n *\n * @returns {EditControllerResult} edit controller props\n */\nvar extractEditContextProps = function (_a) {\n  var data = _a.data,\n    record = _a.record,\n    defaultTitle = _a.defaultTitle,\n    isFetching = _a.isFetching,\n    isLoading = _a.isLoading,\n    mutationMode = _a.mutationMode,\n    redirect = _a.redirect,\n    resource = _a.resource,\n    save = _a.save,\n    saving = _a.saving;\n  return {\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data: record || data,\n    record: record || data,\n    defaultTitle: defaultTitle,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    mutationMode: mutationMode,\n    redirect: redirect,\n    resource: resource,\n    save: save,\n    saving: saving\n  };\n};","map":{"version":3,"names":["useContext","useMemo","defaults","EditContext","useEditContext","props","context","extractEditContextProps","_a","data","record","defaultTitle","isFetching","isLoading","mutationMode","redirect","resource","save","saving"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/controller/edit/useEditContext.tsx"],"sourcesContent":["import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\n\nimport { RaRecord } from '../../types';\nimport { EditContext } from './EditContext';\nimport { EditControllerResult } from './useEditController';\n\n/**\n * Hook to read the edit controller props from the CreateContext.\n *\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\n *\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} EditControllerProps\n *\n * @returns {EditControllerResult} edit controller props\n *\n * @see useEditController for how it is filled\n *\n */\nexport const useEditContext = <RecordType extends RaRecord = any>(\n    props?: Partial<EditControllerResult<RecordType>>\n): EditControllerResult<RecordType> => {\n    // Can't find a way to specify the RecordType when EditContext is declared\n    // @ts-ignore\n    const context = useContext<EditControllerResult<RecordType>>(EditContext);\n\n    // Props take precedence over the context\n    return useMemo(\n        () =>\n            defaults(\n                {},\n                props != null ? extractEditContextProps(props) : {},\n                context\n            ),\n        [context, props]\n    );\n};\n\n/**\n * Extract only the edit controller props\n *\n * @param {Object} props props passed to the useEditContext hook\n *\n * @returns {EditControllerResult} edit controller props\n */\nconst extractEditContextProps = ({\n    data,\n    record,\n    defaultTitle,\n    isFetching,\n    isLoading,\n    mutationMode,\n    redirect,\n    resource,\n    save,\n    saving,\n}: any) => ({\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data: record || data,\n    record: record || data,\n    defaultTitle,\n    isFetching,\n    isLoading,\n    mutationMode,\n    redirect,\n    resource,\n    save,\n    saving,\n});\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,iBAAiB;AAGtC,SAASC,WAAW,QAAQ,eAAe;AAG3C;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAMC,cAAc,GAAG,SAAAA,CAC1BC,KAAiD;EAEjD;EACA;EACA,IAAMC,OAAO,GAAGN,UAAU,CAAmCG,WAAW,CAAC;EAEzE;EACA,OAAOF,OAAO,CACV;IACI,OAAAC,QAAQ,CACJ,EAAE,EACFG,KAAK,IAAI,IAAI,GAAGE,uBAAuB,CAACF,KAAK,CAAC,GAAG,EAAE,EACnDC,OAAO,CACV;EAJD,CAIC,EACL,CAACA,OAAO,EAAED,KAAK,CAAC,CACnB;AACL,CAAC;AAED;;;;;;;AAOA,IAAME,uBAAuB,GAAG,SAAAA,CAACC,EAW3B;MAVFC,IAAI,GAAAD,EAAA,CAAAC,IAAA;IACJC,MAAM,GAAAF,EAAA,CAAAE,MAAA;IACNC,YAAY,GAAAH,EAAA,CAAAG,YAAA;IACZC,UAAU,GAAAJ,EAAA,CAAAI,UAAA;IACVC,SAAS,GAAAL,EAAA,CAAAK,SAAA;IACTC,YAAY,GAAAN,EAAA,CAAAM,YAAA;IACZC,QAAQ,GAAAP,EAAA,CAAAO,QAAA;IACRC,QAAQ,GAAAR,EAAA,CAAAQ,QAAA;IACRC,IAAI,GAAAT,EAAA,CAAAS,IAAA;IACJC,MAAM,GAAAV,EAAA,CAAAU,MAAA;EACC,OAAC;IACR;IACA;IACAT,IAAI,EAAEC,MAAM,IAAID,IAAI;IACpBC,MAAM,EAAEA,MAAM,IAAID,IAAI;IACtBE,YAAY,EAAAA,YAAA;IACZC,UAAU,EAAAA,UAAA;IACVC,SAAS,EAAAA,SAAA;IACTC,YAAY,EAAAA,YAAA;IACZC,QAAQ,EAAAA,QAAA;IACRC,QAAQ,EAAAA,QAAA;IACRC,IAAI,EAAAA,IAAA;IACJC,MAAM,EAAAA;GACT;AAbU,CAaT"},"metadata":{},"sourceType":"module","externalDependencies":[]}