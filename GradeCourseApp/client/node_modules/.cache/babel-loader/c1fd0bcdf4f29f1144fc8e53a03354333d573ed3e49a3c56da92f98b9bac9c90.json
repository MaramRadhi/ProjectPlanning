{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Children, cloneElement, isValidElement, useMemo } from 'react';\nimport { Typography } from '@mui/material';\nimport clsx from 'clsx';\nimport { SimpleFormIteratorClasses } from './useSimpleFormIteratorStyles';\nimport { useSimpleFormIterator } from './useSimpleFormIterator';\nimport { SimpleFormIteratorItemContext } from './SimpleFormIteratorItemContext';\nexport var SimpleFormIteratorItem = React.forwardRef(function (props, ref) {\n  var children = props.children,\n    disabled = props.disabled,\n    disableReordering = props.disableReordering,\n    disableRemove = props.disableRemove,\n    getItemLabel = props.getItemLabel,\n    index = props.index,\n    _a = props.inline,\n    inline = _a === void 0 ? false : _a,\n    member = props.member,\n    record = props.record,\n    removeButton = props.removeButton,\n    reOrderButtons = props.reOrderButtons,\n    resource = props.resource,\n    source = props.source;\n  var _b = useSimpleFormIterator(),\n    total = _b.total,\n    reOrder = _b.reOrder,\n    remove = _b.remove;\n  // Returns a boolean to indicate whether to disable the remove button for certain fields.\n  // If disableRemove is a function, then call the function with the current record to\n  // determining if the button should be disabled. Otherwise, use a boolean property that\n  // enables or disables the button for all of the fields.\n  var disableRemoveField = function (record) {\n    if (typeof disableRemove === 'boolean') {\n      return disableRemove;\n    }\n    return disableRemove && disableRemove(record);\n  };\n  // remove field and call the onClick event of the button passed as removeButton prop\n  var handleRemoveButtonClick = function (originalOnClickHandler, index) {\n    return function (event) {\n      remove(index);\n      if (originalOnClickHandler) {\n        originalOnClickHandler(event);\n      }\n    };\n  };\n  var context = useMemo(function () {\n    return {\n      index: index,\n      total: total,\n      reOrder: function (newIndex) {\n        return reOrder(index, newIndex);\n      },\n      remove: function () {\n        return remove(index);\n      }\n    };\n  }, [index, total, reOrder, remove]);\n  var label = typeof getItemLabel === 'function' ? getItemLabel(index) : getItemLabel;\n  return React.createElement(SimpleFormIteratorItemContext.Provider, {\n    value: context\n  }, React.createElement(\"li\", {\n    className: SimpleFormIteratorClasses.line,\n    ref: ref\n  }, label && React.createElement(Typography, {\n    variant: \"body2\",\n    className: SimpleFormIteratorClasses.index\n  }, label), React.createElement(\"section\", {\n    className: clsx(SimpleFormIteratorClasses.form, inline && SimpleFormIteratorClasses.inline)\n  }, Children.map(children, function (input, index2) {\n    if (!isValidElement(input)) {\n      return null;\n    }\n    var _a = input.props,\n      source = _a.source,\n      inputProps = __rest(_a, [\"source\"]);\n    return cloneElement(input, __assign({\n      source: source ? \"\".concat(member, \".\").concat(source) : member,\n      index: source ? undefined : index2,\n      resource: resource,\n      disabled: disabled\n    }, inputProps));\n  })), !disabled && React.createElement(\"span\", {\n    className: SimpleFormIteratorClasses.action\n  }, !disableReordering && cloneElement(reOrderButtons, {\n    index: index,\n    max: total,\n    reOrder: reOrder,\n    className: clsx('button-reorder', \"button-reorder-\".concat(source, \"-\").concat(index))\n  }), !disableRemoveField(record) && cloneElement(removeButton, {\n    onClick: handleRemoveButtonClick(removeButton.props.onClick, index),\n    className: clsx('button-remove', \"button-remove-\".concat(source, \"-\").concat(index))\n  }))));\n});","map":{"version":3,"names":["React","Children","cloneElement","isValidElement","useMemo","Typography","clsx","SimpleFormIteratorClasses","useSimpleFormIterator","SimpleFormIteratorItemContext","SimpleFormIteratorItem","forwardRef","props","ref","children","disabled","disableReordering","disableRemove","getItemLabel","index","_a","inline","member","record","removeButton","reOrderButtons","resource","source","_b","total","reOrder","remove","disableRemoveField","handleRemoveButtonClick","originalOnClickHandler","event","context","newIndex","label","createElement","Provider","value","className","line","variant","form","map","input","index2","inputProps","__rest","__assign","concat","undefined","action","max","onClick"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/input/ArrayInput/SimpleFormIteratorItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    cloneElement,\n    MouseEvent,\n    MouseEventHandler,\n    isValidElement,\n    ReactElement,\n    ReactNode,\n    useMemo,\n} from 'react';\nimport { Typography } from '@mui/material';\nimport clsx from 'clsx';\nimport { RaRecord } from 'ra-core';\n\nimport { SimpleFormIteratorClasses } from './useSimpleFormIteratorStyles';\nimport { useSimpleFormIterator } from './useSimpleFormIterator';\nimport { ArrayInputContextValue } from './ArrayInputContext';\nimport {\n    SimpleFormIteratorItemContext,\n    SimpleFormIteratorItemContextValue,\n} from './SimpleFormIteratorItemContext';\n\nexport const SimpleFormIteratorItem = React.forwardRef(\n    (props: SimpleFormIteratorItemProps, ref: any) => {\n        const {\n            children,\n            disabled,\n            disableReordering,\n            disableRemove,\n            getItemLabel,\n            index,\n            inline = false,\n            member,\n            record,\n            removeButton,\n            reOrderButtons,\n            resource,\n            source,\n        } = props;\n\n        const { total, reOrder, remove } = useSimpleFormIterator();\n        // Returns a boolean to indicate whether to disable the remove button for certain fields.\n        // If disableRemove is a function, then call the function with the current record to\n        // determining if the button should be disabled. Otherwise, use a boolean property that\n        // enables or disables the button for all of the fields.\n        const disableRemoveField = (record: RaRecord) => {\n            if (typeof disableRemove === 'boolean') {\n                return disableRemove;\n            }\n            return disableRemove && disableRemove(record);\n        };\n\n        // remove field and call the onClick event of the button passed as removeButton prop\n        const handleRemoveButtonClick = (\n            originalOnClickHandler: MouseEventHandler,\n            index: number\n        ) => (event: MouseEvent) => {\n            remove(index);\n            if (originalOnClickHandler) {\n                originalOnClickHandler(event);\n            }\n        };\n\n        const context = useMemo<SimpleFormIteratorItemContextValue>(\n            () => ({\n                index,\n                total,\n                reOrder: newIndex => reOrder(index, newIndex),\n                remove: () => remove(index),\n            }),\n            [index, total, reOrder, remove]\n        );\n\n        const label =\n            typeof getItemLabel === 'function'\n                ? getItemLabel(index)\n                : getItemLabel;\n\n        return (\n            <SimpleFormIteratorItemContext.Provider value={context}>\n                <li className={SimpleFormIteratorClasses.line} ref={ref}>\n                    {label && (\n                        <Typography\n                            variant=\"body2\"\n                            className={SimpleFormIteratorClasses.index}\n                        >\n                            {label}\n                        </Typography>\n                    )}\n                    <section\n                        className={clsx(\n                            SimpleFormIteratorClasses.form,\n                            inline && SimpleFormIteratorClasses.inline\n                        )}\n                    >\n                        {Children.map(\n                            children,\n                            (input: ReactElement, index2) => {\n                                if (!isValidElement<any>(input)) {\n                                    return null;\n                                }\n                                const { source, ...inputProps } = input.props;\n                                return cloneElement(input, {\n                                    source: source\n                                        ? `${member}.${source}`\n                                        : member,\n                                    index: source ? undefined : index2,\n                                    resource,\n                                    disabled,\n                                    ...inputProps,\n                                });\n                            }\n                        )}\n                    </section>\n                    {!disabled && (\n                        <span className={SimpleFormIteratorClasses.action}>\n                            {!disableReordering &&\n                                cloneElement(reOrderButtons, {\n                                    index,\n                                    max: total,\n                                    reOrder,\n                                    className: clsx(\n                                        'button-reorder',\n                                        `button-reorder-${source}-${index}`\n                                    ),\n                                })}\n\n                            {!disableRemoveField(record) &&\n                                cloneElement(removeButton, {\n                                    onClick: handleRemoveButtonClick(\n                                        removeButton.props.onClick,\n                                        index\n                                    ),\n                                    className: clsx(\n                                        'button-remove',\n                                        `button-remove-${source}-${index}`\n                                    ),\n                                })}\n                        </span>\n                    )}\n                </li>\n            </SimpleFormIteratorItemContext.Provider>\n        );\n    }\n);\n\nexport type DisableRemoveFunction = (record: RaRecord) => boolean;\n\ntype GetItemLabelFunc = (index: number) => string | ReactElement;\n\nexport type SimpleFormIteratorItemProps = Partial<ArrayInputContextValue> & {\n    children?: ReactNode;\n    disabled?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    getItemLabel?: boolean | GetItemLabelFunc;\n    index: number;\n    inline?: boolean;\n    member: string;\n    onRemoveField: (index: number) => void;\n    onReorder: (origin: number, destination: number) => void;\n    record: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource: string;\n    source: string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}