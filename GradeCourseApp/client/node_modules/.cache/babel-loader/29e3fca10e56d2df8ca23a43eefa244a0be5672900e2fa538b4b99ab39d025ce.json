{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useResourceDefinition } from 'ra-core';\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport var CreateActions = function (_a) {\n  var className = _a.className,\n    rest = __rest(_a, [\"className\"]);\n  var hasList = useResourceDefinition(rest).hasList;\n  return React.createElement(TopToolbar, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasList && React.createElement(ListButton, null));\n};\nvar sanitizeRestProps = function (_a) {\n  var _b = _a.className,\n    className = _b === void 0 ? null : _b,\n    _c = _a.hasList,\n    hasList = _c === void 0 ? null : _c,\n    _d = _a.resource,\n    resource = _d === void 0 ? null : _d,\n    rest = __rest(_a, [\"className\", \"hasList\", \"resource\"]);\n  return rest;\n};\nCreateActions.propTypes = {\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  resource: PropTypes.string\n};","map":{"version":3,"names":["React","PropTypes","TopToolbar","ListButton","useResourceDefinition","CreateActions","_a","className","rest","__rest","hasList","createElement","__assign","sanitizeRestProps","_b","_c","_d","resource","propTypes","string","hasCreate","bool","hasEdit","hasShow"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/detail/CreateActions.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TopToolbar from '../layout/TopToolbar';\nimport { ListButton } from '../button';\nimport { useResourceDefinition } from 'ra-core';\n\n/**\n * Action Toolbar for the Create view\n *\n * Internal component. If you want to add or remove actions for a Create view,\n * write your own CreateActions Component. Then, in the <Create> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, Create, ListButton } from 'react-admin';\n *\n *     const PostCreateActions = () => (\n *         <TopToolbar>\n *             <ListButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostCreate = (props) => (\n *         <Create actions={<PostCreateActions />} {...props}>\n *             ...\n *         </Create>\n *     );\n */\nexport const CreateActions = ({ className, ...rest }: CreateActionsProps) => {\n    const { hasList } = useResourceDefinition(rest);\n    return (\n        <TopToolbar className={className} {...sanitizeRestProps(rest)}>\n            {hasList && <ListButton />}\n        </TopToolbar>\n    );\n};\n\nconst sanitizeRestProps = ({\n    className = null,\n    hasList = null,\n    resource = null,\n    ...rest\n}) => rest;\n\nexport interface CreateActionsProps {\n    className?: string;\n    hasCreate?: boolean;\n    hasEdit?: boolean;\n    hasList?: boolean;\n    hasShow?: boolean;\n    resource?: string;\n}\n\nCreateActions.propTypes = {\n    className: PropTypes.string,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    resource: PropTypes.string,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,qBAAqB,QAAQ,SAAS;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,aAAa,GAAG,SAAAA,CAACC,EAA0C;EAAxC,IAAAC,SAAS,GAAAD,EAAA,CAAAC,SAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAH,EAAA,EAApB,aAAsB,CAAF;EACtC,IAAAI,OAAO,GAAKN,qBAAqB,CAACI,IAAI,CAAC,CAAAE,OAAhC;EACf,OACIV,KAAA,CAAAW,aAAA,CAACT,UAAU,EAAAU,QAAA;IAACL,SAAS,EAAEA;EAAS,GAAMM,iBAAiB,CAACL,IAAI,CAAC,GACxDE,OAAO,IAAIV,KAAA,CAAAW,aAAA,CAACR,UAAU,OAAG,CACjB;AAErB,CAAC;AAED,IAAMU,iBAAiB,GAAG,SAAAA,CAACP,EAK1B;EAJG,IAAAQ,EAAA,GAAAR,EAAA,CAAAC,SAAgB;IAAhBA,SAAS,GAAAO,EAAA,cAAG,IAAI,GAAAA,EAAA;IAChBC,EAAA,GAAAT,EAAA,CAAAI,OAAc;IAAdA,OAAO,GAAAK,EAAA,cAAG,IAAI,GAAAA,EAAA;IACdC,EAAA,GAAAV,EAAA,CAAAW,QAAe;IAAfA,QAAQ,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACZR,IAAI,GAAAC,MAAA,CAAAH,EAAA,EAJgB,oCAK1B,CADU;EACL,OAAAE,IAAI;CAAA;AAWVH,aAAa,CAACa,SAAS,GAAG;EACtBX,SAAS,EAAEN,SAAS,CAACkB,MAAM;EAC3BC,SAAS,EAAEnB,SAAS,CAACoB,IAAI;EACzBC,OAAO,EAAErB,SAAS,CAACoB,IAAI;EACvBE,OAAO,EAAEtB,SAAS,CAACoB,IAAI;EACvBX,OAAO,EAAET,SAAS,CAACoB,IAAI;EACvBJ,QAAQ,EAAEhB,SAAS,CAACkB;CACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}