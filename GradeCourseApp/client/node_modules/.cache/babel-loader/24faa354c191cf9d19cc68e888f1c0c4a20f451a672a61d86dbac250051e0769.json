{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/**\n * A higher-order function which wraps an authProvider to handle refreshing authentication.\n * This is useful when the authentication service supports a refresh token mechanism.\n * The wrapped provider will call the refreshAuth function before\n * calling the authProvider checkAuth, getIdentity and getPermissions methods.\n *\n * The refreshAuth function should return a Promise that resolves when the authentication token has been refreshed.\n * It might throw an error if the refresh failed. In this case, react-admin will handle the error as usual.\n *\n * @param provider An authProvider\n * @param refreshAuth A function that refreshes the authentication token if needed and returns a Promise.\n * @returns A wrapped authProvider.\n *\n * @example\n * import { addRefreshAuthToAuthProvider } from 'react-admin';\n * import { authProvider } from './authProvider';\n * import { refreshAuth } from './refreshAuth';\n *\n * const authProvider = addRefreshAuthToAuthProvider(authProvider, refreshAuth);\n */\nexport var addRefreshAuthToAuthProvider = function (provider, refreshAuth) {\n  var proxy = new Proxy(provider, {\n    get: function (_, name) {\n      var _this = this;\n      var shouldIntercept = AuthProviderInterceptedMethods.includes(name.toString());\n      if (shouldIntercept) {\n        return function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4 /*yield*/, refreshAuth()];\n                case 1:\n                  _a.sent();\n                  return [2 /*return*/, provider[name.toString()].apply(provider, args)];\n              }\n            });\n          });\n        };\n      }\n      return provider[name.toString()];\n    }\n  });\n  return proxy;\n};\nvar AuthProviderInterceptedMethods = ['checkAuth', 'getIdentity', 'getPermissions'];","map":{"version":3,"names":["addRefreshAuthToAuthProvider","provider","refreshAuth","proxy","Proxy","get","_","name","_this","shouldIntercept","AuthProviderInterceptedMethods","includes","toString","args","_i","arguments","length","_a","sent","apply"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/auth/addRefreshAuthToAuthProvider.ts"],"sourcesContent":["import { AuthProvider } from '../types';\n\n/**\n * A higher-order function which wraps an authProvider to handle refreshing authentication.\n * This is useful when the authentication service supports a refresh token mechanism.\n * The wrapped provider will call the refreshAuth function before\n * calling the authProvider checkAuth, getIdentity and getPermissions methods.\n *\n * The refreshAuth function should return a Promise that resolves when the authentication token has been refreshed.\n * It might throw an error if the refresh failed. In this case, react-admin will handle the error as usual.\n *\n * @param provider An authProvider\n * @param refreshAuth A function that refreshes the authentication token if needed and returns a Promise.\n * @returns A wrapped authProvider.\n *\n * @example\n * import { addRefreshAuthToAuthProvider } from 'react-admin';\n * import { authProvider } from './authProvider';\n * import { refreshAuth } from './refreshAuth';\n *\n * const authProvider = addRefreshAuthToAuthProvider(authProvider, refreshAuth);\n */\nexport const addRefreshAuthToAuthProvider = (\n    provider: AuthProvider,\n    refreshAuth: () => Promise<void>\n): AuthProvider => {\n    const proxy = new Proxy(provider, {\n        get(_, name) {\n            const shouldIntercept = AuthProviderInterceptedMethods.includes(\n                name.toString()\n            );\n\n            if (shouldIntercept) {\n                return async (...args: any[]) => {\n                    await refreshAuth();\n                    return provider[name.toString()](...args);\n                };\n            }\n\n            return provider[name.toString()];\n        },\n    });\n\n    return proxy;\n};\n\nconst AuthProviderInterceptedMethods = [\n    'checkAuth',\n    'getIdentity',\n    'getPermissions',\n];\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,IAAMA,4BAA4B,GAAG,SAAAA,CACxCC,QAAsB,EACtBC,WAAgC;EAEhC,IAAMC,KAAK,GAAG,IAAIC,KAAK,CAACH,QAAQ,EAAE;IAC9BI,GAAG,WAAAA,CAACC,CAAC,EAAEC,IAAI;MAAX,IAAAC,KAAA;MACI,IAAMC,eAAe,GAAGC,8BAA8B,CAACC,QAAQ,CAC3DJ,IAAI,CAACK,QAAQ,EAAE,CAClB;MAED,IAAIH,eAAe,EAAE;QACjB,OAAO;UAAO,IAAAI,IAAA;eAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;YAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;;;;;kBACV,qBAAMZ,WAAW,EAAE;;kBAAnBe,EAAA,CAAAC,IAAA,EAAmB;kBACnB,sBAAOjB,QAAQ,CAACM,IAAI,CAACK,QAAQ,EAAE,CAAC,CAAAO,KAAA,CAAzBlB,QAAQ,EAAqBY,IAAI;cAAE;;;SAC7C;;MAGL,OAAOZ,QAAQ,CAACM,IAAI,CAACK,QAAQ,EAAE,CAAC;IACpC;GACH,CAAC;EAEF,OAAOT,KAAK;AAChB,CAAC;AAED,IAAMO,8BAA8B,GAAG,CACnC,WAAW,EACX,aAAa,EACb,gBAAgB,CACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}