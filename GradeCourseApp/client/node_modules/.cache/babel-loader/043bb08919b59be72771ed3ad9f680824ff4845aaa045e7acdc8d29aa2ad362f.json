{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.delete() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The delete parameters { ids }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.ids The resource identifiers, e.g. [123, 456]\n *\n * @returns The current mutation state. Destructure as [deleteMany, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteMany, { isLoading: false, isIdle: true }]\n * - start:   [deleteMany, { isLoading: true }]\n * - success: [deleteMany, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [deleteMany, { error: [error from response], isLoading: false, isError: true }]\n *\n * The deleteMany() function must be called with a resource and a parameter object: deleteMany(resource, { ids, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the deleteMany callback\n *\n * import { useDeleteMany } from 'react-admin';\n *\n * const BulkDeletePostsButton = ({ selectedIds }) => {\n *     const [deleteMany, { isLoading, error }] = useDeleteMany();\n *     const handleClick = () => {\n *         deleteMany('posts', { ids: selectedIds })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Delete selected posts</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDeleteMany } from 'react-admin';\n *\n * const BulkDeletePostsButton = ({ selectedIds }) => {\n *     const [deleteMany, { isLoading, error }] = useDeleteMany('posts', { ids: selectedIds });\n *     const handleClick = () => {\n *         deleteMany()\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Delete selected posts</button>;\n * };\n *\n * @example // TypeScript\n * const [deleteMany, { data }] = useDeleteMany<Product>('products', { ids });\n *                        \\-- data is Product\n */\nexport var useDeleteMany = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var ids = params.ids;\n  var _a = options.mutationMode,\n    mutationMode = _a === void 0 ? 'pessimistic' : _a,\n    reactMutationOptions = __rest(options, [\"mutationMode\"]);\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef({});\n  var snapshot = useRef([]);\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n      ids = _a.ids;\n    // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n    // because setQueryData doesn't accept a stale time option\n    var now = Date.now();\n    var updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n    var updateColl = function (old) {\n      if (!old) return;\n      var newCollection = __spreadArray([], old, true);\n      ids.forEach(function (id) {\n        var index = newCollection.findIndex(\n        // eslint-disable-next-line eqeqeq\n        function (record) {\n          return record.id == id;\n        });\n        if (index === -1) {\n          return;\n        }\n        newCollection = __spreadArray(__spreadArray([], newCollection.slice(0, index), true), newCollection.slice(index + 1), true);\n      });\n      return newCollection;\n    };\n    queryClient.setQueriesData([resource, 'getList'], function (res) {\n      if (!res || !res.data) return res;\n      var newCollection = updateColl(res.data);\n      var recordWasFound = newCollection.length < res.data.length;\n      return recordWasFound ? {\n        data: newCollection,\n        total: res.total ? res.total - (res.data.length - newCollection.length) : undefined,\n        pageInfo: res.pageInfo\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getMany'], function (coll) {\n      return coll && coll.length > 0 ? updateColl(coll) : coll;\n    }, {\n      updatedAt: updatedAt\n    });\n    queryClient.setQueriesData([resource, 'getManyReference'], function (res) {\n      if (!res || !res.data) return res;\n      var newCollection = updateColl(res.data);\n      var recordWasFound = newCollection.length < res.data.length;\n      return recordWasFound ? {\n        data: newCollection,\n        total: res.total - (res.data.length - newCollection.length)\n      } : res;\n    }, {\n      updatedAt: updatedAt\n    });\n  };\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.resource,\n      callTimeResource = _c === void 0 ? resource : _c,\n      _d = _b.ids,\n      callTimeIds = _d === void 0 ? paramsRef.current.ids : _d,\n      _e = _b.meta,\n      callTimeMeta = _e === void 0 ? paramsRef.current.meta : _e;\n    return dataProvider.deleteMany(callTimeResource, {\n      ids: callTimeIds,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, reactMutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!reactMutationOptions.onMutate) return [3 /*break*/, 2];\n              return [4 /*yield*/, reactMutationOptions.onMutate(variables)];\n            case 1:\n              userContext = _a.sent() || {};\n              return [2 /*return*/, __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n            case 2:\n              // Return a context object with the snapshot value\n              return [2 /*return*/, {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n            value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n      if (reactMutationOptions.onError) {\n        return reactMutationOptions.onError(error, variables, context);\n      }\n      // call-time error callback is executed by react-query\n    },\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n          callTimeResource = _a === void 0 ? resource : _a,\n          _b = variables.ids,\n          callTimeIds = _b === void 0 ? ids : _b;\n        updateCache({\n          resource: callTimeResource,\n          ids: callTimeIds\n        });\n        if (reactMutationOptions.onSuccess) {\n          reactMutationOptions.onSuccess(data, variables, context);\n        }\n        // call-time success callback is executed by react-query\n      }\n    },\n\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0];\n          queryClient.invalidateQueries(key);\n        });\n      }\n      if (reactMutationOptions.onSettled) {\n        return reactMutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n  var mutate = function (callTimeResource, callTimeParams, updateOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (updateOptions === void 0) {\n      updateOptions = {};\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, onSuccess, onSettled, onError, _a, callTimeIds, queryKeys;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            mutationMode = updateOptions.mutationMode, onSuccess = updateOptions.onSuccess, onSettled = updateOptions.onSettled, onError = updateOptions.onError;\n            // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n            paramsRef.current = params;\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n            if (mode.current === 'pessimistic') {\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSuccess: onSuccess,\n                onSettled: onSettled,\n                onError: onError\n              })];\n            }\n            _a = callTimeParams.ids, callTimeIds = _a === void 0 ? ids : _a;\n            queryKeys = [[callTimeResource, 'getList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n             */\n            snapshot.current = queryKeys.reduce(function (prev, curr) {\n              return prev.concat(queryClient.getQueriesData(curr));\n            }, []);\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            return [4 /*yield*/, Promise.all(snapshot.current.map(function (_a) {\n              var key = _a[0];\n              return queryClient.cancelQueries(key);\n            }))];\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _b.sent();\n            // Optimistically update to the new value\n            updateCache({\n              resource: callTimeResource,\n              ids: callTimeIds\n            });\n            // run the success callbacks during the next tick\n            if (onSuccess) {\n              setTimeout(function () {\n                return onSuccess(callTimeIds, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n            if (reactMutationOptions.onSuccess) {\n              setTimeout(function () {\n                return reactMutationOptions.onSuccess(callTimeIds, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: onSettled,\n                onError: onError\n              })];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                      value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: onSettled,\n                    onError: onError\n                  });\n                }\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return [useEvent(mutate), mutation];\n};","map":{"version":3,"names":["useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useEvent","useDeleteMany","resource","params","options","dataProvider","queryClient","ids","_a","mutationMode","reactMutationOptions","__rest","mode","paramsRef","snapshot","updateCache","now","Date","updatedAt","current","updateColl","old","newCollection","__spreadArray","forEach","id","index","findIndex","record","slice","setQueriesData","res","data","recordWasFound","length","total","undefined","pageInfo","coll","mutation","_b","_c","callTimeResource","_d","callTimeIds","_e","meta","callTimeMeta","deleteMany","then","__assign","onMutate","variables","__awaiter","userContext","sent","onError","error","context","key","value","setQueryData","onSuccess","onSettled","invalidateQueries","mutate","callTimeParams","updateOptions","queryKeys","reduce","prev","curr","concat","getQueriesData","Promise","all","map","cancelQueries","setTimeout","once","isUndo"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/dataProvider/useDeleteMany.ts"],"sourcesContent":["import { useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n} from 'react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport {\n    RaRecord,\n    DeleteManyParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n} from '../types';\nimport { useEvent } from '../util';\n\n/**\n * Get a callback to call the dataProvider.delete() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The delete parameters { ids }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.ids The resource identifiers, e.g. [123, 456]\n *\n * @returns The current mutation state. Destructure as [deleteMany, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteMany, { isLoading: false, isIdle: true }]\n * - start:   [deleteMany, { isLoading: true }]\n * - success: [deleteMany, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [deleteMany, { error: [error from response], isLoading: false, isError: true }]\n *\n * The deleteMany() function must be called with a resource and a parameter object: deleteMany(resource, { ids, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the deleteMany callback\n *\n * import { useDeleteMany } from 'react-admin';\n *\n * const BulkDeletePostsButton = ({ selectedIds }) => {\n *     const [deleteMany, { isLoading, error }] = useDeleteMany();\n *     const handleClick = () => {\n *         deleteMany('posts', { ids: selectedIds })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Delete selected posts</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDeleteMany } from 'react-admin';\n *\n * const BulkDeletePostsButton = ({ selectedIds }) => {\n *     const [deleteMany, { isLoading, error }] = useDeleteMany('posts', { ids: selectedIds });\n *     const handleClick = () => {\n *         deleteMany()\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Delete selected posts</button>;\n * };\n *\n * @example // TypeScript\n * const [deleteMany, { data }] = useDeleteMany<Product>('products', { ids });\n *                        \\-- data is Product\n */\nexport const useDeleteMany = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n>(\n    resource?: string,\n    params: Partial<DeleteManyParams<RecordType>> = {},\n    options: UseDeleteManyOptions<RecordType, MutationError> = {}\n): UseDeleteManyResult<RecordType, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const { ids } = params;\n    const { mutationMode = 'pessimistic', ...reactMutationOptions } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef = useRef<Partial<DeleteManyParams<RecordType>>>({});\n    const snapshot = useRef<Snapshot>([]);\n\n    const updateCache = ({ resource, ids }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const now = Date.now();\n        const updatedAt = mode.current === 'undoable' ? now + 5 * 1000 : now;\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return;\n            let newCollection = [...old];\n            ids.forEach(id => {\n                const index = newCollection.findIndex(\n                    // eslint-disable-next-line eqeqeq\n                    record => record.id == id\n                );\n                if (index === -1) {\n                    return;\n                }\n                newCollection = [\n                    ...newCollection.slice(0, index),\n                    ...newCollection.slice(index + 1),\n                ];\n            });\n            return newCollection;\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        queryClient.setQueriesData(\n            [resource, 'getList'],\n            (res: GetListResult) => {\n                if (!res || !res.data) return res;\n                const newCollection = updateColl(res.data);\n                const recordWasFound = newCollection.length < res.data.length;\n                return recordWasFound\n                    ? {\n                          data: newCollection,\n                          total: res.total\n                              ? res.total -\n                                (res.data.length - newCollection.length)\n                              : undefined,\n                          pageInfo: res.pageInfo,\n                      }\n                    : res;\n            },\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getMany'],\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getManyReference'],\n            (res: GetListResult) => {\n                if (!res || !res.data) return res;\n                const newCollection = updateColl(res.data);\n                const recordWasFound = newCollection.length < res.data.length;\n                return recordWasFound\n                    ? {\n                          data: newCollection,\n                          total:\n                              res.total -\n                              (res.data.length - newCollection.length),\n                      }\n                    : res;\n            },\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        RecordType['id'][],\n        MutationError,\n        Partial<UseDeleteManyMutateParams<RecordType>>\n    >(\n        ({\n            resource: callTimeResource = resource,\n            ids: callTimeIds = paramsRef.current.ids,\n            meta: callTimeMeta = paramsRef.current.meta,\n        } = {}) =>\n            dataProvider\n                .deleteMany<RecordType>(callTimeResource, {\n                    ids: callTimeIds,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data),\n        {\n            ...reactMutationOptions,\n            onMutate: async (\n                variables: Partial<UseDeleteManyMutateParams<RecordType>>\n            ) => {\n                if (reactMutationOptions.onMutate) {\n                    const userContext =\n                        (await reactMutationOptions.onMutate(variables)) || {};\n                    return {\n                        snapshot: snapshot.current,\n                        // @ts-ignore\n                        ...userContext,\n                    };\n                } else {\n                    // Return a context object with the snapshot value\n                    return { snapshot: snapshot.current };\n                }\n            },\n            onError: (\n                error: MutationError,\n                variables: Partial<UseDeleteManyMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // If the mutation fails, use the context returned from onMutate to rollback\n                    context.snapshot.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                }\n\n                if (reactMutationOptions.onError) {\n                    return reactMutationOptions.onError(\n                        error,\n                        variables,\n                        context\n                    );\n                }\n                // call-time error callback is executed by react-query\n            },\n            onSuccess: (\n                data: RecordType['id'][],\n                variables: Partial<UseDeleteManyMutateParams<RecordType>> = {},\n                context: unknown\n            ) => {\n                if (mode.current === 'pessimistic') {\n                    // update the getOne and getList query cache with the new result\n                    const {\n                        resource: callTimeResource = resource,\n                        ids: callTimeIds = ids,\n                    } = variables;\n                    updateCache({\n                        resource: callTimeResource,\n                        ids: callTimeIds,\n                    });\n\n                    if (reactMutationOptions.onSuccess) {\n                        reactMutationOptions.onSuccess(\n                            data,\n                            variables,\n                            context\n                        );\n                    }\n                    // call-time success callback is executed by react-query\n                }\n            },\n            onSettled: (\n                data: RecordType['id'][],\n                error: MutationError,\n                variables: Partial<UseDeleteManyMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // Always refetch after error or success:\n                    context.snapshot.forEach(([key]) => {\n                        queryClient.invalidateQueries(key);\n                    });\n                }\n\n                if (reactMutationOptions.onSettled) {\n                    return reactMutationOptions.onSettled(\n                        data,\n                        error,\n                        variables,\n                        context\n                    );\n                }\n            },\n        }\n    );\n\n    const mutate = async (\n        callTimeResource: string = resource,\n        callTimeParams: Partial<DeleteManyParams<RecordType>> = {},\n        updateOptions: MutateOptions<\n            RecordType['id'][],\n            unknown,\n            Partial<UseDeleteManyMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode } = {}\n    ) => {\n        const { mutationMode, onSuccess, onSettled, onError } = updateOptions;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (mode.current === 'pessimistic') {\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSuccess, onSettled, onError }\n            );\n        }\n\n        const { ids: callTimeIds = ids } = callTimeParams;\n\n        // optimistic update as documented in https://react-query-v3.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const queryKeys = [\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, curr) => prev.concat(queryClient.getQueriesData(curr)),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([key]) => queryClient.cancelQueries(key))\n        );\n\n        // Optimistically update to the new value\n        updateCache({\n            resource: callTimeResource,\n            ids: callTimeIds,\n        });\n\n        // run the success callbacks during the next tick\n        if (onSuccess) {\n            setTimeout(\n                () =>\n                    onSuccess(\n                        callTimeIds,\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n        if (reactMutationOptions.onSuccess) {\n            setTimeout(\n                () =>\n                    reactMutationOptions.onSuccess(\n                        callTimeIds,\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSettled, onError }\n            );\n        } else {\n            // undoable mutation: register the mutation for later\n            undoableEventEmitter.once('end', ({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate(\n                        { resource: callTimeResource, ...callTimeParams },\n                        { onSettled, onError }\n                    );\n                }\n            });\n        }\n    };\n\n    return [useEvent(mutate), mutation];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseDeleteManyMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    ids?: RecordType['id'][];\n    meta?: any;\n}\n\nexport type UseDeleteManyOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = UseMutationOptions<\n    RecordType['id'][],\n    MutationError,\n    Partial<UseDeleteManyMutateParams<RecordType>>\n> & { mutationMode?: MutationMode };\n\nexport type UseDeleteManyResult<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = [\n    (\n        resource?: string,\n        params?: Partial<DeleteManyParams<RecordType>>,\n        options?: MutateOptions<\n            RecordType['id'][],\n            MutationError,\n            Partial<UseDeleteManyMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode }\n    ) => Promise<void>,\n    UseMutationResult<\n        RecordType['id'][],\n        MutationError,\n        Partial<DeleteManyParams<RecordType> & { resource?: string }>,\n        unknown\n    >\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}