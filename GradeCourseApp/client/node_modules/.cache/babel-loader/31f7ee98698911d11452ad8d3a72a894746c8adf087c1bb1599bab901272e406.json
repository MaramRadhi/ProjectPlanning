{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Snackbar } from '@mui/material';\nimport clsx from 'clsx';\nimport { useNotificationContext, undoableEventEmitter, useTranslate } from 'ra-core';\nvar defaultAnchorOrigin = {\n  vertical: 'bottom',\n  horizontal: 'center'\n};\n/**\n * Provides a way to show a notification.\n * @see useNotify\n *\n * @example <caption>Basic usage</caption>\n * <Notification />\n *\n * @param props The component props\n * @param {string} props.type The notification type. Defaults to 'info'.\n * @param {number} props.autoHideDuration Duration in milliseconds to wait until hiding a given notification. Defaults to 4000.\n * @param {boolean} props.multiLine Set it to `true` if the notification message should be shown in more than one line.\n */\nexport var Notification = function (props) {\n  var _a;\n  var className = props.className,\n    _b = props.type,\n    type = _b === void 0 ? 'info' : _b,\n    _c = props.autoHideDuration,\n    autoHideDuration = _c === void 0 ? 4000 : _c,\n    _d = props.multiLine,\n    multiLine = _d === void 0 ? false : _d,\n    _e = props.anchorOrigin,\n    anchorOrigin = _e === void 0 ? defaultAnchorOrigin : _e,\n    rest = __rest(props, [\"className\", \"type\", \"autoHideDuration\", \"multiLine\", \"anchorOrigin\"]);\n  var _f = useNotificationContext(),\n    notifications = _f.notifications,\n    takeNotification = _f.takeNotification;\n  var _g = useState(false),\n    open = _g[0],\n    setOpen = _g[1];\n  var _h = React.useState(undefined),\n    messageInfo = _h[0],\n    setMessageInfo = _h[1];\n  var translate = useTranslate();\n  useEffect(function () {\n    if (notifications.length && !messageInfo) {\n      // Set a new snack when we don't have an active one\n      setMessageInfo(takeNotification());\n      setOpen(true);\n    } else if (notifications.length && messageInfo && open) {\n      // Close an active snack when a new one is added\n      setOpen(false);\n    }\n  }, [notifications, messageInfo, open, takeNotification]);\n  var handleRequestClose = useCallback(function () {\n    setOpen(false);\n  }, [setOpen]);\n  var handleExited = useCallback(function () {\n    if (messageInfo && messageInfo.notificationOptions.undoable) {\n      undoableEventEmitter.emit('end', {\n        isUndo: false\n      });\n    }\n    setMessageInfo(undefined);\n  }, [messageInfo]);\n  var handleUndo = useCallback(function () {\n    undoableEventEmitter.emit('end', {\n      isUndo: true\n    });\n    setOpen(false);\n  }, []);\n  if (!messageInfo) return null;\n  var message = messageInfo.message,\n    typeFromMessage = messageInfo.type,\n    _j = messageInfo.notificationOptions,\n    autoHideDurationFromMessage = _j.autoHideDuration,\n    messageArgs = _j.messageArgs,\n    multilineFromMessage = _j.multiLine,\n    undoable = _j.undoable,\n    options = __rest(_j, [\"autoHideDuration\", \"messageArgs\", \"multiLine\", \"undoable\"]);\n  return React.createElement(StyledSnackbar, __assign({\n    className: className,\n    open: open,\n    message: message && typeof message === 'string' && translate(message, messageArgs),\n    autoHideDuration: autoHideDurationFromMessage || autoHideDuration,\n    disableWindowBlurListener: undoable,\n    TransitionProps: {\n      onExited: handleExited\n    },\n    onClose: handleRequestClose,\n    ContentProps: {\n      className: clsx(NotificationClasses[typeFromMessage || type], (_a = {}, _a[NotificationClasses.multiLine] = multilineFromMessage || multiLine, _a))\n    },\n    action: undoable ? React.createElement(Button, {\n      color: \"primary\",\n      className: NotificationClasses.undo,\n      size: \"small\",\n      onClick: handleUndo\n    }, React.createElement(React.Fragment, null, translate('ra.action.undo'))) : null,\n    anchorOrigin: anchorOrigin\n  }, rest, options), message && typeof message !== 'string' ? message : null);\n};\nNotification.propTypes = {\n  type: PropTypes.string,\n  autoHideDuration: PropTypes.number,\n  multiLine: PropTypes.bool\n};\nvar PREFIX = 'RaNotification';\nexport var NotificationClasses = {\n  success: \"\".concat(PREFIX, \"-success\"),\n  error: \"\".concat(PREFIX, \"-error\"),\n  warning: \"\".concat(PREFIX, \"-warning\"),\n  undo: \"\".concat(PREFIX, \"-undo\"),\n  multiLine: \"\".concat(PREFIX, \"-multiLine\")\n};\nvar StyledSnackbar = styled(Snackbar, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme,\n    type = _a.type;\n  return _b = {}, _b[\"& .\".concat(NotificationClasses.success)] = {\n    backgroundColor: theme.palette.success.main,\n    color: theme.palette.success.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.error)] = {\n    backgroundColor: theme.palette.error.main,\n    color: theme.palette.error.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.warning)] = {\n    backgroundColor: theme.palette.warning.main,\n    color: theme.palette.warning.contrastText\n  }, _b[\"& .\".concat(NotificationClasses.undo)] = {\n    color: type === 'success' ? theme.palette.success.contrastText : theme.palette.primary.light\n  }, _b[\"& .\".concat(NotificationClasses.multiLine)] = {\n    whiteSpace: 'pre-wrap'\n  }, _b;\n});","map":{"version":3,"names":["React","styled","useState","useEffect","useCallback","PropTypes","Button","Snackbar","clsx","useNotificationContext","undoableEventEmitter","useTranslate","defaultAnchorOrigin","vertical","horizontal","Notification","props","className","_b","type","_c","autoHideDuration","_d","multiLine","_e","anchorOrigin","rest","__rest","_f","notifications","takeNotification","_g","open","setOpen","_h","undefined","messageInfo","setMessageInfo","translate","length","handleRequestClose","handleExited","notificationOptions","undoable","emit","isUndo","handleUndo","message","typeFromMessage","_j","autoHideDurationFromMessage","messageArgs","multilineFromMessage","options","createElement","StyledSnackbar","__assign","disableWindowBlurListener","TransitionProps","onExited","onClose","ContentProps","NotificationClasses","_a","action","color","undo","size","onClick","Fragment","propTypes","string","number","bool","PREFIX","success","concat","error","warning","name","overridesResolver","styles","root","theme","backgroundColor","palette","main","contrastText","primary","light","whiteSpace"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/layout/Notification.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled, Theme } from '@mui/material/styles';\nimport { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Snackbar, SnackbarProps, SnackbarOrigin } from '@mui/material';\nimport clsx from 'clsx';\n\nimport {\n    useNotificationContext,\n    undoableEventEmitter,\n    useTranslate,\n} from 'ra-core';\n\nconst defaultAnchorOrigin: SnackbarOrigin = {\n    vertical: 'bottom',\n    horizontal: 'center',\n};\n\n/**\n * Provides a way to show a notification.\n * @see useNotify\n *\n * @example <caption>Basic usage</caption>\n * <Notification />\n *\n * @param props The component props\n * @param {string} props.type The notification type. Defaults to 'info'.\n * @param {number} props.autoHideDuration Duration in milliseconds to wait until hiding a given notification. Defaults to 4000.\n * @param {boolean} props.multiLine Set it to `true` if the notification message should be shown in more than one line.\n */\nexport const Notification = (props: NotificationProps) => {\n    const {\n        className,\n        type = 'info',\n        autoHideDuration = 4000,\n        multiLine = false,\n        anchorOrigin = defaultAnchorOrigin,\n        ...rest\n    } = props;\n    const { notifications, takeNotification } = useNotificationContext();\n    const [open, setOpen] = useState(false);\n    const [messageInfo, setMessageInfo] = React.useState(undefined);\n    const translate = useTranslate();\n\n    useEffect(() => {\n        if (notifications.length && !messageInfo) {\n            // Set a new snack when we don't have an active one\n            setMessageInfo(takeNotification());\n            setOpen(true);\n        } else if (notifications.length && messageInfo && open) {\n            // Close an active snack when a new one is added\n            setOpen(false);\n        }\n    }, [notifications, messageInfo, open, takeNotification]);\n\n    const handleRequestClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const handleExited = useCallback(() => {\n        if (messageInfo && messageInfo.notificationOptions.undoable) {\n            undoableEventEmitter.emit('end', { isUndo: false });\n        }\n        setMessageInfo(undefined);\n    }, [messageInfo]);\n\n    const handleUndo = useCallback(() => {\n        undoableEventEmitter.emit('end', { isUndo: true });\n        setOpen(false);\n    }, []);\n\n    if (!messageInfo) return null;\n    const {\n        message,\n        type: typeFromMessage,\n        notificationOptions: {\n            autoHideDuration: autoHideDurationFromMessage,\n            messageArgs,\n            multiLine: multilineFromMessage,\n            undoable,\n            ...options\n        },\n    } = messageInfo;\n\n    return (\n        <StyledSnackbar\n            className={className}\n            open={open}\n            message={\n                message &&\n                typeof message === 'string' &&\n                translate(message, messageArgs)\n            }\n            autoHideDuration={autoHideDurationFromMessage || autoHideDuration}\n            disableWindowBlurListener={undoable}\n            TransitionProps={{ onExited: handleExited }}\n            onClose={handleRequestClose}\n            ContentProps={{\n                className: clsx(NotificationClasses[typeFromMessage || type], {\n                    [NotificationClasses.multiLine]:\n                        multilineFromMessage || multiLine,\n                }),\n            }}\n            action={\n                undoable ? (\n                    <Button\n                        color=\"primary\"\n                        className={NotificationClasses.undo}\n                        size=\"small\"\n                        onClick={handleUndo}\n                    >\n                        <>{translate('ra.action.undo')}</>\n                    </Button>\n                ) : null\n            }\n            anchorOrigin={anchorOrigin}\n            {...rest}\n            {...options}\n        >\n            {message && typeof message !== 'string' ? message : null}\n        </StyledSnackbar>\n    );\n};\n\nNotification.propTypes = {\n    type: PropTypes.string,\n    autoHideDuration: PropTypes.number,\n    multiLine: PropTypes.bool,\n};\n\nconst PREFIX = 'RaNotification';\n\nexport const NotificationClasses = {\n    success: `${PREFIX}-success`,\n    error: `${PREFIX}-error`,\n    warning: `${PREFIX}-warning`,\n    undo: `${PREFIX}-undo`,\n    multiLine: `${PREFIX}-multiLine`,\n};\n\nconst StyledSnackbar = styled(Snackbar, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme, type }: NotificationProps & { theme?: Theme }) => ({\n    [`& .${NotificationClasses.success}`]: {\n        backgroundColor: theme.palette.success.main,\n        color: theme.palette.success.contrastText,\n    },\n\n    [`& .${NotificationClasses.error}`]: {\n        backgroundColor: theme.palette.error.main,\n        color: theme.palette.error.contrastText,\n    },\n\n    [`& .${NotificationClasses.warning}`]: {\n        backgroundColor: theme.palette.warning.main,\n        color: theme.palette.warning.contrastText,\n    },\n\n    [`& .${NotificationClasses.undo}`]: {\n        color:\n            type === 'success'\n                ? theme.palette.success.contrastText\n                : theme.palette.primary.light,\n    },\n    [`& .${NotificationClasses.multiLine}`]: {\n        whiteSpace: 'pre-wrap',\n    },\n}));\n\nexport interface NotificationProps extends Omit<SnackbarProps, 'open'> {\n    type?: string;\n    autoHideDuration?: number;\n    multiLine?: boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}