{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useCallback } from 'react';\nimport { useStore } from '../../store';\n/**\n * State-like hook for controlling the expanded state of a list item\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {string|integer} id The record identifier, e.g. 123\n * @param {boolean} single Forces only one id to be expanded at a time\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpanded('posts', 123);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\nexport var useExpanded = function (resource, id, single) {\n  if (single === void 0) {\n    single = false;\n  }\n  var _a = useStore(\"\".concat(resource, \".datagrid.expanded\"), []),\n    expandedIds = _a[0],\n    setExpandedIds = _a[1];\n  var expanded = Array.isArray(expandedIds) ?\n  // eslint-disable-next-line eqeqeq\n  expandedIds.map(function (el) {\n    return el == id;\n  }).indexOf(true) !== -1 : false;\n  var toggleExpanded = useCallback(function () {\n    setExpandedIds(function (ids) {\n      if (!Array.isArray(ids)) {\n        return [id];\n      }\n      var index = ids.findIndex(function (el) {\n        return el == id;\n      }); // eslint-disable-line eqeqeq\n      return index > -1 ? single ? [] : __spreadArray(__spreadArray([], ids.slice(0, index), true), ids.slice(index + 1), true) : single ? [id] : __spreadArray(__spreadArray([], ids, true), [id], false);\n    });\n  }, [setExpandedIds, id, single]);\n  return [expanded, toggleExpanded];\n};\n/**\n * State-like hook for controlling the expanded state of many list items\n * expanded state is true when at least one item from ids is expanded.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Identifier[]} ids A list of record identifiers\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpandAll('posts', [123, 124, 125]);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\nexport var useExpandAll = function (resource, ids) {\n  var _a = useStore(\"\".concat(resource, \".datagrid.expanded\"), []),\n    expandedIds = _a[0],\n    setExpandedIds = _a[1];\n  var isEexpanded = Array.isArray(expandedIds) ?\n  // eslint-disable-next-line eqeqeq\n  expandedIds.some(function (id) {\n    return ids.some(function (id2) {\n      return id2 == id;\n    });\n  }) : false;\n  var toggleExpandedAll = useCallback(function () {\n    var unaffectedExpandedIds = expandedIds.filter(\n    // eslint-disable-next-line eqeqeq\n    function (expanded_id) {\n      return !ids.some(function (id) {\n        return id == expanded_id;\n      });\n    });\n    setExpandedIds(isEexpanded ? unaffectedExpandedIds : unaffectedExpandedIds.concat(ids));\n  }, [expandedIds, setExpandedIds, isEexpanded, ids]);\n  return [isEexpanded, toggleExpandedAll];\n};","map":{"version":3,"names":["useCallback","useStore","useExpanded","resource","id","single","_a","concat","expandedIds","setExpandedIds","expanded","Array","isArray","map","el","indexOf","toggleExpanded","ids","index","findIndex","__spreadArray","slice","useExpandAll","isEexpanded","some","id2","toggleExpandedAll","unaffectedExpandedIds","filter","expanded_id"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/controller/list/useExpanded.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { useStore } from '../../store';\nimport { Identifier } from '../../types';\n\n/**\n * State-like hook for controlling the expanded state of a list item\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {string|integer} id The record identifier, e.g. 123\n * @param {boolean} single Forces only one id to be expanded at a time\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpanded('posts', 123);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\nexport const useExpanded = (\n    resource: string,\n    id: Identifier,\n    single: boolean = false\n): [boolean, () => void] => {\n    const [expandedIds, setExpandedIds] = useStore<Identifier[]>(\n        `${resource}.datagrid.expanded`,\n        []\n    );\n    const expanded = Array.isArray(expandedIds)\n        ? // eslint-disable-next-line eqeqeq\n          expandedIds.map(el => el == id).indexOf(true) !== -1\n        : false;\n\n    const toggleExpanded = useCallback(() => {\n        setExpandedIds(ids => {\n            if (!Array.isArray(ids)) {\n                return [id];\n            }\n            const index = ids.findIndex(el => el == id); // eslint-disable-line eqeqeq\n            return index > -1\n                ? single\n                    ? []\n                    : [...ids.slice(0, index), ...ids.slice(index + 1)]\n                : single\n                ? [id]\n                : [...ids, id];\n        });\n    }, [setExpandedIds, id, single]);\n\n    return [expanded, toggleExpanded];\n};\n\n/**\n * State-like hook for controlling the expanded state of many list items\n * expanded state is true when at least one item from ids is expanded.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Identifier[]} ids A list of record identifiers\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpandAll('posts', [123, 124, 125]);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\nexport const useExpandAll = (\n    resource: string,\n    ids: Identifier[]\n): [boolean, () => void] => {\n    const [expandedIds, setExpandedIds] = useStore<Identifier[]>(\n        `${resource}.datagrid.expanded`,\n        []\n    );\n\n    const isEexpanded = Array.isArray(expandedIds)\n        ? // eslint-disable-next-line eqeqeq\n          expandedIds.some(id => ids.some(id2 => id2 == id))\n        : false;\n\n    const toggleExpandedAll = useCallback(() => {\n        const unaffectedExpandedIds = expandedIds.filter(\n            // eslint-disable-next-line eqeqeq\n            expanded_id => !ids.some(id => id == expanded_id)\n        );\n        setExpandedIds(\n            isEexpanded\n                ? unaffectedExpandedIds\n                : unaffectedExpandedIds.concat(ids)\n        );\n    }, [expandedIds, setExpandedIds, isEexpanded, ids]);\n\n    return [isEexpanded, toggleExpandedAll];\n};\n"],"mappings":";;;;;;;;;AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,SAASC,QAAQ,QAAQ,aAAa;AAGtC;;;;;;;;;;;;;;AAcA,OAAO,IAAMC,WAAW,GAAG,SAAAA,CACvBC,QAAgB,EAChBC,EAAc,EACdC,MAAuB;EAAvB,IAAAA,MAAA;IAAAA,MAAA,QAAuB;EAAA;EAEjB,IAAAC,EAAA,GAAgCL,QAAQ,CAC1C,GAAAM,MAAA,CAAGJ,QAAQ,uBAAoB,EAC/B,EAAE,CACL;IAHMK,WAAW,GAAAF,EAAA;IAAEG,cAAc,GAAAH,EAAA,GAGjC;EACD,IAAMI,QAAQ,GAAGC,KAAK,CAACC,OAAO,CAACJ,WAAW,CAAC;EACrC;EACAA,WAAW,CAACK,GAAG,CAAC,UAAAC,EAAE;IAAI,OAAAA,EAAE,IAAIV,EAAE;EAAR,CAAQ,CAAC,CAACW,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GACpD,KAAK;EAEX,IAAMC,cAAc,GAAGhB,WAAW,CAAC;IAC/BS,cAAc,CAAC,UAAAQ,GAAG;MACd,IAAI,CAACN,KAAK,CAACC,OAAO,CAACK,GAAG,CAAC,EAAE;QACrB,OAAO,CAACb,EAAE,CAAC;;MAEf,IAAMc,KAAK,GAAGD,GAAG,CAACE,SAAS,CAAC,UAAAL,EAAE;QAAI,OAAAA,EAAE,IAAIV,EAAE;MAAR,CAAQ,CAAC,CAAC,CAAC;MAC7C,OAAOc,KAAK,GAAG,CAAC,CAAC,GACXb,MAAM,GACF,EAAE,GACHe,aAAA,CAAAA,aAAA,KAAKH,GAAG,CAACI,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,SAAKD,GAAG,CAACI,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC,OAAC,GACrDb,MAAM,GACN,CAACD,EAAE,CAAC,GACLgB,aAAA,CAAAA,aAAA,KAAKH,GAAG,UAAEb,EAAE,SAAC;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,CAACK,cAAc,EAAEL,EAAE,EAAEC,MAAM,CAAC,CAAC;EAEhC,OAAO,CAACK,QAAQ,EAAEM,cAAc,CAAC;AACrC,CAAC;AAED;;;;;;;;;;;;;;AAcA,OAAO,IAAMM,YAAY,GAAG,SAAAA,CACxBnB,QAAgB,EAChBc,GAAiB;EAEX,IAAAX,EAAA,GAAgCL,QAAQ,CAC1C,GAAAM,MAAA,CAAGJ,QAAQ,uBAAoB,EAC/B,EAAE,CACL;IAHMK,WAAW,GAAAF,EAAA;IAAEG,cAAc,GAAAH,EAAA,GAGjC;EAED,IAAMiB,WAAW,GAAGZ,KAAK,CAACC,OAAO,CAACJ,WAAW,CAAC;EACxC;EACAA,WAAW,CAACgB,IAAI,CAAC,UAAApB,EAAE;IAAI,OAAAa,GAAG,CAACO,IAAI,CAAC,UAAAC,GAAG;MAAI,OAAAA,GAAG,IAAIrB,EAAE;IAAT,CAAS,CAAC;EAA1B,CAA0B,CAAC,GAClD,KAAK;EAEX,IAAMsB,iBAAiB,GAAG1B,WAAW,CAAC;IAClC,IAAM2B,qBAAqB,GAAGnB,WAAW,CAACoB,MAAM;IAC5C;IACA,UAAAC,WAAW;MAAI,QAACZ,GAAG,CAACO,IAAI,CAAC,UAAApB,EAAE;QAAI,OAAAA,EAAE,IAAIyB,WAAW;MAAjB,CAAiB,CAAC;IAAlC,CAAkC,CACpD;IACDpB,cAAc,CACVc,WAAW,GACLI,qBAAqB,GACrBA,qBAAqB,CAACpB,MAAM,CAACU,GAAG,CAAC,CAC1C;EACL,CAAC,EAAE,CAACT,WAAW,EAAEC,cAAc,EAAEc,WAAW,EAAEN,GAAG,CAAC,CAAC;EAEnD,OAAO,CAACM,WAAW,EAAEG,iBAAiB,CAAC;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}