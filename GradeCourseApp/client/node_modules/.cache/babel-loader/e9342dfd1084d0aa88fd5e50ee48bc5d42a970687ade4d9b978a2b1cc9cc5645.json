{"ast":null,"code":"var _jsxFileName = \"/Users/imrun10/Documents/GitHub/GradeCourseApp/client/src/pages/signIn.js\",\n  _s = $RefreshSig$();\nimport react from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // import the useNavigate function from react-router-dom that will help us route to other pages and pass data as we do it\nimport './signin.css';\nimport PropTypes from 'prop-types';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SignIn(_ref) {\n  _s();\n  let {\n    setToken\n  } = _ref;\n  const navigate = useNavigate(); // intiales an instance of the useNavigate function and use this instance to route\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n\n  //Temporary arrays for testing user login information\n  const loginArr = [{\n    account_email: \"it@aubh.edu.bh\",\n    account_password: \"1a2b3c4d\",\n    account_type: 1\n  }, {\n    account_email: \"prof@aubh.edu.bh\",\n    account_password: \"1234\",\n    account_type: 2\n  }, {\n    account_email: \"lead@aubh.edu.bh\",\n    account_password: \"5678\",\n    account_type: 3\n  }, {\n    account_email: \"reg@aubh.edu.bh\",\n    account_password: \"abcd\",\n    account_type: 4\n  }];\n  let userType = -1;\n  const toApp = () => {\n    navigate('App'); // take us to the App page\n  };\n\n  //Pages for different types...\n  const toInstructorPage = () => toApp();\n  const toLeadPage = () => toApp();\n  const toAdminPage = () => toApp();\n  const toRegistrarPage = () => toApp();\n  const checkLoginInformation = () => {\n    //Get entered email and password\n    const enteredEmail = document.getElementsByTagName(\"input\")[0].value;\n    const enteredPassword = document.getElementsByTagName(\"input\")[1].value;\n    let found = false;\n    for (var i = 0; i < loginArr.length; i++) {\n      //Check if an account with the entered email address exists in database\n      if (loginArr[i].account_email === enteredEmail) {\n        //if the pasword is correct for this account, go to the next page\n        if (loginArr[i].account_password === enteredPassword) {\n          userType = loginArr[i].account_type;\n          switch (userType) {\n            case 1:\n              toAdminPage();\n              break;\n            //IT\n            case 2:\n              toInstructorPage();\n              break;\n            //Instructor\n            case 3:\n              toLeadPage();\n              break;\n            //Project Lead\n            case 4:\n              toRegistrarPage();\n              break;\n            //Registrar\n          }\n\n          found = true;\n        }\n      }\n    }\n    if (!found) {\n      alert(\"Incorrect email or password\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"body\", {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"colm-form\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"form-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Email address or phone number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                placeholder: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                class: \"btn-login\",\n                onClick: () => {\n                  checkLoginInformation();\n                },\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"#\",\n                children: \"Forgotten password?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(SignIn, \"wTX5bTkHjIEOBXymmbIk7S9dRtM=\", false, function () {\n  return [useNavigate];\n});\n_c = SignIn;\nexport default SignIn;\nvar _c;\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"names":["react","useNavigate","PropTypes","useState","jsxDEV","_jsxDEV","SignIn","_ref","_s","setToken","navigate","username","setUserName","password","setPassword","loginArr","account_email","account_password","account_type","userType","toApp","toInstructorPage","toLeadPage","toAdminPage","toRegistrarPage","checkLoginInformation","enteredEmail","document","getElementsByTagName","value","enteredPassword","found","i","length","alert","children","class","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","href","_c","$RefreshReg$"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/src/pages/signIn.js"],"sourcesContent":["import react from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // import the useNavigate function from react-router-dom that will help us route to other pages and pass data as we do it\nimport './signin.css'\nimport PropTypes from 'prop-types';\nimport { useState } from \"react\";\n\n\nfunction SignIn({ setToken }) {\n  const navigate = useNavigate(); // intiales an instance of the useNavigate function and use this instance to route\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n  \n  //Temporary arrays for testing user login information\n  const loginArr = [\n    {account_email:\"it@aubh.edu.bh\", account_password:\"1a2b3c4d\", account_type:1},\n    {account_email:\"prof@aubh.edu.bh\", account_password:\"1234\", account_type:2},\n    {account_email:\"lead@aubh.edu.bh\", account_password:\"5678\", account_type:3},\n    {account_email:\"reg@aubh.edu.bh\", account_password:\"abcd\", account_type:4}\n  ];\n\n  let userType = -1;\n\n  const toApp = () =>{  \n    navigate('App'); // take us to the App page\n  }\n\n  //Pages for different types...\n  const toInstructorPage = () => toApp();\n  const toLeadPage = () => toApp();\n  const toAdminPage = () => toApp();\n  const toRegistrarPage = () => toApp();\n\n  const checkLoginInformation=()=>{\n    //Get entered email and password\n    const enteredEmail = document.getElementsByTagName(\"input\")[0].value;\n    const enteredPassword = document.getElementsByTagName(\"input\")[1].value;\n    let found = false;\n    for (var i = 0; i < loginArr.length; i++) {\n      //Check if an account with the entered email address exists in database\n      if (loginArr[i].account_email === enteredEmail) {\n        //if the pasword is correct for this account, go to the next page\n        if (loginArr[i].account_password === enteredPassword) {\n          userType = loginArr[i].account_type;\n          switch (userType) {\n            case 1: toAdminPage(); break; //IT\n            case 2: toInstructorPage(); break; //Instructor\n            case 3: toLeadPage(); break; //Project Lead\n            case 4: toRegistrarPage(); break; //Registrar\n          }\n          found = true;}\n         \n        \n      }\n      \n      }\n      if (!found) {\n        alert(\"Incorrect email or password\");\n    }\n  };\n  \n  return(\n    <div>\n      <body>\n        <main>\n          <div class=\"row\">\n            <div class=\"colm-form\">\n              <div class=\"form-container\">\n                <input type=\"text\" placeholder=\"Email address or phone number\" />\n                  <input type=\"password\" placeholder=\"Password\" />\n                    <button class=\"btn-login\" onClick={() => {checkLoginInformation()}} >{/*when the user click on the login button it will call the toApp function*/} \n                      Login\n                    </button>\n                    <a href=\"#\">Forgotten password?</a>\n                  </div>\n              </div>\n            </div>\n        </main>\n\n      </body>\n    </div>\n  )}\n  \nexport default SignIn;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}