{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useResourceContext, usePreference, useStore, useTranslate } from 'ra-core';\nimport { Configurable } from '../../preferences';\nimport { Datagrid } from './Datagrid';\nimport { DatagridEditor } from './DatagridEditor';\n/**\n * A Datagrid that users can customize in configuration mode\n *\n * @example\n * import {\n *     List,\n *     DatagridConfigurable,\n *     TextField,\n * } from 'react-admin';\n *\n * export const PostList = () => (\n *     <List>\n *         <DatagridConfigurable>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"author\" />\n *             <TextField source=\"year\" />\n *         </DatagridConfigurable>\n *     </List>\n * );\n */\nexport var DatagridConfigurable = function (_a) {\n  var preferenceKey = _a.preferenceKey,\n    omit = _a.omit,\n    props = __rest(_a, [\"preferenceKey\", \"omit\"]);\n  if (props.optimized) {\n    throw new Error('DatagridConfigurable does not support the optimized prop');\n  }\n  var translate = useTranslate();\n  var resource = useResourceContext(props);\n  var finalPreferenceKey = preferenceKey || \"\".concat(resource, \".datagrid\");\n  var _b = useStore(\"preferences.\".concat(finalPreferenceKey, \".availableColumns\"), []),\n    availableColumns = _b[0],\n    setAvailableColumns = _b[1];\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var _c = useStore(\"preferences.\".concat(finalPreferenceKey, \".omit\"), omit),\n    _ = _c[0],\n    setOmit = _c[1];\n  React.useEffect(function () {\n    // first render, or the preference have been cleared\n    var columns = React.Children.map(props.children, function (child, index) {\n      return React.isValidElement(child) ? {\n        index: String(index),\n        source: child.props.source,\n        label: child.props.source || child.props.label ? child.props.label : translate('ra.configurable.Datagrid.unlabeled', {\n          column: index,\n          _: \"Unlabeled column #%{column}\"\n        })\n      } : null;\n    }).filter(function (column) {\n      return column != null;\n    });\n    if (columns.length !== availableColumns.length) {\n      setAvailableColumns(columns);\n      setOmit(omit);\n    }\n  }, [availableColumns]); // eslint-disable-line react-hooks/exhaustive-deps\n  return React.createElement(Configurable, {\n    editor: React.createElement(DatagridEditor, null),\n    preferenceKey: finalPreferenceKey,\n    sx: {\n      display: 'block',\n      minHeight: 2\n    }\n  }, React.createElement(DatagridWithPreferences, __assign({}, props)));\n};\nDatagridConfigurable.propTypes = Datagrid.propTypes;\n/**\n * This Datagrid filters its children depending on preferences\n */\nvar DatagridWithPreferences = function (_a) {\n  var children = _a.children,\n    props = __rest(_a, [\"children\"]);\n  var availableColumns = usePreference('availableColumns', [])[0];\n  var omit = usePreference('omit', [])[0];\n  var columns = usePreference('columns', availableColumns.filter(function (column) {\n    return !(omit === null || omit === void 0 ? void 0 : omit.includes(column.source));\n  }).map(function (column) {\n    return column.index;\n  }))[0];\n  var childrenArray = React.Children.toArray(children);\n  return React.createElement(Datagrid, __assign({}, props), columns === undefined ? children : columns.map(function (index) {\n    return childrenArray[index];\n  }));\n};","map":{"version":3,"names":["React","useResourceContext","usePreference","useStore","useTranslate","Configurable","Datagrid","DatagridEditor","DatagridConfigurable","_a","preferenceKey","omit","props","__rest","optimized","Error","translate","resource","finalPreferenceKey","concat","_b","availableColumns","setAvailableColumns","_c","_","setOmit","useEffect","columns","Children","map","children","child","index","isValidElement","String","source","label","column","filter","length","createElement","editor","sx","display","minHeight","DatagridWithPreferences","__assign","propTypes","includes","childrenArray","toArray","undefined"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/list/datagrid/DatagridConfigurable.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    useResourceContext,\n    usePreference,\n    useStore,\n    useTranslate,\n} from 'ra-core';\n\nimport { Configurable } from '../../preferences';\nimport { Datagrid, DatagridProps } from './Datagrid';\nimport { DatagridEditor } from './DatagridEditor';\n\n/**\n * A Datagrid that users can customize in configuration mode\n *\n * @example\n * import {\n *     List,\n *     DatagridConfigurable,\n *     TextField,\n * } from 'react-admin';\n *\n * export const PostList = () => (\n *     <List>\n *         <DatagridConfigurable>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"author\" />\n *             <TextField source=\"year\" />\n *         </DatagridConfigurable>\n *     </List>\n * );\n */\nexport const DatagridConfigurable = ({\n    preferenceKey,\n    omit,\n    ...props\n}: DatagridConfigurableProps) => {\n    if (props.optimized) {\n        throw new Error(\n            'DatagridConfigurable does not support the optimized prop'\n        );\n    }\n\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const finalPreferenceKey = preferenceKey || `${resource}.datagrid`;\n\n    const [availableColumns, setAvailableColumns] = useStore<\n        ConfigurableDatagridColumn[]\n    >(`preferences.${finalPreferenceKey}.availableColumns`, []);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, setOmit] = useStore<string[]>(\n        `preferences.${finalPreferenceKey}.omit`,\n        omit\n    );\n\n    React.useEffect(() => {\n        // first render, or the preference have been cleared\n        const columns = React.Children.map(props.children, (child, index) =>\n            React.isValidElement(child)\n                ? {\n                      index: String(index),\n                      source: child.props.source,\n                      label:\n                          child.props.source || child.props.label\n                              ? child.props.label\n                              : translate(\n                                    'ra.configurable.Datagrid.unlabeled',\n                                    {\n                                        column: index,\n                                        _: `Unlabeled column #%{column}`,\n                                    }\n                                ),\n                  }\n                : null\n        ).filter(column => column != null);\n        if (columns.length !== availableColumns.length) {\n            setAvailableColumns(columns);\n            setOmit(omit);\n        }\n    }, [availableColumns]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <Configurable\n            editor={<DatagridEditor />}\n            preferenceKey={finalPreferenceKey}\n            sx={{ display: 'block', minHeight: 2 }}\n        >\n            <DatagridWithPreferences {...props} />\n        </Configurable>\n    );\n};\n\nexport interface DatagridConfigurableProps extends DatagridProps {\n    /**\n     * Key to use to store the user's preferences for this datagrid.\n     *\n     * Set to '[resource].datagrid' by default. Pass a custom key if you need\n     * to display more than one ConfigurableDatagrid per resource.\n     */\n    preferenceKey?: string;\n    /**\n     * columns to hide by default\n     *\n     * @example\n     * // by default, hide the id and author columns\n     * // users can choose to show show them in configuration mode\n     * const PostList = () => (\n     *     <List>\n     *         <DatagridConfigurable omit={['id', 'author']}>\n     *             <TextField source=\"id\" />\n     *             <TextField source=\"title\" />\n     *             <TextField source=\"author\" />\n     *             <TextField source=\"year\" />\n     *         </DatagridConfigurable>\n     *     </List>\n     * );\n     */\n    omit?: string[];\n}\n\nexport interface ConfigurableDatagridColumn {\n    index: string;\n    source?: string;\n    label?: string;\n}\n\nDatagridConfigurable.propTypes = Datagrid.propTypes;\n\n/**\n * This Datagrid filters its children depending on preferences\n */\nconst DatagridWithPreferences = ({ children, ...props }: DatagridProps) => {\n    const [availableColumns] = usePreference('availableColumns', []);\n    const [omit] = usePreference('omit', []);\n    const [columns] = usePreference(\n        'columns',\n        availableColumns\n            .filter(column => !omit?.includes(column.source))\n            .map(column => column.index)\n    );\n    const childrenArray = React.Children.toArray(children);\n    return (\n        <Datagrid {...props}>\n            {columns === undefined\n                ? children\n                : columns.map(index => childrenArray[index])}\n        </Datagrid>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}