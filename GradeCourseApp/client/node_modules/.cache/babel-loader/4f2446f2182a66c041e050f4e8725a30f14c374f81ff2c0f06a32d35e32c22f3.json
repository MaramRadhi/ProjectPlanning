{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useWatch, useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to a child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm<FieldValues>>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer<FieldValues>>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nvar FormDataConsumer = function (props) {\n  var getValues = useFormContext().getValues;\n  var formData = useWatch();\n  //useWatch will initially return the provided defaultValues of the form.\n  //We must get the initial formData from getValues\n  if (Object.keys(formData).length === 0) {\n    formData = getValues();\n  }\n  return React.createElement(FormDataConsumerView, __assign({\n    formData: formData\n  }, props));\n};\nexport var FormDataConsumerView = function (props) {\n  var children = props.children,\n    form = props.form,\n    formData = props.formData,\n    source = props.source,\n    index = props.index,\n    rest = __rest(props, [\"children\", \"form\", \"formData\", \"source\", \"index\"]);\n  var ret;\n  // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n  if (typeof index !== 'undefined' && source) {\n    var scopedFormData = get(formData, source);\n    var getSource = function (scopedSource) {\n      return \"\".concat(source, \".\").concat(scopedSource);\n    };\n    ret = children(__assign({\n      formData: formData,\n      scopedFormData: scopedFormData,\n      getSource: getSource\n    }, rest));\n  } else {\n    ret = children(__assign({\n      formData: formData\n    }, rest));\n  }\n  return ret === undefined ? null : ret;\n};\nexport default FormDataConsumer;","map":{"version":3,"names":["React","useWatch","useFormContext","get","FormDataConsumer","props","getValues","formData","Object","keys","length","createElement","FormDataConsumerView","__assign","children","form","source","index","rest","__rest","ret","scopedFormData","getSource","scopedSource","concat","undefined"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/form/FormDataConsumer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { useWatch, useFormContext, FieldValues } from 'react-hook-form';\nimport get from 'lodash/get';\n\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to a child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm<FieldValues>>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer<FieldValues>>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nconst FormDataConsumer = <TFieldValues extends FieldValues = FieldValues>(\n    props: ConnectedProps<TFieldValues>\n) => {\n    const { getValues } = useFormContext<TFieldValues>();\n    let formData = (useWatch<TFieldValues>() as unknown) as TFieldValues;\n\n    //useWatch will initially return the provided defaultValues of the form.\n    //We must get the initial formData from getValues\n    if (Object.keys(formData).length === 0) {\n        formData = getValues();\n    }\n\n    return (\n        <FormDataConsumerView<TFieldValues> formData={formData} {...props} />\n    );\n};\n\nexport const FormDataConsumerView = <\n    TFieldValues extends FieldValues = FieldValues\n>(\n    props: Props<TFieldValues>\n) => {\n    const { children, form, formData, source, index, ...rest } = props;\n    let ret;\n\n    // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n    if (typeof index !== 'undefined' && source) {\n        const scopedFormData = get(formData, source);\n        const getSource = (scopedSource: string) => `${source}.${scopedSource}`;\n        ret = children({ formData, scopedFormData, getSource, ...rest });\n    } else {\n        ret = children({ formData, ...rest });\n    }\n\n    return ret === undefined ? null : ret;\n};\n\nexport default FormDataConsumer;\n\nexport interface FormDataConsumerRenderParams<\n    TFieldValues extends FieldValues = FieldValues\n> {\n    formData: TFieldValues;\n    scopedFormData?: any;\n    getSource?: (source: string) => string;\n}\n\nexport type FormDataConsumerRender<\n    TFieldValues extends FieldValues = FieldValues\n> = (params: FormDataConsumerRenderParams<TFieldValues>) => ReactNode;\n\ninterface ConnectedProps<TFieldValues extends FieldValues = FieldValues> {\n    children: FormDataConsumerRender<TFieldValues>;\n    form?: string;\n    record?: any;\n    source?: string;\n    [key: string]: any;\n}\n\ninterface Props<TFieldValues extends FieldValues> extends ConnectedProps {\n    formData: TFieldValues;\n    index?: number;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,QAAQ,EAAEC,cAAc,QAAqB,iBAAiB;AACvE,OAAOC,GAAG,MAAM,YAAY;AAE5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAMC,gBAAgB,GAAG,SAAAA,CACrBC,KAAmC;EAE3B,IAAAC,SAAS,GAAKJ,cAAc,EAAgB,CAAAI,SAAnC;EACjB,IAAIC,QAAQ,GAAIN,QAAQ,EAA4C;EAEpE;EACA;EACA,IAAIO,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;IACpCH,QAAQ,GAAGD,SAAS,EAAE;;EAG1B,OACIN,KAAA,CAAAW,aAAA,CAACC,oBAAoB,EAAAC,QAAA;IAAeN,QAAQ,EAAEA;EAAQ,GAAMF,KAAK,EAAI;AAE7E,CAAC;AAED,OAAO,IAAMO,oBAAoB,GAAG,SAAAA,CAGhCP,KAA0B;EAElB,IAAAS,QAAQ,GAA6CT,KAAK,CAAAS,QAAlD;IAAEC,IAAI,GAAuCV,KAAK,CAAAU,IAA5C;IAAER,QAAQ,GAA6BF,KAAK,CAAAE,QAAlC;IAAES,MAAM,GAAqBX,KAAK,CAAAW,MAA1B;IAAEC,KAAK,GAAcZ,KAAK,CAAAY,KAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKd,KAAK,EAA5D,mDAAoD,CAAF;EACxD,IAAIe,GAAG;EAEP;EACA,IAAI,OAAOH,KAAK,KAAK,WAAW,IAAID,MAAM,EAAE;IACxC,IAAMK,cAAc,GAAGlB,GAAG,CAACI,QAAQ,EAAES,MAAM,CAAC;IAC5C,IAAMM,SAAS,GAAG,SAAAA,CAACC,YAAoB;MAAK,UAAAC,MAAA,CAAGR,MAAM,OAAAQ,MAAA,CAAID,YAAY,CAAE;IAA3B,CAA2B;IACvEH,GAAG,GAAGN,QAAQ,CAAAD,QAAA;MAAGN,QAAQ,EAAAA,QAAA;MAAEc,cAAc,EAAAA,cAAA;MAAEC,SAAS,EAAAA;IAAA,GAAKJ,IAAI,EAAG;GACnE,MAAM;IACHE,GAAG,GAAGN,QAAQ,CAAAD,QAAA;MAAGN,QAAQ,EAAAA;IAAA,GAAKW,IAAI,EAAG;;EAGzC,OAAOE,GAAG,KAAKK,SAAS,GAAG,IAAI,GAAGL,GAAG;AACzC,CAAC;AAED,eAAehB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}