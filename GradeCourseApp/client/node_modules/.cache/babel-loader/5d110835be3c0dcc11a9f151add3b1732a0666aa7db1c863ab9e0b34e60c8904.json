{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useReferenceManyFieldController, ListContextProvider, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport var ReferenceManyField = function (props) {\n  var children = props.children,\n    filter = props.filter,\n    _a = props.page,\n    page = _a === void 0 ? 1 : _a,\n    _b = props.pagination,\n    pagination = _b === void 0 ? null : _b,\n    perPage = props.perPage,\n    reference = props.reference,\n    resource = props.resource,\n    sort = props.sort,\n    source = props.source,\n    target = props.target;\n  var record = useRecordContext(props);\n  var controllerProps = useReferenceManyFieldController({\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source,\n    target: target\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, children, pagination));\n};\nReferenceManyField.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  label: fieldPropTypes.label,\n  perPage: PropTypes.number,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  target: PropTypes.string.isRequired\n};\nReferenceManyField.defaultProps = {\n  filter: {},\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  source: 'id'\n};\n// FIXME kept for backwards compatibility, unused, to be removed in v5\nexport var ReferenceManyFieldView = function (props) {\n  var children = props.children,\n    pagination = props.pagination;\n  if (process.env.NODE_ENV !== 'production') {\n    console.error('<ReferenceManyFieldView> is deprecated, use <ReferenceManyField> directly');\n  }\n  return React.createElement(React.Fragment, null, children, pagination && props.total !== undefined ? pagination : null);\n};\nReferenceManyFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  sort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  isLoading: PropTypes.bool,\n  pagination: PropTypes.element,\n  reference: PropTypes.string,\n  setSort: PropTypes.func\n};","map":{"version":3,"names":["React","PropTypes","useReferenceManyFieldController","ListContextProvider","ResourceContextProvider","useRecordContext","fieldPropTypes","ReferenceManyField","props","children","filter","_a","page","_b","pagination","perPage","reference","resource","sort","source","target","record","controllerProps","createElement","value","propTypes","node","isRequired","className","string","object","label","number","any","sortBy","sortByOrder","exact","field","order","defaultProps","ReferenceManyFieldView","process","env","NODE_ENV","console","error","Fragment","total","undefined","element","data","isLoading","bool","setSort","func"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/field/ReferenceManyField.tsx"],"sourcesContent":["import React, { FC, ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    FilterPayload,\n    SortPayload,\n    useReferenceManyFieldController,\n    ListContextProvider,\n    ListControllerResult,\n    ResourceContextProvider,\n    useRecordContext,\n} from 'ra-core';\n\nimport { PublicFieldProps, fieldPropTypes, InjectedFieldProps } from './types';\n\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the displayed values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport const ReferenceManyField = (props: ReferenceManyFieldProps) => {\n    const {\n        children,\n        filter,\n        page = 1,\n        pagination = null,\n        perPage,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n    } = props;\n    const record = useRecordContext(props);\n\n    const controllerProps = useReferenceManyFieldController({\n        filter,\n        page,\n        perPage,\n        record,\n        reference,\n        resource,\n        sort,\n        source,\n        target,\n    });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <ListContextProvider value={controllerProps}>\n                {children}\n                {pagination}\n            </ListContextProvider>\n        </ResourceContextProvider>\n    );\n};\n\nexport interface ReferenceManyFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps {\n    children: ReactNode;\n    filter?: FilterPayload;\n    page?: number;\n    pagination?: ReactElement;\n    perPage?: number;\n    reference: string;\n    sort?: SortPayload;\n    target: string;\n}\n\nReferenceManyField.propTypes = {\n    children: PropTypes.node.isRequired,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    label: fieldPropTypes.label,\n    perPage: PropTypes.number,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    target: PropTypes.string.isRequired,\n};\n\nReferenceManyField.defaultProps = {\n    filter: {},\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    source: 'id',\n};\n\n// FIXME kept for backwards compatibility, unused, to be removed in v5\nexport const ReferenceManyFieldView: FC<ReferenceManyFieldViewProps> = props => {\n    const { children, pagination } = props;\n    if (process.env.NODE_ENV !== 'production') {\n        console.error(\n            '<ReferenceManyFieldView> is deprecated, use <ReferenceManyField> directly'\n        );\n    }\n    return (\n        <>\n            {children}\n            {pagination && props.total !== undefined ? pagination : null}\n        </>\n    );\n};\n\nexport interface ReferenceManyFieldViewProps\n    extends Omit<\n            ReferenceManyFieldProps,\n            'resource' | 'page' | 'perPage' | 'sort'\n        >,\n        ListControllerResult {\n    children: ReactElement;\n}\n\nReferenceManyFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    sort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.any,\n    isLoading: PropTypes.bool,\n    pagination: PropTypes.element,\n    reference: PropTypes.string,\n    setSort: PropTypes.func,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}