{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { useResourceContext, useGetList, useTimeout, useCreatePath } from 'ra-core';\nimport { Typography, CircularProgress } from '@mui/material';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { Link } from '../Link';\n/**\n * Fetch and render the number of records of a given resource\n *\n * Relies on dataProvider.getList() returning a total property\n *\n * @example // Display the number of recorfds in the current resource (based on RezsourceContext)\n * <Count />\n *\n * @example // Display the number of posts\n * <Count resource=\"posts\" />\n *\n * @example // Display the number of published posts\n * <Count resource=\"posts\" filter={{ is_published: true }}/>\n *\n * @example // Display the number of posts, with a custom Typography variant\n * <Count resource=\"posts\" variant=\"h1\" />\n *\n * @see ReferenceManyCount for a similar component which fetches the number of records related to the current one\n */\nexport var Count = function (props) {\n  var filter = props.filter,\n    sort = props.sort,\n    link = props.link,\n    resourceFromProps = props.resource,\n    _a = props.timeout,\n    timeout = _a === void 0 ? 1000 : _a,\n    rest = __rest(props, [\"filter\", \"sort\", \"link\", \"resource\", \"timeout\"]);\n  var resource = useResourceContext(props);\n  var oneSecondHasPassed = useTimeout(timeout);\n  var createPath = useCreatePath();\n  var _b = useGetList(resource, {\n      filter: filter,\n      sort: sort,\n      pagination: {\n        perPage: 1,\n        page: 1\n      }\n    }),\n    total = _b.total,\n    isLoading = _b.isLoading,\n    error = _b.error;\n  var body = isLoading ? oneSecondHasPassed ? React.createElement(CircularProgress, {\n    size: 14\n  }) : '' : error ? React.createElement(ErrorIcon, {\n    color: \"error\",\n    fontSize: \"small\",\n    titleAccess: \"error\"\n  }) : total;\n  return link ?\n  // @ts-ignore TypeScript complains that the props for <a> aren't the same as for <span>\n  React.createElement(Link, __assign({\n    to: {\n      pathname: createPath({\n        resource: resource,\n        type: 'list'\n      }),\n      search: filter ? \"filter=\".concat(JSON.stringify(filter)) : undefined\n    },\n    variant: \"body2\",\n    onClick: function (e) {\n      return e.stopPropagation();\n    }\n  }, rest), body) : React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\"\n  }, rest), body);\n};","map":{"version":3,"names":["React","useResourceContext","useGetList","useTimeout","useCreatePath","Typography","CircularProgress","ErrorIcon","Link","Count","props","filter","sort","link","resourceFromProps","resource","_a","timeout","rest","__rest","oneSecondHasPassed","createPath","_b","pagination","perPage","page","total","isLoading","error","body","createElement","size","color","fontSize","titleAccess","__assign","to","pathname","type","search","concat","JSON","stringify","undefined","variant","onClick","e","stopPropagation","component"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/list/Count.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    useResourceContext,\n    useGetList,\n    useTimeout,\n    useCreatePath,\n    SortPayload,\n} from 'ra-core';\nimport { Typography, TypographyProps, CircularProgress } from '@mui/material';\nimport ErrorIcon from '@mui/icons-material/Error';\n\nimport { Link } from '../Link';\n\n/**\n * Fetch and render the number of records of a given resource\n *\n * Relies on dataProvider.getList() returning a total property\n *\n * @example // Display the number of recorfds in the current resource (based on RezsourceContext)\n * <Count />\n *\n * @example // Display the number of posts\n * <Count resource=\"posts\" />\n *\n * @example // Display the number of published posts\n * <Count resource=\"posts\" filter={{ is_published: true }}/>\n *\n * @example // Display the number of posts, with a custom Typography variant\n * <Count resource=\"posts\" variant=\"h1\" />\n *\n * @see ReferenceManyCount for a similar component which fetches the number of records related to the current one\n */\nexport const Count = (props: CountProps) => {\n    const {\n        filter,\n        sort,\n        link,\n        resource: resourceFromProps,\n        timeout = 1000,\n        ...rest\n    } = props;\n    const resource = useResourceContext(props);\n    const oneSecondHasPassed = useTimeout(timeout);\n    const createPath = useCreatePath();\n\n    const { total, isLoading, error } = useGetList(resource, {\n        filter,\n        sort,\n        pagination: { perPage: 1, page: 1 },\n    });\n\n    const body = isLoading ? (\n        oneSecondHasPassed ? (\n            <CircularProgress size={14} />\n        ) : (\n            ''\n        )\n    ) : error ? (\n        <ErrorIcon color=\"error\" fontSize=\"small\" titleAccess=\"error\" />\n    ) : (\n        total\n    );\n\n    return link ? (\n        // @ts-ignore TypeScript complains that the props for <a> aren't the same as for <span>\n        <Link\n            to={{\n                pathname: createPath({ resource, type: 'list' }),\n                search: filter ? `filter=${JSON.stringify(filter)}` : undefined,\n            }}\n            variant=\"body2\"\n            onClick={e => e.stopPropagation()}\n            {...rest}\n        >\n            {body}\n        </Link>\n    ) : (\n        <Typography component=\"span\" variant=\"body2\" {...rest}>\n            {body}\n        </Typography>\n    );\n};\n\nexport interface CountProps extends TypographyProps {\n    filter?: any;\n    sort?: SortPayload;\n    link?: Boolean;\n    resource?: string;\n    timeout?: number;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACIC,kBAAkB,EAClBC,UAAU,EACVC,UAAU,EACVC,aAAa,QAEV,SAAS;AAChB,SAASC,UAAU,EAAmBC,gBAAgB,QAAQ,eAAe;AAC7E,OAAOC,SAAS,MAAM,2BAA2B;AAEjD,SAASC,IAAI,QAAQ,SAAS;AAE9B;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,KAAK,GAAG,SAAAA,CAACC,KAAiB;EAE/B,IAAAC,MAAM,GAMND,KAAK,CAAAC,MANC;IACNC,IAAI,GAKJF,KAAK,CAAAE,IALD;IACJC,IAAI,GAIJH,KAAK,CAAAG,IAJD;IACMC,iBAAiB,GAG3BJ,KAAK,CAAAK,QAHsB;IAC3BC,EAAA,GAEAN,KAAK,CAAAO,OAFS;IAAdA,OAAO,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACXE,IAAI,GAAAC,MAAA,CACPT,KAAK,EAPH,iDAOL,CADU;EAEX,IAAMK,QAAQ,GAAGd,kBAAkB,CAACS,KAAK,CAAC;EAC1C,IAAMU,kBAAkB,GAAGjB,UAAU,CAACc,OAAO,CAAC;EAC9C,IAAMI,UAAU,GAAGjB,aAAa,EAAE;EAE5B,IAAAkB,EAAA,GAA8BpB,UAAU,CAACa,QAAQ,EAAE;MACrDJ,MAAM,EAAAA,MAAA;MACNC,IAAI,EAAAA,IAAA;MACJW,UAAU,EAAE;QAAEC,OAAO,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAC;KACpC,CAAC;IAJMC,KAAK,GAAAJ,EAAA,CAAAI,KAAA;IAAEC,SAAS,GAAAL,EAAA,CAAAK,SAAA;IAAEC,KAAK,GAAAN,EAAA,CAAAM,KAI7B;EAEF,IAAMC,IAAI,GAAGF,SAAS,GAClBP,kBAAkB,GACdpB,KAAA,CAAA8B,aAAA,CAACxB,gBAAgB;IAACyB,IAAI,EAAE;EAAE,EAAI,GAE9B,EACH,GACDH,KAAK,GACL5B,KAAA,CAAA8B,aAAA,CAACvB,SAAS;IAACyB,KAAK,EAAC,OAAO;IAACC,QAAQ,EAAC,OAAO;IAACC,WAAW,EAAC;EAAO,EAAG,GAEhER,KACH;EAED,OAAOb,IAAI;EACP;EACAb,KAAA,CAAA8B,aAAA,CAACtB,IAAI,EAAA2B,QAAA;IACDC,EAAE,EAAE;MACAC,QAAQ,EAAEhB,UAAU,CAAC;QAAEN,QAAQ,EAAAA,QAAA;QAAEuB,IAAI,EAAE;MAAM,CAAE,CAAC;MAChDC,MAAM,EAAE5B,MAAM,GAAG,UAAA6B,MAAA,CAAUC,IAAI,CAACC,SAAS,CAAC/B,MAAM,CAAC,CAAE,GAAGgC;KACzD;IACDC,OAAO,EAAC,OAAO;IACfC,OAAO,EAAE,SAAAA,CAAAC,CAAC;MAAI,OAAAA,CAAC,CAACC,eAAe,EAAE;IAAnB;EAAmB,GAC7B7B,IAAI,GAEPW,IAAI,CACF,GAEP7B,KAAA,CAAA8B,aAAA,CAACzB,UAAU,EAAA8B,QAAA;IAACa,SAAS,EAAC,MAAM;IAACJ,OAAO,EAAC;EAAO,GAAK1B,IAAI,GAChDW,IAAI,CAEZ;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}