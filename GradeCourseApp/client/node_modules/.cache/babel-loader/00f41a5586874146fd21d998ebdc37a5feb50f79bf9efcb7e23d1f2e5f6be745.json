{"ast":null,"code":"import { __assign } from '../_virtual/_tslib.js';\nimport * as React from 'react';\nimport { AuthContextConsumer } from '../AuthContext.js';\nimport { doSignIn } from '../utils/reducers.js';\nimport { AuthKitError } from '../errors.js';\n\n/**\n * @public\n * @function\n * @name withSignIn\n * @description Inject sign in functionality inside the Component's Prop\n * @param Component\n */\nfunction withSignIn(Component) {\n  return function (props) {\n    return React.createElement(AuthContextConsumer, null, function (c) {\n      if (c === null) {\n        throw new AuthKitError('Auth Provider is missing. ' + 'Please add the AuthProvider before Router');\n      }\n      var signIn = function (signInConfig) {\n        var token = signInConfig.token,\n          tokenType = signInConfig.tokenType,\n          authState = signInConfig.authState,\n          expiresIn = signInConfig.expiresIn,\n          refreshToken = signInConfig.refreshToken,\n          refreshTokenExpireIn = signInConfig.refreshTokenExpireIn;\n        var expTime = new Date(new Date().getTime() + expiresIn * 60 * 1000);\n        if (c.authState.isUsingRefreshToken) {\n          // Using the power of refresh token\n          if (!!refreshToken && !!refreshTokenExpireIn) {\n            // refresh token params are provided\n            // sign in with refresh token\n            var refreshTokenExpireAt = new Date(new Date().getTime() + refreshTokenExpireIn * 60 * 1000);\n            c.dispatch(doSignIn({\n              auth: {\n                token: token,\n                type: tokenType,\n                expiresAt: expTime\n              },\n              userState: authState ? authState : null,\n              refresh: {\n                token: refreshToken,\n                expiresAt: refreshTokenExpireAt\n              }\n            }));\n            return true;\n          } else {\n            // refresh token params are not provided\n            // throw an error\n            throw new AuthKitError('Make sure you given \"refreshToken\"' + ' and \"refreshTokenExpireIn\" parameter');\n          }\n        } else {\n          // Not using refresh token\n          if (!!refreshToken && !!refreshTokenExpireIn) {\n            // params are not expected but provided\n            // throw an error\n            throw new AuthKitError('The app doesn\\'t implement ' + '\\'refreshToken\\' feature.\\n So you have to' + ' implement refresh token feature' + ' from \\'AuthProvider\\' before using it.');\n          } else {\n            // sign in without the refresh token\n            c.dispatch(doSignIn({\n              auth: {\n                token: token,\n                type: tokenType,\n                expiresAt: expTime\n              },\n              userState: authState ? authState : null,\n              refresh: null\n            }));\n            return true;\n          }\n        }\n      };\n      return React.createElement(Component, __assign({}, props, {\n        signIn: signIn\n      }));\n    });\n  };\n}\nexport { withSignIn as default };","map":{"version":3,"names":["withSignIn","Component","props","React","createElement","AuthContextConsumer","c","AuthKitError","signIn","signInConfig","token","tokenType","authState","expiresIn","refreshToken","refreshTokenExpireIn","expTime","Date","getTime","isUsingRefreshToken","refreshTokenExpireAt","dispatch","doSignIn","auth","type","expiresAt","userState","refresh","__assign"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/react-auth-kit/src/higherOrderComponents/withSignIn.tsx"],"sourcesContent":["/**\n * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>\n * @fileoverview Sign In functionality <Higher Order Component>\n * @copyright Arkadip Bhattacharya 2020\n *\n * Copyright 2020 Arkadip Bhattacharya\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as React from 'react';\nimport {AuthContextConsumer} from '../AuthContext';\nimport {signInFunctionParams} from '../types';\nimport {doSignIn} from '../utils/reducers';\nimport {AuthKitError} from '../errors';\n\n/**\n * @interface withSignInProps\n */\ninterface withSignInProps {\n    signIn(params: signInFunctionParams): boolean\n}\n\n/**\n * @public\n * @function\n * @name withSignIn\n * @description Inject sign in functionality inside the Component's Prop\n * @param Component\n */\nfunction withSignIn<P extends withSignInProps>(\n    Component: React.ComponentType<P>,\n):React.FunctionComponent<P> {\n  return (props) => {\n    return (\n      <AuthContextConsumer>\n        {(c) => {\n          if (c === null) {\n            throw new\n            AuthKitError('Auth Provider is missing. ' +\n              'Please add the AuthProvider before Router');\n          }\n          const signIn = (signInConfig: signInFunctionParams)\n            : boolean => {\n            const {\n              token,\n              tokenType,\n              authState,\n              expiresIn,\n              refreshToken,\n              refreshTokenExpireIn,\n            } = signInConfig;\n            const expTime =\n              new Date(new Date().getTime() + expiresIn * 60 * 1000);\n            if (c.authState.isUsingRefreshToken) {\n              // Using the power of refresh token\n              if (!!refreshToken && !!refreshTokenExpireIn) {\n                // refresh token params are provided\n                // sign in with refresh token\n                const refreshTokenExpireAt = new Date(new Date().getTime() +\n                  refreshTokenExpireIn * 60 * 1000);\n                c.dispatch(doSignIn({\n                  auth: {\n                    token: token,\n                    type: tokenType,\n                    expiresAt: expTime,\n                  },\n                  userState: authState ? authState : null,\n                  refresh: {\n                    token: refreshToken,\n                    expiresAt: refreshTokenExpireAt,\n                  },\n                }));\n                return true;\n              } else {\n                // refresh token params are not provided\n                // throw an error\n                throw new AuthKitError('Make sure you given \"refreshToken\"'+\n                ' and \"refreshTokenExpireIn\" parameter');\n              }\n            } else {\n              // Not using refresh token\n              if (!!refreshToken && !!refreshTokenExpireIn) {\n                // params are not expected but provided\n                // throw an error\n                throw new AuthKitError('The app doesn\\'t implement ' +\n                  '\\'refreshToken\\' feature.\\n So you have to'+\n                  ' implement refresh token feature' +\n                  ' from \\'AuthProvider\\' before using it.');\n              } else {\n                // sign in without the refresh token\n                c.dispatch(doSignIn({\n                  auth: {\n                    token: token,\n                    type: tokenType,\n                    expiresAt: expTime,\n                  },\n                  userState: authState ? authState : null,\n                  refresh: null,\n                }));\n                return true;\n              }\n            }\n          };\n          return <Component {...props} signIn={signIn}/>;\n        }}\n      </AuthContextConsumer>\n    );\n  };\n}\n\nexport default withSignIn;\n"],"mappings":";;;;;;AAgCA;;;;;;AAMG;AACH,SAASA,UAAUA,CACfC,SAAiC;EAEnC,OAAO,UAACC,KAAK;IACX,OACEC,KAAA,CAAAC,aAAA,CAACC,mBAAmB,QACjB,UAACC,CAAC;MACD,IAAIA,CAAC,KAAK,IAAI,EAAE;QACd,MAAM,IACNC,YAAY,CAAC,4BAA4B,GACvC,2CAA2C,CAAC;MAC/C;MACD,IAAMC,MAAM,GAAG,SAAAA,CAACC,YAAkC;QAG9C,IAAAC,KAAK,GAMHD,YAAY,CAAAC,KANT;UACLC,SAAS,GAKPF,YAAY,CALLE,SAAA;UACTC,SAAS,GAIPH,YAAY,CAAAG,SAJL;UACTC,SAAS,GAGPJ,YAAY,CAHLI,SAAA;UACTC,YAAY,GAEVL,YAAY,CAAAK,YAFF;UACZC,oBAAoB,GAClBN,YAAY,CAAAM,oBADM;QAEtB,IAAMC,OAAO,GACX,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGL,SAAS,GAAG,EAAE,GAAG,IAAI,CAAC;QACxD,IAAIP,CAAC,CAACM,SAAS,CAACO,mBAAmB,EAAE;;UAEnC,IAAI,CAAC,CAACL,YAAY,IAAI,CAAC,CAACC,oBAAoB,EAAE;;;YAG5C,IAAMK,oBAAoB,GAAG,IAAIH,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GACxDH,oBAAoB,GAAG,EAAE,GAAG,IAAI,CAAC;YACnCT,CAAC,CAACe,QAAQ,CAACC,QAAQ,CAAC;cAClBC,IAAI,EAAE;gBACJb,KAAK,EAAEA,KAAK;gBACZc,IAAI,EAAEb,SAAS;gBACfc,SAAS,EAAET;cACZ;cACDU,SAAS,EAAEd,SAAS,GAAGA,SAAS,GAAG,IAAI;cACvCe,OAAO,EAAE;gBACPjB,KAAK,EAAEI,YAAY;gBACnBW,SAAS,EAAEL;cACZ;YACF,EAAC,CAAC;YACH,OAAO,IAAI;UACZ,OAAM;;;YAGL,MAAM,IAAIb,YAAY,CAAC,oCAAoC,GAC3D,uCAAuC,CAAC;UACzC;QACF,OAAM;;UAEL,IAAI,CAAC,CAACO,YAAY,IAAI,CAAC,CAACC,oBAAoB,EAAE;;;YAG5C,MAAM,IAAIR,YAAY,CAAC,6BAA6B,GAClD,4CAA4C,GAC5C,kCAAkC,GAClC,yCAAyC,CAAC;UAC7C,OAAM;;YAELD,CAAC,CAACe,QAAQ,CAACC,QAAQ,CAAC;cAClBC,IAAI,EAAE;gBACJb,KAAK,EAAEA,KAAK;gBACZc,IAAI,EAAEb,SAAS;gBACfc,SAAS,EAAET;cACZ;cACDU,SAAS,EAAEd,SAAS,GAAGA,SAAS,GAAG,IAAI;cACvCe,OAAO,EAAE;YACV,EAAC,CAAC;YACH,OAAO,IAAI;UACZ;QACF;MACH,CAAC;MACD,OAAOxB,KAAA,CAAAC,aAAA,CAACH,SAAS,EAAK2B,QAAA,KAAA1B,KAAK;QAAEM,MAAM,EAAEA;MAAM,GAAG;KAC/C,CACmB;EAE1B,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}