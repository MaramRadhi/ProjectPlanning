{"ast":null,"code":"import * as React from 'react';\nimport { RecordContextProvider } from '../record';\nimport { SaveContextProvider, usePickSaveContext } from '../saveContext';\nimport { EditContext } from './EditContext';\n/**\n * Create an Edit Context.\n *\n * @example\n *\n * const MyEdit = (props) => {\n *     const controllerProps = useEditController(props);\n *     return (\n *         <EditContextProvider value={controllerProps}>\n *             <MyEditView>\n *         </EditContextProvider>\n *     );\n * };\n *\n * const MyEditView = () => {\n *     const record = useRecordContext();\n *     // or, to rerender only when the save operation change but not data\n *     const { saving } = useEditContext();\n * }\n *\n * @see EditContext\n * @see RecordContext\n */\nexport var EditContextProvider = function (_a) {\n  var children = _a.children,\n    value = _a.value;\n  return React.createElement(EditContext.Provider, {\n    value: value\n  }, React.createElement(SaveContextProvider, {\n    value: usePickSaveContext(value)\n  }, React.createElement(RecordContextProvider, {\n    value: value && value.record\n  }, children)));\n};","map":{"version":3,"names":["React","RecordContextProvider","SaveContextProvider","usePickSaveContext","EditContext","EditContextProvider","_a","children","value","createElement","Provider","record"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/controller/edit/EditContextProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { RaRecord } from '../../types';\nimport { RecordContextProvider } from '../record';\nimport { SaveContextProvider, usePickSaveContext } from '../saveContext';\nimport { EditContext } from './EditContext';\nimport { EditControllerResult } from './useEditController';\n\n/**\n * Create an Edit Context.\n *\n * @example\n *\n * const MyEdit = (props) => {\n *     const controllerProps = useEditController(props);\n *     return (\n *         <EditContextProvider value={controllerProps}>\n *             <MyEditView>\n *         </EditContextProvider>\n *     );\n * };\n *\n * const MyEditView = () => {\n *     const record = useRecordContext();\n *     // or, to rerender only when the save operation change but not data\n *     const { saving } = useEditContext();\n * }\n *\n * @see EditContext\n * @see RecordContext\n */\nexport const EditContextProvider = ({\n    children,\n    value,\n}: {\n    children: ReactNode;\n    value: EditControllerResult;\n}) => (\n    <EditContext.Provider value={value}>\n        <SaveContextProvider value={usePickSaveContext(value)}>\n            <RecordContextProvider<Partial<RaRecord>>\n                value={value && value.record}\n            >\n                {children}\n            </RecordContextProvider>\n        </SaveContextProvider>\n    </EditContext.Provider>\n);\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,SAASC,qBAAqB,QAAQ,WAAW;AACjD,SAASC,mBAAmB,EAAEC,kBAAkB,QAAQ,gBAAgB;AACxE,SAASC,WAAW,QAAQ,eAAe;AAG3C;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CAACC,EAMnC;MALGC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,KAAK,GAAAF,EAAA,CAAAE,KAAA;EAIH,OACFR,KAAA,CAAAS,aAAA,CAACL,WAAW,CAACM,QAAQ;IAACF,KAAK,EAAEA;EAAK,GAC9BR,KAAA,CAAAS,aAAA,CAACP,mBAAmB;IAACM,KAAK,EAAEL,kBAAkB,CAACK,KAAK;EAAC,GACjDR,KAAA,CAAAS,aAAA,CAACR,qBAAqB;IAClBO,KAAK,EAAEA,KAAK,IAAIA,KAAK,CAACG;EAAM,GAE3BJ,QAAQ,CACW,CACN,CACH;AATrB,CAUL"},"metadata":{},"sourceType":"module","externalDependencies":[]}