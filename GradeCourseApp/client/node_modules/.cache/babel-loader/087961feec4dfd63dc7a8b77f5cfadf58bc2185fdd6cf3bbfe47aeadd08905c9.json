{"ast":null,"code":"import * as React from 'react';\nimport { useState } from 'react';\nimport { useLocaleState, useLocales } from 'ra-core';\nimport { Box, Button, Menu, MenuItem, styled } from '@mui/material';\nimport LanguageIcon from '@mui/icons-material/Translate';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n/**\n * Language selector. Changes the locale in the app and persists it in\n * preferences so that the app opens with the right locale in the future.\n *\n * Uses i18nProvider.getLocales() to get the list of available locales.\n *\n * @example\n * import { AppBar, TitlePortal, LocalesMenuButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar>\n *         <TitlePortal />\n *         <LocalesMenuButton />\n *     </AppBar>\n * );\n */\nexport var LocalesMenuButton = function (props) {\n  var _a = useState(null),\n    anchorEl = _a[0],\n    setAnchorEl = _a[1];\n  var languages = useLocales({\n    locales: props.languages\n  });\n  var _b = useLocaleState(),\n    locale = _b[0],\n    setLocale = _b[1];\n  var getNameForLocale = function (locale) {\n    var language = languages.find(function (language) {\n      return language.locale === locale;\n    });\n    return language ? language.name : '';\n  };\n  var changeLocale = function (locale) {\n    return function () {\n      setLocale(locale);\n      setAnchorEl(null);\n    };\n  };\n  var handleLanguageClick = function (event) {\n    setAnchorEl(event.currentTarget);\n  };\n  var handleClose = function () {\n    setAnchorEl(null);\n  };\n  return React.createElement(Root, {\n    component: \"span\"\n  }, React.createElement(Button, {\n    color: \"inherit\",\n    \"aria-controls\": \"simple-menu\",\n    \"aria-label\": \"\",\n    \"aria-haspopup\": \"true\",\n    onClick: handleLanguageClick,\n    startIcon: React.createElement(LanguageIcon, null),\n    endIcon: React.createElement(ExpandMoreIcon, {\n      fontSize: \"small\"\n    })\n  }, getNameForLocale(locale)), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, languages.map(function (language) {\n    return React.createElement(MenuItem, {\n      key: language.locale,\n      onClick: changeLocale(language.locale),\n      selected: language.locale === locale\n    }, language.name);\n  })));\n};\nvar PREFIX = 'RaLocalesMenuButton';\nexport var LocalesMenuButtonClasses = {};\nvar Root = styled(Box, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({});","map":{"version":3,"names":["React","useState","useLocaleState","useLocales","Box","Button","Menu","MenuItem","styled","LanguageIcon","ExpandMoreIcon","LocalesMenuButton","props","_a","anchorEl","setAnchorEl","languages","locales","_b","locale","setLocale","getNameForLocale","language","find","name","changeLocale","handleLanguageClick","event","currentTarget","handleClose","createElement","Root","component","color","onClick","startIcon","endIcon","fontSize","id","keepMounted","open","Boolean","onClose","map","key","selected","PREFIX","LocalesMenuButtonClasses","overridesResolver","styles","root"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/button/LocalesMenuButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { MouseEvent, useState } from 'react';\nimport { useLocaleState, useLocales } from 'ra-core';\nimport { Box, Button, Menu, MenuItem, styled } from '@mui/material';\nimport LanguageIcon from '@mui/icons-material/Translate';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\n/**\n * Language selector. Changes the locale in the app and persists it in\n * preferences so that the app opens with the right locale in the future.\n *\n * Uses i18nProvider.getLocales() to get the list of available locales.\n *\n * @example\n * import { AppBar, TitlePortal, LocalesMenuButton } from 'react-admin';\n *\n * const MyAppBar = () => (\n *     <AppBar>\n *         <TitlePortal />\n *         <LocalesMenuButton />\n *     </AppBar>\n * );\n */\nexport const LocalesMenuButton = (props: LocalesMenuButtonProps) => {\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const languages = useLocales({ locales: props.languages });\n    const [locale, setLocale] = useLocaleState();\n\n    const getNameForLocale = (locale: string): string => {\n        const language = languages.find(language => language.locale === locale);\n        return language ? language.name : '';\n    };\n\n    const changeLocale = (locale: string) => (): void => {\n        setLocale(locale);\n        setAnchorEl(null);\n    };\n\n    const handleLanguageClick = (event: MouseEvent<HTMLElement>): void => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (): void => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <Root component=\"span\">\n            <Button\n                color=\"inherit\"\n                aria-controls=\"simple-menu\"\n                aria-label=\"\"\n                aria-haspopup=\"true\"\n                onClick={handleLanguageClick}\n                startIcon={<LanguageIcon />}\n                endIcon={<ExpandMoreIcon fontSize=\"small\" />}\n            >\n                {getNameForLocale(locale)}\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {languages.map(language => (\n                    <MenuItem\n                        key={language.locale}\n                        onClick={changeLocale(language.locale)}\n                        selected={language.locale === locale}\n                    >\n                        {language.name}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Root>\n    );\n};\n\nconst PREFIX = 'RaLocalesMenuButton';\n\nexport const LocalesMenuButtonClasses = {};\n\nconst Root = styled(Box, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({});\n\nexport interface LocalesMenuButtonProps {\n    languages?: { locale: string; name: string }[];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}