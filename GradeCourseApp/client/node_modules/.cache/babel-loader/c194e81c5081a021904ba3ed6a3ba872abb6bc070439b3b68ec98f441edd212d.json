{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nvar checkMinimumRequiredProps = function (displayName, requiredProps) {\n  return function (WrappedComponent) {\n    return function (props) {\n      useCheckMinimumRequiredProps(displayName, requiredProps, props);\n      return React.createElement(WrappedComponent, __assign({}, props));\n    };\n  };\n};\nexport default checkMinimumRequiredProps;\n// Not a hook but named that way to avoid conflicts with the old one\nexport var useCheckMinimumRequiredProps = function (displayName, requiredProps, props) {\n  var propNames = Object.keys(props);\n  var missingProps = requiredProps.filter(function (prop) {\n    return !propNames.includes(prop);\n  });\n  if (missingProps.length > 0) {\n    throw new Error(\"<\".concat(displayName, \"> component is not properly configured, some essential props are missing.\\nBe sure to pass the props from the parent. Example:\\n\\nconst My\").concat(displayName, \" = props => (\\n    <\").concat(displayName, \" {...props}></\").concat(displayName, \">\\n);\\n\\nThe missing props are: \").concat(missingProps.join(', ')));\n  }\n};","map":{"version":3,"names":["React","checkMinimumRequiredProps","displayName","requiredProps","WrappedComponent","props","useCheckMinimumRequiredProps","createElement","__assign","propNames","Object","keys","missingProps","filter","prop","includes","length","Error","concat","join"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/controller/checkMinimumRequiredProps.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ComponentType } from 'react';\n\nconst checkMinimumRequiredProps = (\n    displayName: string,\n    requiredProps: string[]\n) => (WrappedComponent: ComponentType) => (props: any) => {\n    useCheckMinimumRequiredProps(displayName, requiredProps, props);\n    return <WrappedComponent {...props} />;\n};\n\nexport default checkMinimumRequiredProps;\n\n// Not a hook but named that way to avoid conflicts with the old one\nexport const useCheckMinimumRequiredProps = (\n    displayName: string,\n    requiredProps: string[],\n    props: any\n): void => {\n    const propNames = Object.keys(props);\n    const missingProps = requiredProps.filter(\n        prop => !propNames.includes(prop)\n    );\n\n    if (missingProps.length > 0) {\n        throw new Error(\n            `<${displayName}> component is not properly configured, some essential props are missing.\nBe sure to pass the props from the parent. Example:\n\nconst My${displayName} = props => (\n    <${displayName} {...props}></${displayName}>\n);\n\nThe missing props are: ${missingProps.join(', ')}`\n        );\n    }\n};\n"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,IAAMC,yBAAyB,GAAG,SAAAA,CAC9BC,WAAmB,EACnBC,aAAuB;EACtB,iBAACC,gBAA+B;IAAK,iBAACC,KAAU;MACjDC,4BAA4B,CAACJ,WAAW,EAAEC,aAAa,EAAEE,KAAK,CAAC;MAC/D,OAAOL,KAAA,CAAAO,aAAA,CAACH,gBAAgB,EAAAI,QAAA,KAAKH,KAAK,EAAI;IAC1C,CAAC;EAHyC,CAGzC;AAHI,CAGJ;AAED,eAAeJ,yBAAyB;AAExC;AACA,OAAO,IAAMK,4BAA4B,GAAG,SAAAA,CACxCJ,WAAmB,EACnBC,aAAuB,EACvBE,KAAU;EAEV,IAAMI,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACN,KAAK,CAAC;EACpC,IAAMO,YAAY,GAAGT,aAAa,CAACU,MAAM,CACrC,UAAAC,IAAI;IAAI,QAACL,SAAS,CAACM,QAAQ,CAACD,IAAI,CAAC;EAAzB,CAAyB,CACpC;EAED,IAAIF,YAAY,CAACI,MAAM,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIC,KAAK,CACX,IAAAC,MAAA,CAAIhB,WAAW,gJAAAgB,MAAA,CAGjBhB,WAAW,0BAAAgB,MAAA,CACdhB,WAAW,oBAAAgB,MAAA,CAAiBhB,WAAW,sCAAAgB,MAAA,CAGrBN,YAAY,CAACO,IAAI,CAAC,IAAI,CAAC,CAAE,CACzC;;AAET,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}