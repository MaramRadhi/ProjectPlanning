{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useMemo } from 'react';\nimport { useQueryClient, useQuery, hashQueryKey } from 'react-query';\nimport union from 'lodash/union';\nimport { useDataProvider } from './useDataProvider';\n/**\n * Call the dataProvider.getMany() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, isFetching: true, refetch }\n * - success: { data: [data from response], isLoading: false, isFetching: false, refetch }\n * - error: { error: [error from response], isLoading: false, isFetching: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * This hook aggregates and deduplicates calls to the same resource, so for instance, if an app calls:\n *\n * useGetManyAggregate('tags', [1, 2, 3]);\n * useGetManyAggregate('tags', [3, 4]);\n *\n * during the same tick, the hook will only call the dataProvider once with the following parameters:\n *\n * dataProvider.getMany('tags', [1, 2, 3, 4])\n *\n * @param resource The resource name, e.g. 'posts'\n * @param {Params} params The getMany parameters { ids, meta }\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onError Side effect function to be executed upon failure, e.g. { onError: error => notify(error.message) }\n *\n * @typedef Params\n * @prop params.ids The ids to get, e.g. [123, 456, 789]\n * @prop params.meta Optional meta parameters\n\n * @returns The current request state. Destructure as { data, error, isLoading, isFetching, refetch }.\n *\n * @example\n *\n * import { useGetManyAggregate, useRecordContext } from 'react-admin';\n *\n * const PostTags = () => {\n *     const record = useRecordContext();\n *     const { data, isLoading, error } = useGetManyAggregate('tags', { ids: record.tagIds });\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return (\n *          <ul>\n *              {data.map(tag => (\n *                  <li key={tag.id}>{tag.name}</li>\n *              ))}\n *          </ul>\n *      );\n * };\n */\nexport var useGetManyAggregate = function (resource, params, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var queryCache = queryClient.getQueryCache();\n  var ids = params.ids,\n    meta = params.meta;\n  var placeholderData = useMemo(function () {\n    var records = (Array.isArray(ids) ? ids : [ids]).map(function (id) {\n      var _a, _b;\n      var queryHash = hashQueryKey([resource, 'getOne', {\n        id: String(id),\n        meta: meta\n      }]);\n      return (_b = (_a = queryCache.get(queryHash)) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.data;\n    });\n    if (records.some(function (record) {\n      return record === undefined;\n    })) {\n      return undefined;\n    } else {\n      return records;\n    }\n  }, [ids, queryCache, resource, meta]);\n  return useQuery([resource, 'getMany', {\n    ids: (Array.isArray(ids) ? ids : [ids]).map(function (id) {\n      return String(id);\n    }),\n    meta: meta\n  }], function () {\n    return new Promise(function (resolve, reject) {\n      if (!ids || ids.length === 0) {\n        // no need to call the dataProvider\n        return resolve([]);\n      }\n      // debounced / batched fetch\n      return callGetManyQueries({\n        resource: resource,\n        ids: ids,\n        meta: meta,\n        resolve: resolve,\n        reject: reject,\n        dataProvider: dataProvider,\n        queryClient: queryClient\n      });\n    });\n  }, __assign({\n    placeholderData: placeholderData,\n    onSuccess: function (data) {\n      // optimistically populate the getOne cache\n      (data !== null && data !== void 0 ? data : []).forEach(function (record) {\n        queryClient.setQueryData([resource, 'getOne', {\n          id: String(record.id),\n          meta: meta\n        }], function (oldRecord) {\n          return oldRecord !== null && oldRecord !== void 0 ? oldRecord : record;\n        });\n      });\n    },\n    retry: false\n  }, options));\n};\n/**\n * Batch all calls to a function into one single call with the arguments of all the calls.\n *\n * @example\n * let sum = 0;\n * const add = (args) => { sum = args.reduce((arg, total) => total + arg, 0); };\n * const addBatched = batch(add);\n * addBatched(2);\n * addBatched(8);\n * // add will be called once with arguments [2, 8]\n * // and sum will be equal to 10\n */\nvar batch = function (fn) {\n  var capturedArgs = [];\n  var timeout = null;\n  return function (arg) {\n    capturedArgs.push(arg);\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      timeout = null;\n      fn(__spreadArray([], capturedArgs, true));\n      capturedArgs = [];\n    }, 0);\n  };\n};\n/**\n * Group and execute all calls to the dataProvider.getMany() method for the current tick\n *\n * Thanks to batch(), this function executes at most once per tick,\n * whatever the number of calls to useGetManyAggregate().\n */\nvar callGetManyQueries = batch(function (calls) {\n  var dataProvider = calls[0].dataProvider;\n  var queryClient = calls[0].queryClient;\n  /**\n   * Aggregate calls by resource\n   *\n   * callsByResource will look like:\n   * {\n   *     posts: [{ resource, ids, resolve, reject, dataProvider, queryClient }, ...],\n   *     tags: [{ resource, ids, resolve, reject, dataProvider, queryClient }, ...],\n   * }\n   */\n  var callsByResource = calls.reduce(function (acc, callArgs) {\n    if (!acc[callArgs.resource]) {\n      acc[callArgs.resource] = [];\n    }\n    acc[callArgs.resource].push(callArgs);\n    return acc;\n  }, {});\n  /**\n   * For each resource, aggregate ids and call dataProvider.getMany() once\n   */\n  Object.keys(callsByResource).forEach(function (resource) {\n    var callsForResource = callsByResource[resource];\n    /**\n     * Extract ids from queries, aggregate and deduplicate them\n     *\n     * @example from [[1, 2], [2, null, 3], [4, null]] to [1, 2, 3, 4]\n     */\n    var aggregatedIds = callsForResource.reduce(function (acc, _a) {\n      var ids = _a.ids;\n      return union(acc, ids);\n    }, []) // concat + unique\n    .filter(function (v) {\n      return v != null && v !== '';\n    }); // remove null values\n    var uniqueMeta = callsForResource.reduce(function (acc, _a) {\n      var meta = _a.meta;\n      return meta || acc;\n    }, undefined);\n    if (aggregatedIds.length === 0) {\n      // no need to call the data provider if all the ids are null\n      callsForResource.forEach(function (_a) {\n        var resolve = _a.resolve;\n        resolve([]);\n      });\n      return;\n    }\n    var callThatHasAllAggregatedIds = callsForResource.find(function (_a) {\n      var ids = _a.ids;\n      return JSON.stringify(ids) === JSON.stringify(aggregatedIds);\n    });\n    if (callThatHasAllAggregatedIds) {\n      // There is only one call (no aggregation), or one of the calls has the same ids as the sum of all calls.\n      // Either way, we can't trigger a new fetchQuery with the same signature, as it's already pending.\n      // Therefore, we reply with the dataProvider\n      var dataProvider_1 = callThatHasAllAggregatedIds.dataProvider,\n        resource_1 = callThatHasAllAggregatedIds.resource,\n        ids = callThatHasAllAggregatedIds.ids,\n        meta = callThatHasAllAggregatedIds.meta;\n      dataProvider_1.getMany(resource_1, {\n        ids: ids,\n        meta: meta\n      }).then(function (_a) {\n        var data = _a.data;\n        return data;\n      }).then(function (data) {\n        // We must then resolve all the pending calls with the data they requested\n        callsForResource.forEach(function (_a) {\n          var ids = _a.ids,\n            resolve = _a.resolve;\n          resolve(data.filter(function (record) {\n            return ids.map(function (id) {\n              return String(id);\n            }).includes(String(record.id));\n          }));\n        });\n      }, function (error) {\n        // All pending calls must also receive the error\n        callsForResource.forEach(function (_a) {\n          var reject = _a.reject;\n          reject(error);\n        });\n      });\n      return;\n    }\n    /**\n     * Call dataProvider.getMany() with the aggregatedIds,\n     * and resolve each of the promises using the results\n     */\n    queryClient.fetchQuery([resource, 'getMany', {\n      ids: aggregatedIds.map(function (id) {\n        return String(id);\n      }),\n      meta: uniqueMeta\n    }], function () {\n      return dataProvider.getMany(resource, {\n        ids: aggregatedIds,\n        meta: uniqueMeta\n      }).then(function (_a) {\n        var data = _a.data;\n        return data;\n      });\n    }).then(function (data) {\n      callsForResource.forEach(function (_a) {\n        var ids = _a.ids,\n          resolve = _a.resolve;\n        resolve(data.filter(function (record) {\n          return ids.map(function (id) {\n            return String(id);\n          }).includes(String(record.id));\n        }));\n      });\n    }).catch(function (error) {\n      return callsForResource.forEach(function (_a) {\n        var reject = _a.reject;\n        return reject(error);\n      });\n    });\n  });\n});","map":{"version":3,"names":["useMemo","useQueryClient","useQuery","hashQueryKey","union","useDataProvider","useGetManyAggregate","resource","params","options","dataProvider","queryClient","queryCache","getQueryCache","ids","meta","placeholderData","records","Array","isArray","map","id","queryHash","String","_b","_a","get","state","data","some","record","undefined","Promise","resolve","reject","length","callGetManyQueries","__assign","onSuccess","forEach","setQueryData","oldRecord","retry","batch","fn","capturedArgs","timeout","arg","push","clearTimeout","setTimeout","__spreadArray","calls","callsByResource","reduce","acc","callArgs","Object","keys","callsForResource","aggregatedIds","filter","v","uniqueMeta","callThatHasAllAggregatedIds","find","JSON","stringify","dataProvider_1","resource_1","getMany","then","includes","error","fetchQuery","catch"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/dataProvider/useGetManyAggregate.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport {\n    QueryClient,\n    useQueryClient,\n    useQuery,\n    UseQueryOptions,\n    hashQueryKey,\n} from 'react-query';\nimport union from 'lodash/union';\n\nimport { UseGetManyHookValue } from './useGetMany';\nimport { Identifier, RaRecord, GetManyParams, DataProvider } from '../types';\nimport { useDataProvider } from './useDataProvider';\n\n/**\n * Call the dataProvider.getMany() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { isLoading: true, isFetching: true, refetch }\n * - success: { data: [data from response], isLoading: false, isFetching: false, refetch }\n * - error: { error: [error from response], isLoading: false, isFetching: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * This hook aggregates and deduplicates calls to the same resource, so for instance, if an app calls:\n *\n * useGetManyAggregate('tags', [1, 2, 3]);\n * useGetManyAggregate('tags', [3, 4]);\n *\n * during the same tick, the hook will only call the dataProvider once with the following parameters:\n *\n * dataProvider.getMany('tags', [1, 2, 3, 4])\n *\n * @param resource The resource name, e.g. 'posts'\n * @param {Params} params The getMany parameters { ids, meta }\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onError Side effect function to be executed upon failure, e.g. { onError: error => notify(error.message) }\n *\n * @typedef Params\n * @prop params.ids The ids to get, e.g. [123, 456, 789]\n * @prop params.meta Optional meta parameters\n\n * @returns The current request state. Destructure as { data, error, isLoading, isFetching, refetch }.\n *\n * @example\n *\n * import { useGetManyAggregate, useRecordContext } from 'react-admin';\n *\n * const PostTags = () => {\n *     const record = useRecordContext();\n *     const { data, isLoading, error } = useGetManyAggregate('tags', { ids: record.tagIds });\n *     if (isLoading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return (\n *          <ul>\n *              {data.map(tag => (\n *                  <li key={tag.id}>{tag.name}</li>\n *              ))}\n *          </ul>\n *      );\n * };\n */\nexport const useGetManyAggregate = <RecordType extends RaRecord = any>(\n    resource: string,\n    params: GetManyParams,\n    options: UseQueryOptions<RecordType[], Error> = {}\n): UseGetManyHookValue<RecordType> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const queryCache = queryClient.getQueryCache();\n    const { ids, meta } = params;\n    const placeholderData = useMemo(() => {\n        const records = (Array.isArray(ids) ? ids : [ids]).map(id => {\n            const queryHash = hashQueryKey([\n                resource,\n                'getOne',\n                { id: String(id), meta },\n            ]);\n            return queryCache.get<RecordType>(queryHash)?.state?.data;\n        });\n        if (records.some(record => record === undefined)) {\n            return undefined;\n        } else {\n            return records as RecordType[];\n        }\n    }, [ids, queryCache, resource, meta]);\n\n    return useQuery<RecordType[], Error, RecordType[]>(\n        [\n            resource,\n            'getMany',\n            {\n                ids: (Array.isArray(ids) ? ids : [ids]).map(id => String(id)),\n                meta,\n            },\n        ],\n        () =>\n            new Promise((resolve, reject) => {\n                if (!ids || ids.length === 0) {\n                    // no need to call the dataProvider\n                    return resolve([]);\n                }\n                // debounced / batched fetch\n                return callGetManyQueries({\n                    resource,\n                    ids,\n                    meta,\n                    resolve,\n                    reject,\n                    dataProvider,\n                    queryClient,\n                });\n            }),\n        {\n            placeholderData,\n            onSuccess: data => {\n                // optimistically populate the getOne cache\n                (data ?? []).forEach(record => {\n                    queryClient.setQueryData(\n                        [resource, 'getOne', { id: String(record.id), meta }],\n                        oldRecord => oldRecord ?? record\n                    );\n                });\n            },\n            retry: false,\n            ...options,\n        }\n    );\n};\n\n/**\n * Batch all calls to a function into one single call with the arguments of all the calls.\n *\n * @example\n * let sum = 0;\n * const add = (args) => { sum = args.reduce((arg, total) => total + arg, 0); };\n * const addBatched = batch(add);\n * addBatched(2);\n * addBatched(8);\n * // add will be called once with arguments [2, 8]\n * // and sum will be equal to 10\n */\nconst batch = fn => {\n    let capturedArgs: any[] = [];\n    let timeout: ReturnType<typeof setTimeout> | null = null;\n    return (arg: any) => {\n        capturedArgs.push(arg);\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            timeout = null;\n            fn([...capturedArgs]);\n            capturedArgs = [];\n        }, 0);\n    };\n};\n\ninterface GetManyCallArgs {\n    resource: string;\n    ids: Identifier[];\n    meta?: any;\n    resolve: (data: any[]) => void;\n    reject: (error?: any) => void;\n    dataProvider: DataProvider;\n    queryClient: QueryClient;\n}\n\n/**\n * Group and execute all calls to the dataProvider.getMany() method for the current tick\n *\n * Thanks to batch(), this function executes at most once per tick,\n * whatever the number of calls to useGetManyAggregate().\n */\nconst callGetManyQueries = batch((calls: GetManyCallArgs[]) => {\n    const dataProvider = calls[0].dataProvider;\n    const queryClient = calls[0].queryClient;\n\n    /**\n     * Aggregate calls by resource\n     *\n     * callsByResource will look like:\n     * {\n     *     posts: [{ resource, ids, resolve, reject, dataProvider, queryClient }, ...],\n     *     tags: [{ resource, ids, resolve, reject, dataProvider, queryClient }, ...],\n     * }\n     */\n    const callsByResource = calls.reduce((acc, callArgs) => {\n        if (!acc[callArgs.resource]) {\n            acc[callArgs.resource] = [];\n        }\n        acc[callArgs.resource].push(callArgs);\n        return acc;\n    }, {} as { [resource: string]: GetManyCallArgs[] });\n\n    /**\n     * For each resource, aggregate ids and call dataProvider.getMany() once\n     */\n    Object.keys(callsByResource).forEach(resource => {\n        const callsForResource = callsByResource[resource];\n\n        /**\n         * Extract ids from queries, aggregate and deduplicate them\n         *\n         * @example from [[1, 2], [2, null, 3], [4, null]] to [1, 2, 3, 4]\n         */\n        const aggregatedIds = callsForResource\n            .reduce((acc, { ids }) => union(acc, ids), []) // concat + unique\n            .filter(v => v != null && v !== ''); // remove null values\n\n        const uniqueMeta = callsForResource.reduce(\n            (acc, { meta }) => meta || acc,\n            undefined\n        );\n\n        if (aggregatedIds.length === 0) {\n            // no need to call the data provider if all the ids are null\n            callsForResource.forEach(({ resolve }) => {\n                resolve([]);\n            });\n            return;\n        }\n\n        const callThatHasAllAggregatedIds = callsForResource.find(\n            ({ ids }) => JSON.stringify(ids) === JSON.stringify(aggregatedIds)\n        );\n        if (callThatHasAllAggregatedIds) {\n            // There is only one call (no aggregation), or one of the calls has the same ids as the sum of all calls.\n            // Either way, we can't trigger a new fetchQuery with the same signature, as it's already pending.\n            // Therefore, we reply with the dataProvider\n            const {\n                dataProvider,\n                resource,\n                ids,\n                meta,\n            } = callThatHasAllAggregatedIds;\n\n            dataProvider\n                .getMany<any>(resource, { ids, meta })\n                .then(({ data }) => data)\n                .then(\n                    data => {\n                        // We must then resolve all the pending calls with the data they requested\n                        callsForResource.forEach(({ ids, resolve }) => {\n                            resolve(\n                                data.filter(record =>\n                                    ids\n                                        .map(id => String(id))\n                                        .includes(String(record.id))\n                                )\n                            );\n                        });\n                    },\n                    error => {\n                        // All pending calls must also receive the error\n                        callsForResource.forEach(({ reject }) => {\n                            reject(error);\n                        });\n                    }\n                );\n            return;\n        }\n\n        /**\n         * Call dataProvider.getMany() with the aggregatedIds,\n         * and resolve each of the promises using the results\n         */\n        queryClient\n            .fetchQuery<any[], Error, any[]>(\n                [\n                    resource,\n                    'getMany',\n                    {\n                        ids: aggregatedIds.map(id => String(id)),\n                        meta: uniqueMeta,\n                    },\n                ],\n                () =>\n                    dataProvider\n                        .getMany<any>(resource, {\n                            ids: aggregatedIds,\n                            meta: uniqueMeta,\n                        })\n                        .then(({ data }) => data)\n            )\n            .then(data => {\n                callsForResource.forEach(({ ids, resolve }) => {\n                    resolve(\n                        data.filter(record =>\n                            ids\n                                .map(id => String(id))\n                                .includes(String(record.id))\n                        )\n                    );\n                });\n            })\n            .catch(error =>\n                callsForResource.forEach(({ reject }) => reject(error))\n            );\n    });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}