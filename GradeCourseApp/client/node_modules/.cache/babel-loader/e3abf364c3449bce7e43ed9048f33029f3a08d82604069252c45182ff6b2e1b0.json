{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n  var _a = useFormState(),\n    dirtyFields = _a.dirtyFields,\n    touchedFields = _a.touchedFields,\n    errors = _a.errors;\n  var formGroups = useFormGroups();\n  var _b = useState({\n      errors: undefined,\n      isDirty: false,\n      isTouched: false,\n      isValid: true\n    }),\n    state = _b[0],\n    setState = _b[1];\n  var updateGroupState = useCallback(function () {\n    var fields = formGroups.getGroupFields(name);\n    var fieldStates = fields.map(function (field) {\n      return {\n        name: field,\n        error: get(errors, field, undefined),\n        isDirty: get(dirtyFields, field, false) !== false,\n        isValid: get(errors, field, undefined) == undefined,\n        isTouched: get(touchedFields, field, false) !== false\n      };\n    }).filter(function (fieldState) {\n      return fieldState != undefined;\n    }); // eslint-disable-line\n    var newState = getFormGroupState(fieldStates);\n    setState(function (oldState) {\n      if (!isEqual(oldState, newState)) {\n        return newState;\n      }\n      return oldState;\n    });\n  }, [dirtyFields, errors, touchedFields, formGroups, name]);\n  useEffect(function () {\n    updateGroupState();\n  },\n  // eslint-disable-next-line\n  [\n  // eslint-disable-next-line\n  JSON.stringify({\n    dirtyFields: dirtyFields,\n    errors: errors,\n    touchedFields: touchedFields\n  }), updateGroupState]);\n  useEffect(function () {\n    // Whenever the group content changes (input are added or removed)\n    // we must update its state\n    return formGroups.subscribe(name, function () {\n      updateGroupState();\n    });\n  }, [formGroups, name, updateGroupState]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n    var newState = {\n      isDirty: acc.isDirty || fieldState.isDirty,\n      errors: errors,\n      isTouched: acc.isTouched || fieldState.isTouched,\n      isValid: acc.isValid && fieldState.isValid\n    };\n    return newState;\n  }, {\n    isDirty: false,\n    errors: undefined,\n    isValid: true,\n    isTouched: false\n  });\n};","map":{"version":3,"names":["useCallback","useEffect","useState","get","isEqual","useFormState","useFormGroups","useFormGroup","name","_a","dirtyFields","touchedFields","errors","formGroups","_b","undefined","isDirty","isTouched","isValid","state","setState","updateGroupState","fields","getGroupFields","fieldStates","map","field","error","filter","fieldState","newState","getFormGroupState","oldState","JSON","stringify","subscribe","reduce","acc"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/form/useFormGroup.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { useFormState } from 'react-hook-form';\nimport { useFormGroups } from './useFormGroups';\n\ntype FieldState = {\n    name: string;\n    error?: any;\n    isDirty: boolean;\n    isTouched: boolean;\n    isValid: boolean;\n};\n\ntype FormGroupState = {\n    errors?: object;\n    isDirty: boolean;\n    isTouched: boolean;\n    isValid: boolean;\n};\n\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup, minLength } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@mui/material';\n * import ExpandMoreIcon from '@mui/icons-material/ExpandMoreIcon';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={!formGroupState.isValid && formGroupState.isDirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport const useFormGroup = (name: string): FormGroupState => {\n    const { dirtyFields, touchedFields, errors } = useFormState();\n    const formGroups = useFormGroups();\n    const [state, setState] = useState<FormGroupState>({\n        errors: undefined,\n        isDirty: false,\n        isTouched: false,\n        isValid: true,\n    });\n\n    const updateGroupState = useCallback(() => {\n        const fields = formGroups.getGroupFields(name);\n        const fieldStates = fields\n            .map<FieldState>(field => {\n                return {\n                    name: field,\n                    error: get(errors, field, undefined),\n                    isDirty: get(dirtyFields, field, false) !== false,\n                    isValid: get(errors, field, undefined) == undefined, // eslint-disable-line\n                    isTouched: get(touchedFields, field, false) !== false,\n                };\n            })\n            .filter(fieldState => fieldState != undefined); // eslint-disable-line\n\n        const newState = getFormGroupState(fieldStates);\n        setState(oldState => {\n            if (!isEqual(oldState, newState)) {\n                return newState;\n            }\n\n            return oldState;\n        });\n    }, [dirtyFields, errors, touchedFields, formGroups, name]);\n\n    useEffect(\n        () => {\n            updateGroupState();\n        },\n        // eslint-disable-next-line\n        [\n            // eslint-disable-next-line\n            JSON.stringify({ dirtyFields, errors, touchedFields }),\n            updateGroupState,\n        ]\n    );\n\n    useEffect(() => {\n        // Whenever the group content changes (input are added or removed)\n        // we must update its state\n        return formGroups.subscribe(name, () => {\n            updateGroupState();\n        });\n    }, [formGroups, name, updateGroupState]);\n\n    return state;\n};\n\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from react-hook-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport const getFormGroupState = (\n    fieldStates: FieldState[]\n): FormGroupState => {\n    return fieldStates.reduce<FormGroupState>(\n        (acc, fieldState) => {\n            let errors = acc.errors || {};\n\n            if (fieldState.error) {\n                errors[fieldState.name] = fieldState.error;\n            }\n\n            const newState = {\n                isDirty: acc.isDirty || fieldState.isDirty,\n                errors,\n                isTouched: acc.isTouched || fieldState.isTouched,\n                isValid: acc.isValid && fieldState.isValid,\n            };\n\n            return newState;\n        },\n        {\n            isDirty: false,\n            errors: undefined,\n            isValid: true,\n            isTouched: false,\n        }\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}