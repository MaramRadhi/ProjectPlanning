{"version":3,"file":"TokenObject.js","sources":["../src/TokenObject.ts"],"sourcesContent":["import Cookies from 'js-cookie';\nimport {AuthKitStateInterface, AuthStateUserObject} from './types';\n\n/**\n * @class TokenObject\n *\n * Stores and retrieve Token\n */\nclass TokenObject {\n  private readonly authStorageName: string;\n  private readonly stateStorageName: string;\n  private readonly authTimeStorageName: string;\n  private readonly cookieDomain?: string;\n  private readonly cookieSecure?: boolean;\n  private readonly authStorageTypeName: string;\n  private readonly authStorageType: 'cookie' | 'localstorage';\n  private readonly refreshTokenName: string | null;\n  private readonly refreshTokenTimeName: string | null;\n  private readonly isUsingRefreshToken: boolean;\n\n  /**\n   * TokenObject - Stores, retrieve and process tokens\n   *\n   * @param authStorageName - Name of the Token,\n   * which will store the Authorization Token\n   *\n   * @param authStorageType - Type of the auth Storage, `\n   * cookie` or `localstorage`\n   *\n   * @param refreshTokenName - Name of the refresh Token,\n   * if `undefined`, then no refreshToken feature is using\n   *\n   * @param cookieDomain - domain name for the Cookies,\n   * only applicable when `authStorageType` is `cookie`\n   *\n   * @param cookieSecure - cookies are secure or not,\n   * only applicable when `authStorageType` is `cookie`\n   *\n   * @constructor\n   */\n  constructor(\n      authStorageName:string,\n      authStorageType:'cookie' | 'localstorage',\n      refreshTokenName:string | null,\n      cookieDomain?:string,\n      cookieSecure?:boolean,\n  ) {\n    this.authStorageType = authStorageType;\n    this.authStorageName = authStorageName;\n    this.authTimeStorageName = `${authStorageName}_storage`;\n    this.stateStorageName = `${authStorageName}_state`;\n    this.refreshTokenName = refreshTokenName;\n    this.cookieDomain = cookieDomain;\n    this.cookieSecure = cookieSecure;\n    this.authStorageTypeName = `${this.authStorageName}_type`;\n    this.isUsingRefreshToken = !!this.refreshTokenName;\n    this.refreshTokenTimeName = this.refreshTokenName ?\n      `${this.refreshTokenName}_time` : null;\n  }\n\n  /**\n   * Get the Initial Tokens and states\n   * Called externally in `AuthProvider`\n   * when the Application is bootstrapping or refreshed\n   *\n   * If the `authStorageType` is `cookie`,\n   * get information from `initialCookieToken()` function\n   *\n   * If the `authTokenType` is `localStorage`\n   * get information from `initialLSToken()` function\n   *\n   * @returns AuthKitStateInterface\n   */\n  initialToken(): AuthKitStateInterface {\n    if (this.authStorageType === 'cookie') {\n      return this.initialCookieToken_();\n    } else {\n      return this.initialLSToken_();\n    }\n  }\n\n  /**\n   * Get the Initial Token from Cookies\n   * Called internally by `initialToken` method\n   *\n   * If the `authStorageType` is `cookie`\n   * then this function is called\n   * And returns the Tokens and states Stored in all 4 cookies\n   *\n   * @returns AuthKitStateInterface\n   */\n  initialCookieToken_(): AuthKitStateInterface {\n    const authToken = Cookies.get(this.authStorageName);\n    const authTokenType = Cookies.get(this.authStorageTypeName);\n    const authTokenTime = Cookies.get(this.authTimeStorageName);\n    const stateCookie = Cookies.get(this.stateStorageName);\n\n    const refreshToken = this.isUsingRefreshToken &&\n    this.refreshTokenName != null ? Cookies.get(this.refreshTokenName) : null;\n\n    const refreshTokenTime = this.isUsingRefreshToken &&\n    this.refreshTokenTimeName != null ?\n      Cookies.get(this.refreshTokenTimeName) : null;\n\n    return this.checkTokenExist(\n        authToken,\n        authTokenType,\n        authTokenTime,\n        stateCookie,\n        refreshToken,\n        refreshTokenTime);\n  }\n\n  /**\n   * Get the Initial Token from LocalStorage\n   * Called internally by `initialToken` method\n   *\n   * If the `authStorageType` is `localstorage`\n   * then this function is called\n   * And returns the Tokens and states Stored in all 4 cookies\n   *\n   * @returns AuthKitStateInterface\n   */\n  initialLSToken_(): AuthKitStateInterface {\n    const authToken = localStorage.getItem(this.authStorageName);\n    const authTokenType = localStorage.getItem(this.authStorageTypeName);\n    const authTokenTime = localStorage.getItem(this.authTimeStorageName);\n    const stateCookie = localStorage.getItem(this.stateStorageName);\n\n    const refreshToken = this.isUsingRefreshToken &&\n    this.refreshTokenName != null ?\n      localStorage.getItem(this.refreshTokenName) : null;\n\n    const refreshTokenTime = this.isUsingRefreshToken &&\n    this.refreshTokenTimeName != null ?\n      localStorage.getItem(this.refreshTokenTimeName) : null;\n\n    return this.checkTokenExist(\n        authToken,\n        authTokenType,\n        authTokenTime,\n        stateCookie,\n        refreshToken,\n        refreshTokenTime);\n  }\n\n  /**\n   * Check if the Initial token is valid or not,\n   * Called Internally by `initialCookieToken_()` and `initialLSToken_()`\n   *\n   * If the tokens are valid,\n   * then it response TokenObject with auth Information\n   * Else it response TokenObject with all null\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param authTokenTime\n   * @param stateCookie\n   * @param refreshToken\n   * @param refreshTokenTime\n   *\n   * @returns AuthKitStateInterface\n   *\n   */\n  checkTokenExist(\n      authToken: string | null | undefined,\n      authTokenType: string | null | undefined,\n      authTokenTime: string | null | undefined,\n      stateCookie: string | null | undefined,\n      refreshToken: string | null | undefined,\n      refreshTokenTime: string | null | undefined):\n    AuthKitStateInterface {\n    if (!!authToken && !!authTokenType && !!authTokenTime && !!stateCookie) {\n      const expiresAt = new Date(authTokenTime);\n      try {\n        const authState = JSON.parse(stateCookie);\n        const obj = {\n          auth: {\n            token: authToken,\n            type: authTokenType,\n            expiresAt: expiresAt,\n          },\n          userState: authState,\n          isSignIn: true,\n          isUsingRefreshToken: this.isUsingRefreshToken,\n          refresh: undefined,\n        };\n        if (this.isUsingRefreshToken && !!refreshToken && !! refreshTokenTime) {\n          const refreshTokenExpiresAt = new Date(refreshTokenTime);\n          return {\n            ...obj,\n            refresh: {\n              token: refreshToken,\n              expiresAt: refreshTokenExpiresAt,\n            },\n          };\n        } else {\n          return {\n            ...obj,\n            refresh: null,\n          };\n        }\n      } catch (e) {\n        return {\n          auth: null,\n          refresh: null,\n          userState: null,\n          isUsingRefreshToken: this.isUsingRefreshToken,\n          isSignIn: false,\n        };\n      }\n    } else {\n      return {\n        auth: null,\n        refresh: null,\n        userState: null,\n        isUsingRefreshToken: this.isUsingRefreshToken,\n        isSignIn: false,\n      };\n    }\n  }\n\n  /**\n   * Sync Auth Tokens on time of login and logout\n   *\n   * Set the New Cookies or new Localstorage on login\n   * Or Remove the old Cookies or old Localstorage on logout\n   *\n   * @param authState\n   */\n  syncTokens(authState: AuthKitStateInterface): void {\n    if (authState.auth) {\n      if (this.isUsingRefreshToken && authState.refresh) {\n        this.setToken(\n            authState.auth.token,\n            authState.auth.type,\n            authState.refresh.token,\n            authState.refresh.expiresAt,\n            authState.auth.expiresAt,\n            authState.userState,\n        );\n      } else {\n        this.setToken(\n            authState.auth.token,\n            authState.auth.type,\n            null,\n            null,\n            authState.auth.expiresAt,\n            authState.userState,\n        );\n      }\n    } else {\n      this.removeToken();\n    }\n  }\n\n  /**\n   * Set Cookies or localstorage on login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param refreshTokenExpiresAt\n   * @param expiresAt\n   * @param authState\n   */\n  setToken(\n      authToken: string,\n      authTokenType: string,\n      refreshToken: string | null,\n      refreshTokenExpiresAt: Date | null,\n      expiresAt: Date,\n      authState: AuthStateUserObject|null): void {\n    if (this.authStorageType === 'cookie') {\n      this.setCookieToken_(\n          authToken,\n          authTokenType,\n          refreshToken,\n          expiresAt,\n          refreshTokenExpiresAt,\n          authState);\n    } else {\n      this.setLSToken_(\n          authToken,\n          authTokenType,\n          refreshToken,\n          expiresAt,\n          refreshTokenExpiresAt,\n          authState);\n    }\n  }\n\n  /**\n   *\n   * Set Cookie on time of Login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param expiresAt\n   * @param refreshTokenExpiresAt\n   * @param authState\n   */\n  setCookieToken_(\n      authToken: string,\n      authTokenType: string,\n      refreshToken: string | null,\n      expiresAt: Date,\n      refreshTokenExpiresAt: Date | null,\n      authState: AuthStateUserObject|null): void {\n    Cookies.set(this.authStorageName, authToken, {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.set(this.authStorageTypeName, authTokenType, {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.set(this.authTimeStorageName, expiresAt.toISOString(), {\n      expires: expiresAt,\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    if (authState) {\n      Cookies.set(this.stateStorageName, JSON.stringify(authState), {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure,\n      });\n    }\n\n    if (this.isUsingRefreshToken && !!this.refreshTokenName &&\n      !!refreshToken) {\n      Cookies.set(this.refreshTokenName, refreshToken, {\n        expires: expiresAt,\n        domain: this.cookieDomain,\n        secure: this.cookieSecure,\n      });\n    }\n\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName &&\n      !!refreshTokenExpiresAt) {\n      Cookies.set(this.refreshTokenTimeName,\n          refreshTokenExpiresAt.toISOString(), {\n            expires: expiresAt,\n            domain: this.cookieDomain,\n            secure: this.cookieSecure,\n          });\n    }\n  }\n\n  /**\n   * Set LocalStorage at the time of Login\n   *\n   * @param authToken\n   * @param authTokenType\n   * @param refreshToken\n   * @param expiresAt\n   * @param refreshTokenExpiresAt\n   * @param authState\n   */\n  setLSToken_(\n      authToken: string,\n      authTokenType: string,\n      refreshToken: string | null,\n      expiresAt: Date,\n      refreshTokenExpiresAt: Date | null,\n      authState: AuthStateUserObject|null): void {\n    localStorage.setItem(this.authStorageName, authToken);\n    localStorage.setItem(this.authStorageTypeName, authTokenType);\n    localStorage.setItem(this.authTimeStorageName, expiresAt.toISOString());\n    if (authState) {\n      localStorage.setItem(this.stateStorageName, JSON.stringify(authState));\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenName &&\n      !!refreshToken) {\n      localStorage.setItem(this.refreshTokenName, refreshToken);\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName &&\n      !!refreshTokenExpiresAt) {\n      localStorage.setItem(this.refreshTokenTimeName,\n          refreshTokenExpiresAt.toISOString());\n    }\n  }\n\n  /**\n   * Remove Tokens on time of Logout\n   */\n  removeToken(): void {\n    if (this.authStorageType === 'cookie') {\n      this.removeCookieToken_();\n    } else {\n      this.removeLSToken_();\n    }\n  }\n\n  /**\n   * Remove Token from Cookies\n   */\n  removeCookieToken_(): void {\n    Cookies.remove(this.authStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.remove(this.authTimeStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.remove(this.authStorageTypeName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    Cookies.remove(this.stateStorageName, {\n      domain: this.cookieDomain,\n      secure: this.cookieSecure,\n    });\n    if (this.isUsingRefreshToken && !!this.refreshTokenName) {\n      Cookies.remove(this.refreshTokenName, {\n        domain: this.cookieDomain,\n        secure: this.cookieSecure,\n      });\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {\n      Cookies.remove(this.refreshTokenTimeName, {\n        domain: this.cookieDomain,\n        secure: this.cookieSecure,\n      });\n    }\n  }\n\n  /**\n   * Remove Token from LocalStorage\n   */\n  removeLSToken_(): void {\n    localStorage.removeItem(this.authStorageName);\n    localStorage.removeItem(this.authTimeStorageName);\n    localStorage.removeItem(this.authStorageTypeName);\n    localStorage.removeItem(this.stateStorageName);\n    if (this.isUsingRefreshToken && !!this.refreshTokenName) {\n      localStorage.removeItem(this.refreshTokenName);\n    }\n    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {\n      localStorage.removeItem(this.refreshTokenTimeName);\n    }\n  }\n}\n\nexport default TokenObject;\n"],"names":[],"mappings":"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"}