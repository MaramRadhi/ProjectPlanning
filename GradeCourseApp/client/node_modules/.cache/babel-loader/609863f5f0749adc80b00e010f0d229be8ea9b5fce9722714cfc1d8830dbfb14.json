{"ast":null,"code":"import * as React from 'react';\nimport { memo } from 'react';\nimport { Button, Menu, MenuItem, Tooltip, IconButton, useMediaQuery } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { useListSortContext, useTranslate, useTranslateLabel, shallowEqual } from 'ra-core';\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nvar SortButton = function (props) {\n  var fields = props.fields,\n    _a = props.label,\n    label = _a === void 0 ? 'ra.sort.sort_by' : _a,\n    _b = props.icon,\n    icon = _b === void 0 ? defaultIcon : _b;\n  var _c = useListSortContext(),\n    resource = _c.resource,\n    sort = _c.sort,\n    setSort = _c.setSort;\n  var translate = useTranslate();\n  var translateLabel = useTranslateLabel();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  var _d = React.useState(null),\n    anchorEl = _d[0],\n    setAnchorEl = _d[1];\n  var handleClick = function (event) {\n    setAnchorEl(event.currentTarget);\n  };\n  var handleClose = function () {\n    setAnchorEl(null);\n  };\n  var handleChangeSort = function (event) {\n    var field = event.currentTarget.dataset.sort;\n    setSort({\n      field: field,\n      order: field === sort.field ? inverseOrder(sort.order) : 'ASC'\n    });\n    setAnchorEl(null);\n  };\n  var buttonLabel = translate(label, {\n    field: translateLabel({\n      resource: resource,\n      source: sort.field\n    }),\n    order: translate(\"ra.sort.\".concat(sort.order)),\n    _: label\n  });\n  return React.createElement(React.Fragment, null, isXSmall ? React.createElement(Tooltip, {\n    title: buttonLabel\n  }, React.createElement(IconButton, {\n    \"aria-label\": buttonLabel,\n    color: \"primary\",\n    onClick: handleClick,\n    size: \"large\"\n  }, icon)) : React.createElement(StyledButton, {\n    \"aria-controls\": \"simple-menu\",\n    \"aria-haspopup\": \"true\",\n    color: \"primary\",\n    onClick: handleClick,\n    startIcon: icon,\n    endIcon: React.createElement(ArrowDropDownIcon, null),\n    size: \"small\"\n  }, buttonLabel), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, fields.map(function (field) {\n    return React.createElement(MenuItem, {\n      onClick: handleChangeSort,\n      \"data-sort\": field,\n      key: field\n    }, translateLabel({\n      resource: resource,\n      source: field\n    }), ' ', translate(\"ra.sort.\".concat(sort.field === field ? inverseOrder(sort.order) : 'ASC')));\n  })));\n};\nvar defaultIcon = React.createElement(SortIcon, null);\nvar inverseOrder = function (sort) {\n  return sort === 'ASC' ? 'DESC' : 'ASC';\n};\nvar arePropsEqual = function (prevProps, nextProps) {\n  return shallowEqual(prevProps.fields, nextProps.fields);\n};\nvar StyledButton = styled(Button, {\n  name: 'RaSortButton',\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  '&.MuiButton-sizeSmall': {\n    // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n    lineHeight: 1.5\n  },\n  '& .MuiButton-endIcon': {\n    ml: 0\n  }\n});\nexport default memo(SortButton, arePropsEqual);","map":{"version":3,"names":["React","memo","Button","Menu","MenuItem","Tooltip","IconButton","useMediaQuery","styled","SortIcon","ArrowDropDownIcon","useListSortContext","useTranslate","useTranslateLabel","shallowEqual","SortButton","props","fields","_a","label","_b","icon","defaultIcon","_c","resource","sort","setSort","translate","translateLabel","isXSmall","theme","breakpoints","down","_d","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","handleChangeSort","field","dataset","order","inverseOrder","buttonLabel","source","concat","_","createElement","Fragment","title","color","onClick","size","StyledButton","startIcon","endIcon","id","keepMounted","open","Boolean","onClose","map","key","arePropsEqual","prevProps","nextProps","name","overridesResolver","styles","root","lineHeight","ml"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/button/SortButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactElement, memo } from 'react';\nimport {\n    Button,\n    Menu,\n    MenuItem,\n    Tooltip,\n    IconButton,\n    useMediaQuery,\n    Theme,\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SortIcon from '@mui/icons-material/Sort';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport {\n    useListSortContext,\n    useTranslate,\n    useTranslateLabel,\n    shallowEqual,\n} from 'ra-core';\n\n/**\n * A button allowing to change the sort field and order.\n *\n * To be used inside a ListContext (e.g. inside a <List> or <ReferenceManyField>)\n *\n * Expects one 'fields' prop, containing an array of field strings that shall\n * be used and displayed for sorting.\n *\n * When users clicks on the <SortButton>, they see a dropdown list with the\n * proposed sorting fields. Once they click on one of these fields, the related\n * list refreshes, re-sorted.\n *\n * @example\n *\n * import * as React from 'react';\n * import { TopToolbar, SortButton, CreateButton, ExportButton } from 'react-admin';\n *\n * const ListActions = () => (\n *     <TopToolbar>\n *         <SortButton fields={['reference', 'sales', 'stock']} />\n *         <CreateButton />\n *         <ExportButton />\n *     </TopToolbar>\n * );\n */\nconst SortButton = (props: SortButtonProps) => {\n    const { fields, label = 'ra.sort.sort_by', icon = defaultIcon } = props;\n    const { resource, sort, setSort } = useListSortContext();\n    const translate = useTranslate();\n    const translateLabel = useTranslateLabel();\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleChangeSort = (\n        event: React.MouseEvent<HTMLLIElement, MouseEvent>\n    ) => {\n        const field = event.currentTarget.dataset.sort;\n        setSort({\n            field,\n            order: field === sort.field ? inverseOrder(sort.order) : 'ASC',\n        });\n        setAnchorEl(null);\n    };\n\n    const buttonLabel = translate(label, {\n        field: translateLabel({\n            resource,\n            source: sort.field,\n        }),\n        order: translate(`ra.sort.${sort.order}`),\n        _: label,\n    });\n\n    return (\n        <>\n            {isXSmall ? (\n                <Tooltip title={buttonLabel}>\n                    <IconButton\n                        aria-label={buttonLabel}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        size=\"large\"\n                    >\n                        {icon}\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <StyledButton\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"primary\"\n                    onClick={handleClick}\n                    startIcon={icon}\n                    endIcon={<ArrowDropDownIcon />}\n                    size=\"small\"\n                >\n                    {buttonLabel}\n                </StyledButton>\n            )}\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {fields.map(field => (\n                    <MenuItem\n                        onClick={handleChangeSort}\n                        data-sort={field}\n                        key={field}\n                    >\n                        {translateLabel({\n                            resource,\n                            source: field,\n                        })}{' '}\n                        {translate(\n                            `ra.sort.${\n                                sort.field === field\n                                    ? inverseOrder(sort.order)\n                                    : 'ASC'\n                            }`\n                        )}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </>\n    );\n};\n\nconst defaultIcon = <SortIcon />;\n\nconst inverseOrder = (sort: string) => (sort === 'ASC' ? 'DESC' : 'ASC');\n\nconst arePropsEqual = (prevProps, nextProps) =>\n    shallowEqual(prevProps.fields, nextProps.fields);\n\nexport interface SortButtonProps {\n    fields: string[];\n    icon?: ReactElement;\n    label?: string;\n    resource?: string;\n}\n\nconst StyledButton = styled(Button, {\n    name: 'RaSortButton',\n    overridesResolver: (props, styles) => styles.root,\n})({\n    '&.MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n    '& .MuiButton-endIcon': { ml: 0 },\n});\n\nexport default memo(SortButton, arePropsEqual);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}