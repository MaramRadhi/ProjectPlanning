{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar _a;\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo } from 'react';\nimport get from 'lodash/get';\nimport Chip from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nexport var ChipField = memo(function (props) {\n  var className = props.className,\n    source = props.source,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"className\", \"source\", \"emptyText\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  var translate = useTranslate();\n  if (value == null && emptyText) {\n    return React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    }));\n  }\n  return React.createElement(StyledChip, __assign({\n    className: clsx(ChipFieldClasses.chip, className),\n    label: value\n  }, sanitizeFieldRestProps(rest)));\n});\nChipField.propTypes = __assign(__assign({}, ChipField.propTypes), fieldPropTypes);\nChipField.displayName = 'ChipField';\nvar PREFIX = 'RaChipField';\nvar ChipFieldClasses = {\n  chip: \"\".concat(PREFIX, \"-chip\")\n};\nvar StyledChip = styled(Chip, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})((_a = {}, _a[\"&.\".concat(ChipFieldClasses.chip)] = {\n  margin: 4,\n  cursor: 'inherit'\n}, _a));","map":{"version":3,"names":["React","styled","memo","get","Chip","Typography","clsx","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","ChipField","props","className","source","emptyText","rest","__rest","record","value","translate","createElement","__assign","component","variant","_","StyledChip","ChipFieldClasses","chip","label","propTypes","displayName","PREFIX","concat","name","overridesResolver","styles","root","_a","margin","cursor"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/field/ChipField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { memo, FC } from 'react';\nimport get from 'lodash/get';\nimport Chip, { ChipProps } from '@mui/material/Chip';\nimport Typography from '@mui/material/Typography';\nimport clsx from 'clsx';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\nexport const ChipField: FC<ChipFieldProps> = memo(props => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n    const translate = useTranslate();\n\n    if (value == null && emptyText) {\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        );\n    }\n\n    return (\n        <StyledChip\n            className={clsx(ChipFieldClasses.chip, className)}\n            label={value}\n            {...sanitizeFieldRestProps(rest)}\n        />\n    );\n});\n\nChipField.propTypes = {\n    // @ts-ignore\n    ...ChipField.propTypes,\n    ...fieldPropTypes,\n};\n\nChipField.displayName = 'ChipField';\n\nexport interface ChipFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<ChipProps, 'label'> {}\n\nconst PREFIX = 'RaChipField';\n\nconst ChipFieldClasses = {\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledChip = styled(Chip, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    [`&.${ChipFieldClasses.chip}`]: { margin: 4, cursor: 'inherit' },\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,IAAI,QAAY,OAAO;AAChC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,IAAmB,MAAM,oBAAoB;AACpD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,SAAS;AAExD,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+CC,cAAc,QAAQ,SAAS;AAE9E,OAAO,IAAMC,SAAS,GAAuBT,IAAI,CAAC,UAAAU,KAAK;EAC3C,IAAAC,SAAS,GAAiCD,KAAK,CAAAC,SAAtC;IAAEC,MAAM,GAAyBF,KAAK,CAAAE,MAA9B;IAAEC,SAAS,GAAcH,KAAK,CAAAG,SAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKL,KAAK,EAAjD,oCAAyC,CAAF;EAC7C,IAAMM,MAAM,GAAGX,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAMO,KAAK,GAAGhB,GAAG,CAACe,MAAM,EAAEJ,MAAM,CAAC;EACjC,IAAMM,SAAS,GAAGZ,YAAY,EAAE;EAEhC,IAAIW,KAAK,IAAI,IAAI,IAAIJ,SAAS,EAAE;IAC5B,OACIf,KAAA,CAAAqB,aAAA,CAAChB,UAAU,EAAAiB,QAAA;MACPC,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfX,SAAS,EAAEA;IAAS,GAChBJ,sBAAsB,CAACO,IAAI,CAAC,GAE/BD,SAAS,IAAIK,SAAS,CAACL,SAAS,EAAE;MAAEU,CAAC,EAAEV;IAAS,CAAE,CAAC,CAC3C;;EAIrB,OACIf,KAAA,CAAAqB,aAAA,CAACK,UAAU,EAAAJ,QAAA;IACPT,SAAS,EAAEP,IAAI,CAACqB,gBAAgB,CAACC,IAAI,EAAEf,SAAS,CAAC;IACjDgB,KAAK,EAAEV;EAAK,GACRV,sBAAsB,CAACO,IAAI,CAAC,EAClC;AAEV,CAAC,CAAC;AAEFL,SAAS,CAACmB,SAAS,GAAAR,QAAA,CAAAA,QAAA,KAEZX,SAAS,CAACmB,SAAS,GACnBpB,cAAc,CACpB;AAEDC,SAAS,CAACoB,WAAW,GAAG,WAAW;AAOnC,IAAMC,MAAM,GAAG,aAAa;AAE5B,IAAML,gBAAgB,GAAG;EACrBC,IAAI,EAAE,GAAAK,MAAA,CAAGD,MAAM;CAClB;AAED,IAAMN,UAAU,GAAGzB,MAAM,CAACG,IAAI,EAAE;EAC5B8B,IAAI,EAAEF,MAAM;EACZG,iBAAiB,EAAE,SAAAA,CAACvB,KAAK,EAAEwB,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,EAAAC,EAAA,OACEA,EAAA,CAAC,KAAAL,MAAA,CAAKN,gBAAgB,CAACC,IAAI,CAAE,IAAG;EAAEW,MAAM,EAAE,CAAC;EAAEC,MAAM,EAAE;AAAS,CAAE,E,IAClE"},"metadata":{},"sourceType":"module","externalDependencies":[]}