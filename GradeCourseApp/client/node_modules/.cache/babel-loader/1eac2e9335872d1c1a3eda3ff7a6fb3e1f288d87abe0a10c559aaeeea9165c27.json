{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useResourceDefinition, useRecordContext } from 'ra-core';\nimport { EditButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n/**\n * Action Toolbar for the Show view\n *\n * Internal component. If you want to add or remove actions for a Show view,\n * write your own ShowActions Component. Then, in the <Show> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, ShowButton, Show } from 'react-admin';\n *\n *     const PostShowActions = () => (\n *         <TopToolbar>\n *             <ShowButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostShow = (props) => (\n *         <Show actions={<PostShowActions />} {...props}>\n *             ...\n *         </Show>\n *     );\n */\nexport var ShowActions = function (props) {\n  var record = useRecordContext(props);\n  var hasEdit = useResourceDefinition().hasEdit;\n  if (!hasEdit) {\n    return null;\n  }\n  return React.createElement(TopToolbar, {\n    className: props.className\n  }, React.createElement(EditButton, {\n    record: record\n  }));\n};\nShowActions.propTypes = {\n  className: PropTypes.string,\n  record: PropTypes.any\n};","map":{"version":3,"names":["React","PropTypes","useResourceDefinition","useRecordContext","EditButton","TopToolbar","ShowActions","props","record","hasEdit","createElement","className","propTypes","string","any"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/detail/ShowActions.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { RaRecord, useResourceDefinition, useRecordContext } from 'ra-core';\n\nimport { EditButton } from '../button';\nimport TopToolbar from '../layout/TopToolbar';\n\n/**\n * Action Toolbar for the Show view\n *\n * Internal component. If you want to add or remove actions for a Show view,\n * write your own ShowActions Component. Then, in the <Show> component,\n * use it in the `actions` prop to pass a custom component.\n *\n * @example\n *     import Button from '@mui/material/Button';\n *     import { TopToolbar, ShowButton, Show } from 'react-admin';\n *\n *     const PostShowActions = () => (\n *         <TopToolbar>\n *             <ShowButton />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </TopToolbar>\n *     );\n *\n *     export const PostShow = (props) => (\n *         <Show actions={<PostShowActions />} {...props}>\n *             ...\n *         </Show>\n *     );\n */\nexport const ShowActions = (props: ShowActionsProps) => {\n    const record = useRecordContext(props);\n    const { hasEdit } = useResourceDefinition();\n    if (!hasEdit) {\n        return null;\n    }\n    return (\n        <TopToolbar className={props.className}>\n            <EditButton record={record} />\n        </TopToolbar>\n    );\n};\n\nexport interface ShowActionsProps {\n    className?: string;\n    record?: RaRecord;\n}\n\nShowActions.propTypes = {\n    className: PropTypes.string,\n    record: PropTypes.any,\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,SAAmBC,qBAAqB,EAAEC,gBAAgB,QAAQ,SAAS;AAE3E,SAASC,UAAU,QAAQ,WAAW;AACtC,OAAOC,UAAU,MAAM,sBAAsB;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,WAAW,GAAG,SAAAA,CAACC,KAAuB;EAC/C,IAAMC,MAAM,GAAGL,gBAAgB,CAACI,KAAK,CAAC;EAC9B,IAAAE,OAAO,GAAKP,qBAAqB,EAAE,CAAAO,OAA5B;EACf,IAAI,CAACA,OAAO,EAAE;IACV,OAAO,IAAI;;EAEf,OACIT,KAAA,CAAAU,aAAA,CAACL,UAAU;IAACM,SAAS,EAAEJ,KAAK,CAACI;EAAS,GAClCX,KAAA,CAAAU,aAAA,CAACN,UAAU;IAACI,MAAM,EAAEA;EAAM,EAAI,CACrB;AAErB,CAAC;AAODF,WAAW,CAACM,SAAS,GAAG;EACpBD,SAAS,EAAEV,SAAS,CAACY,MAAM;EAC3BL,MAAM,EAAEP,SAAS,CAACa;CACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}