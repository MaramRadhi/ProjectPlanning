{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The create parameters { data }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.data The record to create, e.g. { title: 'hello, world' }\n *\n * @returns The current mutation state. Destructure as [create, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { isLoading: false, isIdle: true }]\n * - start:   [create, { isLoading: true }]\n * - success: [create, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [create, { error: [error from response], isLoading: false, isError: true }]\n *\n * The create() function must be called with a resource and a parameter object: create(resource, { data, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the create callback\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', { data: like })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate('likes', { data: like });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => create()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [create, { data }] = useCreate<Product>('products', { data: product });\n *                    \\-- data is Product\n */\nexport var useCreate = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var paramsRef = useRef(params);\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.resource,\n      callTimeResource = _c === void 0 ? resource : _c,\n      _d = _b.data,\n      callTimeData = _d === void 0 ? paramsRef.current.data : _d,\n      _e = _b.meta,\n      callTimeMeta = _e === void 0 ? paramsRef.current.meta : _e;\n    return dataProvider.create(callTimeResource, {\n      data: callTimeData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, options), {\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      var _a = variables.resource,\n        callTimeResource = _a === void 0 ? resource : _a;\n      queryClient.setQueryData([callTimeResource, 'getOne', {\n        id: String(data.id)\n      }], data);\n      if (options.onSuccess) {\n        options.onSuccess(data, variables, context);\n      }\n      // call-time success callback is executed by react-query\n    }\n  }));\n\n  var create = function (callTimeResource, callTimeParams, createOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (createOptions === void 0) {\n      createOptions = {};\n    }\n    var _a = createOptions.returnPromise,\n      returnPromise = _a === void 0 ? options.returnPromise : _a,\n      reactCreateOptions = __rest(createOptions, [\"returnPromise\"]);\n    if (returnPromise) {\n      return mutation.mutateAsync(__assign({\n        resource: callTimeResource\n      }, callTimeParams), createOptions);\n    }\n    mutation.mutate(__assign({\n      resource: callTimeResource\n    }, callTimeParams), reactCreateOptions);\n  };\n  return [useEvent(create), mutation];\n};","map":{"version":3,"names":["useRef","useMutation","useQueryClient","useDataProvider","useEvent","useCreate","resource","params","options","dataProvider","queryClient","paramsRef","mutation","_a","_b","_c","callTimeResource","_d","data","callTimeData","current","_e","meta","callTimeMeta","create","then","__assign","onSuccess","variables","context","setQueryData","id","String","callTimeParams","createOptions","returnPromise","reactCreateOptions","__rest","mutateAsync","mutate"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/dataProvider/useCreate.ts"],"sourcesContent":["import { useRef } from 'react';\nimport {\n    useMutation,\n    UseMutationOptions,\n    UseMutationResult,\n    useQueryClient,\n    MutateOptions,\n} from 'react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport { RaRecord, CreateParams } from '../types';\nimport { useEvent } from '../util';\n\n/**\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The create parameters { data }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n *\n * @typedef Params\n * @prop params.data The record to create, e.g. { title: 'hello, world' }\n *\n * @returns The current mutation state. Destructure as [create, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [create, { isLoading: false, isIdle: true }]\n * - start:   [create, { isLoading: true }]\n * - success: [create, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [create, { error: [error from response], isLoading: false, isError: true }]\n *\n * The create() function must be called with a resource and a parameter object: create(resource, { data, meta }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the create callback\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate();\n *     const handleClick = () => {\n *         create('likes', { data: like })\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Like</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useCreate, useRecordContext } from 'react-admin';\n *\n * const LikeButton = () => {\n *     const record = useRecordContext();\n *     const like = { postId: record.id };\n *     const [create, { isLoading, error }] = useCreate('likes', { data: like });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => create()}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [create, { data }] = useCreate<Product>('products', { data: product });\n *                    \\-- data is Product\n */\nexport const useCreate = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n>(\n    resource?: string,\n    params: Partial<CreateParams<Partial<RecordType>>> = {},\n    options: UseCreateOptions<RecordType, MutationError> = {}\n): UseCreateResult<RecordType, boolean, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const paramsRef = useRef<Partial<CreateParams<Partial<RecordType>>>>(\n        params\n    );\n\n    const mutation = useMutation<\n        RecordType,\n        MutationError,\n        Partial<UseCreateMutateParams<RecordType>>\n    >(\n        ({\n            resource: callTimeResource = resource,\n            data: callTimeData = paramsRef.current.data,\n            meta: callTimeMeta = paramsRef.current.meta,\n        } = {}) =>\n            dataProvider\n                .create<RecordType>(callTimeResource, {\n                    data: callTimeData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data),\n        {\n            ...options,\n            onSuccess: (\n                data: RecordType,\n                variables: Partial<UseCreateMutateParams<RecordType>> = {},\n                context: unknown\n            ) => {\n                const { resource: callTimeResource = resource } = variables;\n                queryClient.setQueryData(\n                    [callTimeResource, 'getOne', { id: String(data.id) }],\n                    data\n                );\n\n                if (options.onSuccess) {\n                    options.onSuccess(data, variables, context);\n                }\n                // call-time success callback is executed by react-query\n            },\n        }\n    );\n\n    const create = (\n        callTimeResource: string = resource,\n        callTimeParams: Partial<CreateParams<RecordType>> = {},\n        createOptions: MutateOptions<\n            RecordType,\n            MutationError,\n            Partial<UseCreateMutateParams<RecordType>>,\n            unknown\n        > & { returnPromise?: boolean } = {}\n    ) => {\n        const {\n            returnPromise = options.returnPromise,\n            ...reactCreateOptions\n        } = createOptions;\n        if (returnPromise) {\n            return mutation.mutateAsync(\n                { resource: callTimeResource, ...callTimeParams },\n                createOptions\n            );\n        }\n        mutation.mutate(\n            { resource: callTimeResource, ...callTimeParams },\n            reactCreateOptions\n        );\n    };\n\n    return [useEvent(create), mutation];\n};\n\nexport interface UseCreateMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    data?: Partial<RecordType>;\n    meta?: any;\n}\n\nexport type UseCreateOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = UseMutationOptions<\n    RecordType,\n    MutationError,\n    Partial<UseCreateMutateParams<RecordType>>\n> & { returnPromise?: boolean };\n\nexport type UseCreateResult<\n    RecordType extends RaRecord = any,\n    TReturnPromise extends boolean = boolean,\n    MutationError = unknown\n> = [\n    (\n        resource?: string,\n        params?: Partial<CreateParams<Partial<RecordType>>>,\n        options?: MutateOptions<\n            RecordType,\n            MutationError,\n            Partial<UseCreateMutateParams<RecordType>>,\n            unknown\n        > & { returnPromise?: TReturnPromise }\n    ) => Promise<TReturnPromise extends true ? RecordType : void>,\n    UseMutationResult<\n        RecordType,\n        MutationError,\n        Partial<UseCreateMutateParams<RecordType>>,\n        unknown\n    >\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}