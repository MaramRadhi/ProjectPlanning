{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { useChoices, useRecordContext, useTranslate } from 'ra-core';\nimport { Typography } from '@mui/material';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nexport var SelectField = memo(function (props) {\n  var className = props.className,\n    emptyText = props.emptyText,\n    source = props.source,\n    choices = props.choices,\n    optionValue = props.optionValue,\n    optionText = props.optionText,\n    translateChoice = props.translateChoice,\n    rest = __rest(props, [\"className\", \"emptyText\", \"source\", \"choices\", \"optionValue\", \"optionText\", \"translateChoice\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  var _a = useChoices({\n      optionText: optionText,\n      optionValue: optionValue,\n      translateChoice: translateChoice\n    }),\n    getChoiceText = _a.getChoiceText,\n    getChoiceValue = _a.getChoiceValue;\n  var translate = useTranslate();\n  var choice = choices.find(function (choice) {\n    return getChoiceValue(choice) === value;\n  });\n  if (!choice) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var choiceText = getChoiceText(choice);\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body2\",\n    className: className\n  }, sanitizeFieldRestProps(rest)), choiceText);\n});\nSelectField.defaultProps = {\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nSelectField.propTypes = __assign(__assign(__assign({}, Typography.propTypes), fieldPropTypes), {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  translateChoice: PropTypes.bool\n});\nSelectField.displayName = 'SelectField';","map":{"version":3,"names":["React","memo","PropTypes","get","useChoices","useRecordContext","useTranslate","Typography","sanitizeFieldRestProps","fieldPropTypes","SelectField","props","className","emptyText","source","choices","optionValue","optionText","translateChoice","rest","__rest","record","value","_a","getChoiceText","getChoiceValue","translate","choice","find","createElement","__assign","component","variant","_","choiceText","defaultProps","propTypes","arrayOf","object","isRequired","oneOfType","string","func","element","bool","displayName"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/field/SelectField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, FC } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport {\n    ChoicesProps,\n    useChoices,\n    useRecordContext,\n    useTranslate,\n} from 'ra-core';\nimport { Typography, TypographyProps } from '@mui/material';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property as the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<Chip>{record.first_name} {record.last_name}</Chip>)\n * };\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nexport const SelectField: FC<SelectFieldProps> = memo(props => {\n    const {\n        className,\n        emptyText,\n        source,\n        choices,\n        optionValue,\n        optionText,\n        translateChoice,\n        ...rest\n    } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n    const { getChoiceText, getChoiceValue } = useChoices({\n        optionText,\n        optionValue,\n        translateChoice,\n    });\n    const translate = useTranslate();\n\n    const choice = choices.find(choice => getChoiceValue(choice) === value);\n\n    if (!choice) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    let choiceText = getChoiceText(choice);\n\n    return (\n        <Typography\n            component=\"span\"\n            variant=\"body2\"\n            className={className}\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {choiceText}\n        </Typography>\n    );\n});\n\nSelectField.defaultProps = {\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n};\n\nSelectField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]),\n    optionValue: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nexport interface SelectFieldProps\n    extends ChoicesProps,\n        PublicFieldProps,\n        InjectedFieldProps,\n        Omit<TypographyProps, 'textAlign'> {}\n\nSelectField.displayName = 'SelectField';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}