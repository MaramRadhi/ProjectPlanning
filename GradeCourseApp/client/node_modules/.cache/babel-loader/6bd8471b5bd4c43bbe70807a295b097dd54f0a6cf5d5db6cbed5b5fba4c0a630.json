{"ast":null,"code":"import * as React from 'react';\nimport { ListContext } from './ListContext';\nimport { ListFilterContext, usePickFilterContext } from './ListFilterContext';\nimport { ListSortContext, usePickSortContext } from './ListSortContext';\nimport { ListPaginationContext, usePickPaginationContext } from './ListPaginationContext';\n/**\n * Create a List Context and several thematic List subcontext.\n *\n * Allows children to subscribe to part of the ListContext, and bail out of\n * rendering when some parts of the context that they don't depend on change\n * (because unfortunately React doesn't allow to use context selectors yet).\n *\n * @example\n *\n * const MyList = (props) => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContextProvider value={controllerProps}>\n *             <MyListView>\n *         </ListContextProvider>\n *     );\n * };\n *\n * const MyListView = () => {\n *     const { data, filterValues, setFilters } = useListContext();\n *     // or, to rerender only when filters change but not data\n *     const { filterValues, setFilters } = useListFilterContext();\n * }\n *\n * @see ListContext\n * @see ListFilterContext\n */\nexport var ListContextProvider = function (_a) {\n  var value = _a.value,\n    children = _a.children;\n  return React.createElement(ListContext.Provider, {\n    value: value\n  }, React.createElement(ListFilterContext.Provider, {\n    value: usePickFilterContext(value)\n  }, React.createElement(ListSortContext.Provider, {\n    value: usePickSortContext(value)\n  }, React.createElement(ListPaginationContext.Provider, {\n    value: usePickPaginationContext(value)\n  }, children))));\n};","map":{"version":3,"names":["React","ListContext","ListFilterContext","usePickFilterContext","ListSortContext","usePickSortContext","ListPaginationContext","usePickPaginationContext","ListContextProvider","_a","value","children","createElement","Provider"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/controller/list/ListContextProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ListContext } from './ListContext';\nimport { ListFilterContext, usePickFilterContext } from './ListFilterContext';\nimport { ListSortContext, usePickSortContext } from './ListSortContext';\nimport {\n    ListPaginationContext,\n    usePickPaginationContext,\n} from './ListPaginationContext';\nimport { ListControllerResult } from './useListController';\n\n/**\n * Create a List Context and several thematic List subcontext.\n *\n * Allows children to subscribe to part of the ListContext, and bail out of\n * rendering when some parts of the context that they don't depend on change\n * (because unfortunately React doesn't allow to use context selectors yet).\n *\n * @example\n *\n * const MyList = (props) => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListContextProvider value={controllerProps}>\n *             <MyListView>\n *         </ListContextProvider>\n *     );\n * };\n *\n * const MyListView = () => {\n *     const { data, filterValues, setFilters } = useListContext();\n *     // or, to rerender only when filters change but not data\n *     const { filterValues, setFilters } = useListFilterContext();\n * }\n *\n * @see ListContext\n * @see ListFilterContext\n */\nexport const ListContextProvider = ({\n    value,\n    children,\n}: {\n    value: ListControllerResult;\n    children: React.ReactNode;\n}) => (\n    <ListContext.Provider value={value}>\n        <ListFilterContext.Provider value={usePickFilterContext(value)}>\n            <ListSortContext.Provider value={usePickSortContext(value)}>\n                <ListPaginationContext.Provider\n                    value={usePickPaginationContext(value)}\n                >\n                    {children}\n                </ListPaginationContext.Provider>\n            </ListSortContext.Provider>\n        </ListFilterContext.Provider>\n    </ListContext.Provider>\n);\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,iBAAiB,EAAEC,oBAAoB,QAAQ,qBAAqB;AAC7E,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,mBAAmB;AACvE,SACIC,qBAAqB,EACrBC,wBAAwB,QACrB,yBAAyB;AAGhC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CAACC,EAMnC;MALGC,KAAK,GAAAD,EAAA,CAAAC,KAAA;IACLC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;EAIN,OACFX,KAAA,CAAAY,aAAA,CAACX,WAAW,CAACY,QAAQ;IAACH,KAAK,EAAEA;EAAK,GAC9BV,KAAA,CAAAY,aAAA,CAACV,iBAAiB,CAACW,QAAQ;IAACH,KAAK,EAAEP,oBAAoB,CAACO,KAAK;EAAC,GAC1DV,KAAA,CAAAY,aAAA,CAACR,eAAe,CAACS,QAAQ;IAACH,KAAK,EAAEL,kBAAkB,CAACK,KAAK;EAAC,GACtDV,KAAA,CAAAY,aAAA,CAACN,qBAAqB,CAACO,QAAQ;IAC3BH,KAAK,EAAEH,wBAAwB,CAACG,KAAK;EAAC,GAErCC,QAAQ,CACoB,CACV,CACF,CACV;AAXrB,CAYL"},"metadata":{},"sourceType":"module","externalDependencies":[]}