{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { LinearProgress, styled } from '@mui/material';\nimport { cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useResourceContext, RecordContextProvider, ComponentPropType, useCreatePath } from 'ra-core';\nimport { Link } from '../Link';\n/**\n * Iterator component to be used to display a list of entities, using a single field\n *\n * @example Display all the books by the current author\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, it includes a link to the <Edit> page of the related record\n * (`/books/:id` in the previous example).\n *\n * Set the linkType prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType=\"show\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * You can also prevent `<SingleFieldList>` from adding link to children by setting\n * `linkType` to false.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType={false}>\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n */\nexport var SingleFieldList = function (props) {\n  var className = props.className,\n    children = props.children,\n    _a = props.linkType,\n    linkType = _a === void 0 ? 'edit' : _a,\n    _b = props.component,\n    Component = _b === void 0 ? Root : _b,\n    rest = __rest(props, [\"className\", \"children\", \"linkType\", \"component\"]);\n  var _c = useListContext(props),\n    data = _c.data,\n    isLoading = _c.isLoading;\n  var resource = useResourceContext(props);\n  var createPath = useCreatePath();\n  if (isLoading === true) {\n    return React.createElement(LinearProgress, null);\n  }\n  return React.createElement(Component, __assign({\n    className: className\n  }, sanitizeListRestProps(rest)), data.map(function (record, rowIndex) {\n    var _a, _b;\n    var resourceLinkPath = !linkType ? false : createPath({\n      resource: resource,\n      type: linkType,\n      id: record.id\n    });\n    if (resourceLinkPath) {\n      return React.createElement(RecordContextProvider, {\n        value: record,\n        key: (_a = record.id) !== null && _a !== void 0 ? _a : \"row\".concat(rowIndex)\n      }, React.createElement(Link, {\n        className: SingleFieldListClasses.link,\n        to: resourceLinkPath,\n        onClick: stopPropagation\n      }, cloneElement(Children.only(children), {\n        record: record,\n        resource: resource,\n        // Workaround to force ChipField to be clickable\n        onClick: handleClick\n      })));\n    }\n    return React.createElement(RecordContextProvider, {\n      value: record,\n      key: (_b = record.id) !== null && _b !== void 0 ? _b : \"row\".concat(rowIndex)\n    }, children);\n  }));\n};\nSingleFieldList.propTypes = {\n  children: PropTypes.element.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  component: ComponentPropType,\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  // @ts-ignore\n  linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  resource: PropTypes.string,\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n};\nvar PREFIX = 'RaSingleFieldList';\nexport var SingleFieldListClasses = {\n  link: \"\".concat(PREFIX, \"-link\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: theme.spacing(-1),\n    marginBottom: theme.spacing(-1)\n  }, _b[\"& .\".concat(SingleFieldListClasses.link)] = {\n    textDecoration: 'none'\n  }, _b;\n});\n// useful to prevent click bubbling in a datagrid with rowClick\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from MUI.\n// The MUI Chip requires an onClick handler to behave like a clickable element.\nvar handleClick = function () {};","map":{"version":3,"names":["React","LinearProgress","styled","cloneElement","Children","PropTypes","sanitizeListRestProps","useListContext","useResourceContext","RecordContextProvider","ComponentPropType","useCreatePath","Link","SingleFieldList","props","className","children","_a","linkType","_b","component","Component","Root","rest","__rest","_c","data","isLoading","resource","createPath","createElement","__assign","map","record","rowIndex","resourceLinkPath","type","id","value","key","concat","SingleFieldListClasses","link","to","onClick","stopPropagation","only","handleClick","propTypes","element","isRequired","classes","object","string","any","ids","array","oneOfType","bool","sx","arrayOf","func","PREFIX","name","overridesResolver","styles","root","theme","display","flexWrap","marginTop","spacing","marginBottom","textDecoration","e"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/list/SingleFieldList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { LinearProgress, styled, SxProps } from '@mui/material';\nimport {\n    cloneElement,\n    Children,\n    HtmlHTMLAttributes,\n    ComponentType,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    sanitizeListRestProps,\n    useListContext,\n    useResourceContext,\n    RaRecord,\n    RecordContextProvider,\n    ComponentPropType,\n    useCreatePath,\n} from 'ra-core';\n\nimport { Link } from '../Link';\n\n/**\n * Iterator component to be used to display a list of entities, using a single field\n *\n * @example Display all the books by the current author\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, it includes a link to the <Edit> page of the related record\n * (`/books/:id` in the previous example).\n *\n * Set the linkType prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType=\"show\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * You can also prevent `<SingleFieldList>` from adding link to children by setting\n * `linkType` to false.\n *\n * @example\n * <ReferenceManyField reference=\"books\" target=\"author_id\" linkType={false}>\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n */\nexport const SingleFieldList = (props: SingleFieldListProps) => {\n    const {\n        className,\n        children,\n        linkType = 'edit',\n        component: Component = Root,\n        ...rest\n    } = props;\n    const { data, isLoading } = useListContext(props);\n    const resource = useResourceContext(props);\n    const createPath = useCreatePath();\n\n    if (isLoading === true) {\n        return <LinearProgress />;\n    }\n\n    return (\n        <Component className={className} {...sanitizeListRestProps(rest)}>\n            {data.map((record, rowIndex) => {\n                const resourceLinkPath = !linkType\n                    ? false\n                    : createPath({\n                          resource,\n                          type: linkType,\n                          id: record.id,\n                      });\n\n                if (resourceLinkPath) {\n                    return (\n                        <RecordContextProvider\n                            value={record}\n                            key={record.id ?? `row${rowIndex}`}\n                        >\n                            <Link\n                                className={SingleFieldListClasses.link}\n                                to={resourceLinkPath}\n                                onClick={stopPropagation}\n                            >\n                                {cloneElement(Children.only(children), {\n                                    record,\n                                    resource,\n                                    // Workaround to force ChipField to be clickable\n                                    onClick: handleClick,\n                                })}\n                            </Link>\n                        </RecordContextProvider>\n                    );\n                }\n\n                return (\n                    <RecordContextProvider\n                        value={record}\n                        key={record.id ?? `row${rowIndex}`}\n                    >\n                        {children}\n                    </RecordContextProvider>\n                );\n            })}\n        </Component>\n    );\n};\n\nSingleFieldList.propTypes = {\n    children: PropTypes.element.isRequired,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: ComponentPropType,\n    data: PropTypes.any,\n    ids: PropTypes.array,\n    // @ts-ignore\n    linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    resource: PropTypes.string,\n    sx: PropTypes.oneOfType([\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([\n                PropTypes.func,\n                PropTypes.object,\n                PropTypes.bool,\n            ])\n        ),\n        PropTypes.func,\n        PropTypes.object,\n    ]),\n};\n\nexport interface SingleFieldListProps<RecordType extends RaRecord = any>\n    extends HtmlHTMLAttributes<HTMLDivElement> {\n    className?: string;\n\n    component?: string | ComponentType<any>;\n    linkType?: string | false;\n    children: React.ReactElement;\n    // can be injected when using the component without context\n    data?: RecordType[];\n    total?: number;\n    loaded?: boolean;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaSingleFieldList';\n\nexport const SingleFieldListClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: theme.spacing(-1),\n    marginBottom: theme.spacing(-1),\n\n    [`& .${SingleFieldListClasses.link}`]: {\n        textDecoration: 'none',\n    },\n}));\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from MUI.\n// The MUI Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}