{"ast":null,"code":"import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\n/*\n * This hook updates the input default value whenever the record changes\n * It applies either the record value if it has one or the defaultValue if it was specified\n */\nexport var useApplyInputDefaultValues = function (props) {\n  var defaultValue = props.defaultValue,\n    source = props.source;\n  var record = useRecordContext(props);\n  var _a = useFormContext(),\n    getValues = _a.getValues,\n    resetField = _a.resetField,\n    getFieldState = _a.getFieldState,\n    formState = _a.formState;\n  var recordValue = get(record, source);\n  var formValue = get(getValues(), source);\n  var isDirty = getFieldState(source, formState).isDirty;\n  useEffect(function () {\n    if (defaultValue == null) return;\n    if (formValue == null && recordValue == null && !isDirty) {\n      // special case for ArrayInput: since we use get(record, source),\n      // if source is like foo.23.bar, this effect will run.\n      // but we only want to set the default value for the subfield bar\n      // if the record actually has a value for foo.23\n      var pathContainsIndex = source.split('.').some(function (pathPart) {\n        return numericRegex.test(pathPart);\n      });\n      if (pathContainsIndex) {\n        var parentPath = source.split('.').slice(0, -1).join('.');\n        var parentValue = get(getValues(), parentPath);\n        if (parentValue == null) {\n          // the parent is undefined, so we don't want to set the default value\n          return;\n        }\n      }\n      resetField(source, {\n        defaultValue: defaultValue\n      });\n    }\n  });\n};\nvar numericRegex = /^\\d+$/;","map":{"version":3,"names":["useEffect","useFormContext","get","useRecordContext","useApplyInputDefaultValues","props","defaultValue","source","record","_a","getValues","resetField","getFieldState","formState","recordValue","formValue","isDirty","pathContainsIndex","split","some","pathPart","numericRegex","test","parentPath","slice","join","parentValue"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/form/useApplyInputDefaultValues.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\nimport { InputProps } from './useInput';\n\n/*\n * This hook updates the input default value whenever the record changes\n * It applies either the record value if it has one or the defaultValue if it was specified\n */\nexport const useApplyInputDefaultValues = (\n    props: Partial<InputProps> & { source: string }\n) => {\n    const { defaultValue, source } = props;\n    const record = useRecordContext(props);\n    const {\n        getValues,\n        resetField,\n        getFieldState,\n        formState,\n    } = useFormContext();\n    const recordValue = get(record, source);\n    const formValue = get(getValues(), source);\n    const { isDirty } = getFieldState(source, formState);\n\n    useEffect(() => {\n        if (defaultValue == null) return;\n        if (formValue == null && recordValue == null && !isDirty) {\n            // special case for ArrayInput: since we use get(record, source),\n            // if source is like foo.23.bar, this effect will run.\n            // but we only want to set the default value for the subfield bar\n            // if the record actually has a value for foo.23\n            const pathContainsIndex = source\n                .split('.')\n                .some(pathPart => numericRegex.test(pathPart));\n            if (pathContainsIndex) {\n                const parentPath = source.split('.').slice(0, -1).join('.');\n                const parentValue = get(getValues(), parentPath);\n                if (parentValue == null) {\n                    // the parent is undefined, so we don't want to set the default value\n                    return;\n                }\n            }\n            resetField(source, { defaultValue });\n        }\n    });\n};\n\nconst numericRegex = /^\\d+$/;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,QAAQ,iBAAiB;AAChD,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAASC,gBAAgB,QAAQ,eAAe;AAGhD;;;;AAIA,OAAO,IAAMC,0BAA0B,GAAG,SAAAA,CACtCC,KAA+C;EAEvC,IAAAC,YAAY,GAAaD,KAAK,CAAAC,YAAlB;IAAEC,MAAM,GAAKF,KAAK,CAAAE,MAAV;EAC5B,IAAMC,MAAM,GAAGL,gBAAgB,CAACE,KAAK,CAAC;EAChC,IAAAI,EAAA,GAKFR,cAAc,EAAE;IAJhBS,SAAS,GAAAD,EAAA,CAAAC,SAAA;IACTC,UAAU,GAAAF,EAAA,CAAAE,UAAA;IACVC,aAAa,GAAAH,EAAA,CAAAG,aAAA;IACbC,SAAS,GAAAJ,EAAA,CAAAI,SACO;EACpB,IAAMC,WAAW,GAAGZ,GAAG,CAACM,MAAM,EAAED,MAAM,CAAC;EACvC,IAAMQ,SAAS,GAAGb,GAAG,CAACQ,SAAS,EAAE,EAAEH,MAAM,CAAC;EAClC,IAAAS,OAAO,GAAKJ,aAAa,CAACL,MAAM,EAAEM,SAAS,CAAC,CAAAG,OAArC;EAEfhB,SAAS,CAAC;IACN,IAAIM,YAAY,IAAI,IAAI,EAAE;IAC1B,IAAIS,SAAS,IAAI,IAAI,IAAID,WAAW,IAAI,IAAI,IAAI,CAACE,OAAO,EAAE;MACtD;MACA;MACA;MACA;MACA,IAAMC,iBAAiB,GAAGV,MAAM,CAC3BW,KAAK,CAAC,GAAG,CAAC,CACVC,IAAI,CAAC,UAAAC,QAAQ;QAAI,OAAAC,YAAY,CAACC,IAAI,CAACF,QAAQ,CAAC;MAA3B,CAA2B,CAAC;MAClD,IAAIH,iBAAiB,EAAE;QACnB,IAAMM,UAAU,GAAGhB,MAAM,CAACW,KAAK,CAAC,GAAG,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;QAC3D,IAAMC,WAAW,GAAGxB,GAAG,CAACQ,SAAS,EAAE,EAAEa,UAAU,CAAC;QAChD,IAAIG,WAAW,IAAI,IAAI,EAAE;UACrB;UACA;;;MAGRf,UAAU,CAACJ,MAAM,EAAE;QAAED,YAAY,EAAAA;MAAA,CAAE,CAAC;;EAE5C,CAAC,CAAC;AACN,CAAC;AAED,IAAMe,YAAY,GAAG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}