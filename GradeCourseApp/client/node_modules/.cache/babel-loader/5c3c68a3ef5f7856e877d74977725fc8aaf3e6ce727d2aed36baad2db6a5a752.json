{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableBody } from '@mui/material';\nimport clsx from 'clsx';\nimport { DatagridClasses } from './useDatagridStyles';\nimport DatagridRow, { PureDatagridRow } from './DatagridRow';\nvar DatagridBody = React.forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    data = _a.data,\n    expand = _a.expand,\n    hasBulkActions = _a.hasBulkActions,\n    hover = _a.hover,\n    onToggleItem = _a.onToggleItem,\n    resource = _a.resource,\n    row = _a.row,\n    rowClick = _a.rowClick,\n    rowStyle = _a.rowStyle,\n    selectedIds = _a.selectedIds,\n    isRowSelectable = _a.isRowSelectable,\n    rest = __rest(_a, [\"children\", \"className\", \"data\", \"expand\", \"hasBulkActions\", \"hover\", \"onToggleItem\", \"resource\", \"row\", \"rowClick\", \"rowStyle\", \"selectedIds\", \"isRowSelectable\"]);\n  return React.createElement(TableBody, __assign({\n    ref: ref,\n    className: clsx('datagrid-body', className, DatagridClasses.tbody)\n  }, rest), data.map(function (record, rowIndex) {\n    var _a;\n    var _b, _c;\n    return cloneElement(row, {\n      className: clsx(DatagridClasses.row, (_a = {}, _a[DatagridClasses.rowEven] = rowIndex % 2 === 0, _a[DatagridClasses.rowOdd] = rowIndex % 2 !== 0, _a)),\n      expand: expand,\n      hasBulkActions: hasBulkActions && !!selectedIds,\n      hover: hover,\n      id: (_b = record.id) !== null && _b !== void 0 ? _b : \"row\".concat(rowIndex),\n      key: (_c = record.id) !== null && _c !== void 0 ? _c : \"row\".concat(rowIndex),\n      onToggleItem: onToggleItem,\n      record: record,\n      resource: resource,\n      rowClick: rowClick,\n      selectable: !isRowSelectable || isRowSelectable(record),\n      selected: selectedIds === null || selectedIds === void 0 ? void 0 : selectedIds.includes(record.id),\n      style: rowStyle ? rowStyle(record, rowIndex) : null\n    }, children);\n  }));\n});\nDatagridBody.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  // @ts-ignore\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  row: PropTypes.element,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  styles: PropTypes.object,\n  isRowSelectable: PropTypes.func\n};\nDatagridBody.defaultProps = {\n  data: [],\n  hasBulkActions: false,\n  row: React.createElement(DatagridRow, null)\n};\n// trick MUI Table into thinking this is one of the child type it supports\n// @ts-ignore\nDatagridBody.muiName = 'TableBody';\nexport var PureDatagridBody = memo(DatagridBody);\n// trick MUI Table into thinking this is one of the child type it supports\n// @ts-ignore\nPureDatagridBody.muiName = 'TableBody';\n// @ts-ignore\nPureDatagridBody.defaultProps = {\n  row: React.createElement(PureDatagridRow, null)\n};\nexport default DatagridBody;","map":{"version":3,"names":["React","cloneElement","memo","PropTypes","TableBody","clsx","DatagridClasses","DatagridRow","PureDatagridRow","DatagridBody","forwardRef","_a","ref","children","className","data","expand","hasBulkActions","hover","onToggleItem","resource","row","rowClick","rowStyle","selectedIds","isRowSelectable","rest","__rest","createElement","__assign","tbody","map","record","rowIndex","rowEven","rowOdd","id","_b","concat","key","_c","selectable","selected","includes","style","propTypes","string","node","arrayOf","object","isRequired","oneOfType","element","elementType","bool","func","any","styles","defaultProps","muiName","PureDatagridBody"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/list/datagrid/DatagridBody.tsx"],"sourcesContent":["import * as React from 'react';\nimport { cloneElement, memo, FC, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableBody, TableBodyProps } from '@mui/material';\nimport clsx from 'clsx';\nimport { Identifier, RaRecord } from 'ra-core';\n\nimport { DatagridClasses } from './useDatagridStyles';\nimport DatagridRow, { PureDatagridRow, RowClickFunction } from './DatagridRow';\n\nconst DatagridBody: FC<DatagridBodyProps> = React.forwardRef(\n    (\n        {\n            children,\n            className,\n            data,\n            expand,\n            hasBulkActions,\n            hover,\n            onToggleItem,\n            resource,\n            row,\n            rowClick,\n            rowStyle,\n            selectedIds,\n            isRowSelectable,\n            ...rest\n        },\n        ref\n    ) => (\n        <TableBody\n            ref={ref}\n            className={clsx('datagrid-body', className, DatagridClasses.tbody)}\n            {...rest}\n        >\n            {data.map((record, rowIndex) =>\n                cloneElement(\n                    row,\n                    {\n                        className: clsx(DatagridClasses.row, {\n                            [DatagridClasses.rowEven]: rowIndex % 2 === 0,\n                            [DatagridClasses.rowOdd]: rowIndex % 2 !== 0,\n                        }),\n                        expand,\n                        hasBulkActions: hasBulkActions && !!selectedIds,\n                        hover,\n                        id: record.id ?? `row${rowIndex}`,\n                        key: record.id ?? `row${rowIndex}`,\n                        onToggleItem,\n                        record,\n                        resource,\n                        rowClick,\n                        selectable: !isRowSelectable || isRowSelectable(record),\n                        selected: selectedIds?.includes(record.id),\n                        style: rowStyle ? rowStyle(record, rowIndex) : null,\n                    },\n                    children\n                )\n            )}\n        </TableBody>\n    )\n);\n\nDatagridBody.propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node,\n    // @ts-ignore\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool.isRequired,\n    hover: PropTypes.bool,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    row: PropTypes.element,\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    styles: PropTypes.object,\n    isRowSelectable: PropTypes.func,\n};\n\nDatagridBody.defaultProps = {\n    data: [],\n    hasBulkActions: false,\n    row: <DatagridRow />,\n};\n\nexport interface DatagridBodyProps extends Omit<TableBodyProps, 'classes'> {\n    className?: string;\n    data?: any[];\n    expand?:\n        | ReactElement\n        | FC<{\n              id: Identifier;\n              record: RaRecord;\n              resource: string;\n          }>;\n    hasBulkActions?: boolean;\n    hover?: boolean;\n    onToggleItem?: (\n        id: Identifier,\n        event: React.TouchEvent | React.MouseEvent\n    ) => void;\n    record?: RaRecord;\n    resource?: string;\n    row?: ReactElement;\n    rowClick?: string | RowClickFunction | false;\n    rowStyle?: (record: RaRecord, index: number) => any;\n    selectedIds?: Identifier[];\n    isRowSelectable?: (record: RaRecord) => boolean;\n}\n\n// trick MUI Table into thinking this is one of the child type it supports\n// @ts-ignore\nDatagridBody.muiName = 'TableBody';\n\nexport const PureDatagridBody = memo(DatagridBody);\n\n// trick MUI Table into thinking this is one of the child type it supports\n// @ts-ignore\nPureDatagridBody.muiName = 'TableBody';\n// @ts-ignore\nPureDatagridBody.defaultProps = {\n    row: <PureDatagridRow />,\n};\n\nexport default DatagridBody;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,EAAEC,IAAI,QAA0B,OAAO;AAC5D,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,SAAS,QAAwB,eAAe;AACzD,OAAOC,IAAI,MAAM,MAAM;AAGvB,SAASC,eAAe,QAAQ,qBAAqB;AACrD,OAAOC,WAAW,IAAIC,eAAe,QAA0B,eAAe;AAE9E,IAAMC,YAAY,GAA0BT,KAAK,CAACU,UAAU,CACxD,UACIC,EAeC,EACDC,GAAG;EAfC,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IACRC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IACTC,IAAI,GAAAJ,EAAA,CAAAI,IAAA;IACJC,MAAM,GAAAL,EAAA,CAAAK,MAAA;IACNC,cAAc,GAAAN,EAAA,CAAAM,cAAA;IACdC,KAAK,GAAAP,EAAA,CAAAO,KAAA;IACLC,YAAY,GAAAR,EAAA,CAAAQ,YAAA;IACZC,QAAQ,GAAAT,EAAA,CAAAS,QAAA;IACRC,GAAG,GAAAV,EAAA,CAAAU,GAAA;IACHC,QAAQ,GAAAX,EAAA,CAAAW,QAAA;IACRC,QAAQ,GAAAZ,EAAA,CAAAY,QAAA;IACRC,WAAW,GAAAb,EAAA,CAAAa,WAAA;IACXC,eAAe,GAAAd,EAAA,CAAAc,eAAA;IACZC,IAAI,GAAAC,MAAA,CAAAhB,EAAA,EAdX,mKAeC,CADU;EAGV,OACDX,KAAA,CAAA4B,aAAA,CAACxB,SAAS,EAAAyB,QAAA;IACNjB,GAAG,EAAEA,GAAG;IACRE,SAAS,EAAET,IAAI,CAAC,eAAe,EAAES,SAAS,EAAER,eAAe,CAACwB,KAAK;EAAC,GAC9DJ,IAAI,GAEPX,IAAI,CAACgB,GAAG,CAAC,UAACC,MAAM,EAAEC,QAAQ;;;IACvB,OAAAhC,YAAY,CACRoB,GAAG,EACH;MACIP,SAAS,EAAET,IAAI,CAACC,eAAe,CAACe,GAAG,GAAAV,EAAA,OAC/BA,EAAA,CAACL,eAAe,CAAC4B,OAAO,IAAGD,QAAQ,GAAG,CAAC,KAAK,CAAC,EAC7CtB,EAAA,CAACL,eAAe,CAAC6B,MAAM,IAAGF,QAAQ,GAAG,CAAC,KAAK,CAAC,E,IAC9C;MACFjB,MAAM,EAAAA,MAAA;MACNC,cAAc,EAAEA,cAAc,IAAI,CAAC,CAACO,WAAW;MAC/CN,KAAK,EAAAA,KAAA;MACLkB,EAAE,EAAE,CAAAC,EAAA,GAAAL,MAAM,CAACI,EAAE,cAAAC,EAAA,cAAAA,EAAA,GAAI,MAAAC,MAAA,CAAML,QAAQ,CAAE;MACjCM,GAAG,EAAE,CAAAC,EAAA,GAAAR,MAAM,CAACI,EAAE,cAAAI,EAAA,cAAAA,EAAA,GAAI,MAAAF,MAAA,CAAML,QAAQ,CAAE;MAClCd,YAAY,EAAAA,YAAA;MACZa,MAAM,EAAAA,MAAA;MACNZ,QAAQ,EAAAA,QAAA;MACRE,QAAQ,EAAAA,QAAA;MACRmB,UAAU,EAAE,CAAChB,eAAe,IAAIA,eAAe,CAACO,MAAM,CAAC;MACvDU,QAAQ,EAAElB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEmB,QAAQ,CAACX,MAAM,CAACI,EAAE,CAAC;MAC1CQ,KAAK,EAAErB,QAAQ,GAAGA,QAAQ,CAACS,MAAM,EAAEC,QAAQ,CAAC,GAAG;KAClD,EACDpB,QAAQ,CACX;GAAA,CACJ,CACO;CACf,CACJ;AAEDJ,YAAY,CAACoC,SAAS,GAAG;EACrB/B,SAAS,EAAEX,SAAS,CAAC2C,MAAM;EAC3BjC,QAAQ,EAAEV,SAAS,CAAC4C,IAAI;EACxB;EACAhC,IAAI,EAAEZ,SAAS,CAAC6C,OAAO,CAAC7C,SAAS,CAAC8C,MAAM,CAAC,CAACC,UAAU;EACpD;EACAlC,MAAM,EAAEb,SAAS,CAACgD,SAAS,CAAC,CAAChD,SAAS,CAACiD,OAAO,EAAEjD,SAAS,CAACkD,WAAW,CAAC,CAAC;EACvEpC,cAAc,EAAEd,SAAS,CAACmD,IAAI,CAACJ,UAAU;EACzChC,KAAK,EAAEf,SAAS,CAACmD,IAAI;EACrBnC,YAAY,EAAEhB,SAAS,CAACoD,IAAI;EAC5BnC,QAAQ,EAAEjB,SAAS,CAAC2C,MAAM;EAC1BzB,GAAG,EAAElB,SAAS,CAACiD,OAAO;EACtB9B,QAAQ,EAAEnB,SAAS,CAACgD,SAAS,CAAC,CAAChD,SAAS,CAAC2C,MAAM,EAAE3C,SAAS,CAACoD,IAAI,CAAC,CAAC;EACjEhC,QAAQ,EAAEpB,SAAS,CAACoD,IAAI;EACxB/B,WAAW,EAAErB,SAAS,CAAC6C,OAAO,CAAC7C,SAAS,CAACqD,GAAG,CAAC;EAC7CC,MAAM,EAAEtD,SAAS,CAAC8C,MAAM;EACxBxB,eAAe,EAAEtB,SAAS,CAACoD;CAC9B;AAED9C,YAAY,CAACiD,YAAY,GAAG;EACxB3C,IAAI,EAAE,EAAE;EACRE,cAAc,EAAE,KAAK;EACrBI,GAAG,EAAErB,KAAA,CAAA4B,aAAA,CAACrB,WAAW;CACpB;AA2BD;AACA;AACAE,YAAY,CAACkD,OAAO,GAAG,WAAW;AAElC,OAAO,IAAMC,gBAAgB,GAAG1D,IAAI,CAACO,YAAY,CAAC;AAElD;AACA;AACAmD,gBAAgB,CAACD,OAAO,GAAG,WAAW;AACtC;AACAC,gBAAgB,CAACF,YAAY,GAAG;EAC5BrC,GAAG,EAAErB,KAAA,CAAA4B,aAAA,CAACpB,eAAe;CACxB;AAED,eAAeC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}