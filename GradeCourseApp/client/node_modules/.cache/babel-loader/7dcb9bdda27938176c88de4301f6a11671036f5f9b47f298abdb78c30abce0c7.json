{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useRef } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport { useEvent } from '../util';\n/**\n * Get a callback to call the dataProvider.updateMany() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The updateMany parameters { ids, data, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.ids The resource identifiers, e.g. [123, 456]\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current mutation state. Destructure as [updateMany, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [updateMany, { isLoading: false, isIdle: true }]\n * - start:   [updateMany, { isLoading: true }]\n * - success: [updateMany, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [updateMany, { error: [error from response], isLoading: false, isError: true }]\n *\n * The updateMany() function must be called with a resource and a parameter object: updateMany(resource, { ids, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the updateMany callback\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isLoading, error }] = useUpdateMany();\n *     const handleClick = () => {\n *         updateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Reset views</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isLoading, error }] = useUpdateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => updateMany()}>Reset views</button>;\n * };\n */\nexport var useUpdateMany = function (resource, params, options) {\n  if (params === void 0) {\n    params = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  var dataProvider = useDataProvider();\n  var queryClient = useQueryClient();\n  var ids = params.ids,\n    data = params.data,\n    meta = params.meta;\n  var _a = options.mutationMode,\n    mutationMode = _a === void 0 ? 'pessimistic' : _a,\n    reactMutationOptions = __rest(options, [\"mutationMode\"]);\n  var mode = useRef(mutationMode);\n  var paramsRef = useRef(params);\n  var snapshot = useRef([]);\n  var updateCache = function (_a) {\n    var resource = _a.resource,\n      ids = _a.ids,\n      data = _a.data,\n      meta = _a.meta;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var updatedAt, updateColl;\n      return __generator(this, function (_b) {\n        updatedAt = mode.current === 'undoable' ? Date.now() + 1000 * 5 : Date.now();\n        updateColl = function (old) {\n          if (!old) return;\n          var newCollection = __spreadArray([], old, true);\n          ids.forEach(function (id) {\n            // eslint-disable-next-line eqeqeq\n            var index = old.findIndex(function (record) {\n              return record.id == id;\n            });\n            if (index === -1) {\n              return;\n            }\n            newCollection = __spreadArray(__spreadArray(__spreadArray([], newCollection.slice(0, index), true), [__assign(__assign({}, newCollection[index]), data)], false), newCollection.slice(index + 1), true);\n          });\n          return newCollection;\n        };\n        ids.forEach(function (id) {\n          return queryClient.setQueryData([resource, 'getOne', {\n            id: String(id),\n            meta: meta\n          }], function (record) {\n            return __assign(__assign({}, record), data);\n          }, {\n            updatedAt: updatedAt\n          });\n        });\n        queryClient.setQueriesData([resource, 'getList'], function (res) {\n          return res && res.data ? __assign(__assign({}, res), {\n            data: updateColl(res.data)\n          }) : res;\n        }, {\n          updatedAt: updatedAt\n        });\n        queryClient.setQueriesData([resource, 'getMany'], function (coll) {\n          return coll && coll.length > 0 ? updateColl(coll) : coll;\n        }, {\n          updatedAt: updatedAt\n        });\n        queryClient.setQueriesData([resource, 'getManyReference'], function (res) {\n          return res && res.data ? {\n            data: updateColl(res.data),\n            total: res.total\n          } : res;\n        }, {\n          updatedAt: updatedAt\n        });\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  var mutation = useMutation(function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.resource,\n      callTimeResource = _c === void 0 ? resource : _c,\n      _d = _b.ids,\n      callTimeIds = _d === void 0 ? paramsRef.current.ids : _d,\n      _e = _b.data,\n      callTimeData = _e === void 0 ? paramsRef.current.data : _e,\n      _f = _b.meta,\n      callTimeMeta = _f === void 0 ? paramsRef.current.meta : _f;\n    return dataProvider.updateMany(callTimeResource, {\n      ids: callTimeIds,\n      data: callTimeData,\n      meta: callTimeMeta\n    }).then(function (_a) {\n      var data = _a.data;\n      return data;\n    });\n  }, __assign(__assign({}, reactMutationOptions), {\n    onMutate: function (variables) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var userContext;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!reactMutationOptions.onMutate) return [3 /*break*/, 2];\n              return [4 /*yield*/, reactMutationOptions.onMutate(variables)];\n            case 1:\n              userContext = _a.sent() || {};\n              return [2 /*return*/, __assign({\n                snapshot: snapshot.current\n              }, userContext)];\n            case 2:\n              // Return a context object with the snapshot value\n              return [2 /*return*/, {\n                snapshot: snapshot.current\n              }];\n          }\n        });\n      });\n    },\n    onError: function (error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // If the mutation fails, use the context returned from onMutate to rollback\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0],\n            value = _a[1];\n          queryClient.setQueryData(key, value);\n        });\n      }\n      if (reactMutationOptions.onError) {\n        return reactMutationOptions.onError(error, variables, context);\n      }\n      // call-time error callback is executed by react-query\n    },\n    onSuccess: function (data, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'pessimistic') {\n        // update the getOne and getList query cache with the new result\n        var _a = variables.resource,\n          callTimeResource = _a === void 0 ? resource : _a,\n          _b = variables.ids,\n          callTimeIds = _b === void 0 ? ids : _b,\n          _c = variables.data,\n          callTimeData = _c === void 0 ? data : _c,\n          _d = variables.meta,\n          callTimeMeta = _d === void 0 ? meta : _d;\n        updateCache({\n          resource: callTimeResource,\n          ids: callTimeIds,\n          data: callTimeData,\n          meta: callTimeMeta\n        });\n        if (reactMutationOptions.onSuccess) {\n          reactMutationOptions.onSuccess(data, variables, context);\n        }\n        // call-time success callback is executed by react-query\n      }\n    },\n\n    onSettled: function (data, error, variables, context) {\n      if (variables === void 0) {\n        variables = {};\n      }\n      if (mode.current === 'optimistic' || mode.current === 'undoable') {\n        // Always refetch after error or success:\n        context.snapshot.forEach(function (_a) {\n          var key = _a[0];\n          queryClient.invalidateQueries(key);\n        });\n      }\n      if (reactMutationOptions.onSettled) {\n        return reactMutationOptions.onSettled(data, error, variables, context);\n      }\n    }\n  }));\n  var updateMany = function (callTimeResource, callTimeParams, updateOptions) {\n    if (callTimeResource === void 0) {\n      callTimeResource = resource;\n    }\n    if (callTimeParams === void 0) {\n      callTimeParams = {};\n    }\n    if (updateOptions === void 0) {\n      updateOptions = {};\n    }\n    return __awaiter(void 0, void 0, void 0, function () {\n      var mutationMode, returnPromise, onSuccess, onSettled, onError, _a, callTimeIds, _b, callTimeData, _c, callTimeMeta, queryKeys;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            mutationMode = updateOptions.mutationMode, returnPromise = updateOptions.returnPromise, onSuccess = updateOptions.onSuccess, onSettled = updateOptions.onSettled, onError = updateOptions.onError;\n            // store the hook time params *at the moment of the call*\n            // because they may change afterwards, which would break the undoable mode\n            // as the previousData would be overwritten by the optimistic update\n            paramsRef.current = params;\n            if (mutationMode) {\n              mode.current = mutationMode;\n            }\n            if (returnPromise && mode.current !== 'pessimistic') {\n              console.warn('The returnPromise parameter can only be used if the mutationMode is set to pessimistic');\n            }\n            if (mode.current === 'pessimistic') {\n              if (returnPromise) {\n                return [2 /*return*/, mutation.mutateAsync(__assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  onSuccess: onSuccess,\n                  onSettled: onSettled,\n                  onError: onError\n                })];\n              }\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSuccess: onSuccess,\n                onSettled: onSettled,\n                onError: onError\n              })];\n            }\n            _a = callTimeParams.ids, callTimeIds = _a === void 0 ? ids : _a, _b = callTimeParams.data, callTimeData = _b === void 0 ? data : _b, _c = callTimeParams.meta, callTimeMeta = _c === void 0 ? meta : _c;\n            queryKeys = [[callTimeResource, 'getOne'], [callTimeResource, 'getList'], [callTimeResource, 'getMany'], [callTimeResource, 'getManyReference']];\n            /**\n             * Snapshot the previous values via queryClient.getQueriesData()\n             *\n             * The snapshotData ref will contain an array of tuples [query key, associated data]\n             *\n             * @example\n             * [\n             *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n             *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n             *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n             * ]\n             *\n             * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n             */\n            snapshot.current = queryKeys.reduce(function (prev, curr) {\n              return prev.concat(queryClient.getQueriesData(curr));\n            }, []);\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            return [4 /*yield*/, Promise.all(snapshot.current.map(function (_a) {\n              var key = _a[0];\n              return queryClient.cancelQueries(key);\n            }))];\n          case 1:\n            // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n            _d.sent();\n            // Optimistically update to the new data\n            return [4 /*yield*/, updateCache({\n              resource: callTimeResource,\n              ids: callTimeIds,\n              data: callTimeData,\n              meta: callTimeMeta\n            })];\n          case 2:\n            // Optimistically update to the new data\n            _d.sent();\n            // run the success callbacks during the next tick\n            if (onSuccess) {\n              setTimeout(function () {\n                return onSuccess(callTimeIds, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n            if (reactMutationOptions.onSuccess) {\n              setTimeout(function () {\n                return reactMutationOptions.onSuccess(callTimeIds, __assign({\n                  resource: callTimeResource\n                }, callTimeParams), {\n                  snapshot: snapshot.current\n                });\n              }, 0);\n            }\n            if (mode.current === 'optimistic') {\n              // call the mutate method without success side effects\n              return [2 /*return*/, mutation.mutate(__assign({\n                resource: callTimeResource\n              }, callTimeParams), {\n                onSettled: onSettled,\n                onError: onError\n              })];\n            } else {\n              // undoable mutation: register the mutation for later\n              undoableEventEmitter.once('end', function (_a) {\n                var isUndo = _a.isUndo;\n                if (isUndo) {\n                  // rollback\n                  snapshot.current.forEach(function (_a) {\n                    var key = _a[0],\n                      value = _a[1];\n                    queryClient.setQueryData(key, value);\n                  });\n                } else {\n                  // call the mutate method without success side effects\n                  mutation.mutate(__assign({\n                    resource: callTimeResource\n                  }, callTimeParams), {\n                    onSettled: onSettled,\n                    onError: onError\n                  });\n                }\n              });\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return [useEvent(updateMany), mutation];\n};","map":{"version":3,"names":["useRef","useMutation","useQueryClient","useDataProvider","undoableEventEmitter","useEvent","useUpdateMany","resource","params","options","dataProvider","queryClient","ids","data","meta","_a","mutationMode","reactMutationOptions","__rest","mode","paramsRef","snapshot","updateCache","updatedAt","current","Date","now","updateColl","old","newCollection","__spreadArray","forEach","id","index","findIndex","record","slice","setQueryData","String","__assign","setQueriesData","res","coll","length","total","mutation","_b","_c","callTimeResource","_d","callTimeIds","_e","callTimeData","_f","callTimeMeta","updateMany","then","onMutate","variables","__awaiter","userContext","sent","onError","error","context","key","value","onSuccess","onSettled","invalidateQueries","callTimeParams","updateOptions","returnPromise","console","warn","mutateAsync","mutate","queryKeys","reduce","prev","curr","concat","getQueriesData","Promise","all","map","cancelQueries","setTimeout","once","isUndo"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/dataProvider/useUpdateMany.ts"],"sourcesContent":["import { useRef } from 'react';\nimport {\n    useMutation,\n    useQueryClient,\n    UseMutationOptions,\n    UseMutationResult,\n    MutateOptions,\n    QueryKey,\n} from 'react-query';\n\nimport { useDataProvider } from './useDataProvider';\nimport undoableEventEmitter from './undoableEventEmitter';\nimport {\n    RaRecord,\n    UpdateManyParams,\n    MutationMode,\n    GetListResult as OriginalGetListResult,\n} from '../types';\nimport { useEvent } from '../util';\nimport { Identifier } from '..';\n\n/**\n * Get a callback to call the dataProvider.updateMany() method, the result and the loading state.\n *\n * @param {string} resource\n * @param {Params} params The updateMany parameters { ids, data, meta }\n * @param {Object} options Options object to pass to the queryClient.\n * May include side effects to be executed upon success or failure, e.g. { onSuccess: () => { refresh(); } }\n * May include a mutation mode (optimistic/pessimistic/undoable), e.g. { mutationMode: 'undoable' }\n *\n * @typedef Params\n * @prop params.ids The resource identifiers, e.g. [123, 456]\n * @prop params.data The updates to merge into the record, e.g. { views: 10 }\n * @prop params.meta Optional meta parameters\n *\n * @returns The current mutation state. Destructure as [updateMany, { data, error, isLoading }].\n *\n * The return value updates according to the request state:\n *\n * - initial: [updateMany, { isLoading: false, isIdle: true }]\n * - start:   [updateMany, { isLoading: true }]\n * - success: [updateMany, { data: [data from response], isLoading: false, isSuccess: true }]\n * - error:   [updateMany, { error: [error from response], isLoading: false, isError: true }]\n *\n * The updateMany() function must be called with a resource and a parameter object: updateMany(resource, { ids, data, previousData }, options)\n *\n * This hook uses react-query useMutation under the hood.\n * This means the state object contains mutate, isIdle, reset and other react-query methods.\n *\n * @see https://react-query-v3.tanstack.com/reference/useMutation\n *\n * @example // set params when calling the updateMany callback\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isLoading, error }] = useUpdateMany();\n *     const handleClick = () => {\n *         updateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={handleClick}>Reset views</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdateMany, useListContext } from 'react-admin';\n *\n * const BulkResetViewsButton = () => {\n *     const { selectedIds } = useListContext();\n *     const [updateMany, { isLoading, error }] = useUpdateMany('posts', { ids: selectedIds, data: { views: 0 } });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={isLoading} onClick={() => updateMany()}>Reset views</button>;\n * };\n */\nexport const useUpdateMany = <\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n>(\n    resource?: string,\n    params: Partial<UpdateManyParams<Partial<RecordType>>> = {},\n    options: UseUpdateManyOptions<RecordType, MutationError> = {}\n): UseUpdateManyResult<RecordType, boolean, MutationError> => {\n    const dataProvider = useDataProvider();\n    const queryClient = useQueryClient();\n    const { ids, data, meta } = params;\n    const { mutationMode = 'pessimistic', ...reactMutationOptions } = options;\n    const mode = useRef<MutationMode>(mutationMode);\n    const paramsRef = useRef<Partial<UpdateManyParams<Partial<RecordType>>>>(\n        params\n    );\n    const snapshot = useRef<Snapshot>([]);\n\n    const updateCache = async ({\n        resource,\n        ids,\n        data,\n        meta,\n    }: {\n        resource: string;\n        ids: Identifier[];\n        data: any;\n        meta?: any;\n    }) => {\n        // hack: only way to tell react-query not to fetch this query for the next 5 seconds\n        // because setQueryData doesn't accept a stale time option\n        const updatedAt =\n            mode.current === 'undoable' ? Date.now() + 1000 * 5 : Date.now();\n\n        const updateColl = (old: RecordType[]) => {\n            if (!old) return;\n            let newCollection = [...old];\n            ids.forEach(id => {\n                // eslint-disable-next-line eqeqeq\n                const index = old.findIndex(record => record.id == id);\n                if (index === -1) {\n                    return;\n                }\n                newCollection = [\n                    ...newCollection.slice(0, index),\n                    { ...newCollection[index], ...data },\n                    ...newCollection.slice(index + 1),\n                ];\n            });\n            return newCollection;\n        };\n\n        type GetListResult = Omit<OriginalGetListResult, 'data'> & {\n            data?: RecordType[];\n        };\n\n        ids.forEach(id =>\n            queryClient.setQueryData(\n                [resource, 'getOne', { id: String(id), meta }],\n                (record: RecordType) => ({ ...record, ...data }),\n                { updatedAt }\n            )\n        );\n        queryClient.setQueriesData(\n            [resource, 'getList'],\n            (res: GetListResult) =>\n                res && res.data ? { ...res, data: updateColl(res.data) } : res,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getMany'],\n            (coll: RecordType[]) =>\n                coll && coll.length > 0 ? updateColl(coll) : coll,\n            { updatedAt }\n        );\n        queryClient.setQueriesData(\n            [resource, 'getManyReference'],\n            (res: GetListResult) =>\n                res && res.data\n                    ? { data: updateColl(res.data), total: res.total }\n                    : res,\n            { updatedAt }\n        );\n    };\n\n    const mutation = useMutation<\n        Array<RecordType['id']>,\n        MutationError,\n        Partial<UseUpdateManyMutateParams<RecordType>>\n    >(\n        ({\n            resource: callTimeResource = resource,\n            ids: callTimeIds = paramsRef.current.ids,\n            data: callTimeData = paramsRef.current.data,\n            meta: callTimeMeta = paramsRef.current.meta,\n        } = {}) =>\n            dataProvider\n                .updateMany(callTimeResource, {\n                    ids: callTimeIds,\n                    data: callTimeData,\n                    meta: callTimeMeta,\n                })\n                .then(({ data }) => data),\n        {\n            ...reactMutationOptions,\n            onMutate: async (\n                variables: Partial<UseUpdateManyMutateParams<RecordType>>\n            ) => {\n                if (reactMutationOptions.onMutate) {\n                    const userContext =\n                        (await reactMutationOptions.onMutate(variables)) || {};\n                    return {\n                        snapshot: snapshot.current,\n                        // @ts-ignore\n                        ...userContext,\n                    };\n                } else {\n                    // Return a context object with the snapshot value\n                    return { snapshot: snapshot.current };\n                }\n            },\n            onError: (\n                error: MutationError,\n                variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // If the mutation fails, use the context returned from onMutate to rollback\n                    context.snapshot.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                }\n\n                if (reactMutationOptions.onError) {\n                    return reactMutationOptions.onError(\n                        error,\n                        variables,\n                        context\n                    );\n                }\n                // call-time error callback is executed by react-query\n            },\n            onSuccess: (\n                data: Array<RecordType['id']>,\n                variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n                context: unknown\n            ) => {\n                if (mode.current === 'pessimistic') {\n                    // update the getOne and getList query cache with the new result\n                    const {\n                        resource: callTimeResource = resource,\n                        ids: callTimeIds = ids,\n                        data: callTimeData = data,\n                        meta: callTimeMeta = meta,\n                    } = variables;\n                    updateCache({\n                        resource: callTimeResource,\n                        ids: callTimeIds,\n                        data: callTimeData,\n                        meta: callTimeMeta,\n                    });\n\n                    if (reactMutationOptions.onSuccess) {\n                        reactMutationOptions.onSuccess(\n                            data,\n                            variables,\n                            context\n                        );\n                    }\n                    // call-time success callback is executed by react-query\n                }\n            },\n            onSettled: (\n                data: Array<RecordType['id']>,\n                error: MutationError,\n                variables: Partial<UseUpdateManyMutateParams<RecordType>> = {},\n                context: { snapshot: Snapshot }\n            ) => {\n                if (\n                    mode.current === 'optimistic' ||\n                    mode.current === 'undoable'\n                ) {\n                    // Always refetch after error or success:\n                    context.snapshot.forEach(([key]) => {\n                        queryClient.invalidateQueries(key);\n                    });\n                }\n\n                if (reactMutationOptions.onSettled) {\n                    return reactMutationOptions.onSettled(\n                        data,\n                        error,\n                        variables,\n                        context\n                    );\n                }\n            },\n        }\n    );\n\n    const updateMany = async (\n        callTimeResource: string = resource,\n        callTimeParams: Partial<UpdateManyParams<RecordType>> = {},\n        updateOptions: MutateOptions<\n            Array<RecordType['id']>,\n            unknown,\n            Partial<UseUpdateManyMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: boolean } = {}\n    ) => {\n        const {\n            mutationMode,\n            returnPromise,\n            onSuccess,\n            onSettled,\n            onError,\n        } = updateOptions;\n\n        // store the hook time params *at the moment of the call*\n        // because they may change afterwards, which would break the undoable mode\n        // as the previousData would be overwritten by the optimistic update\n        paramsRef.current = params;\n\n        if (mutationMode) {\n            mode.current = mutationMode;\n        }\n\n        if (returnPromise && mode.current !== 'pessimistic') {\n            console.warn(\n                'The returnPromise parameter can only be used if the mutationMode is set to pessimistic'\n            );\n        }\n\n        if (mode.current === 'pessimistic') {\n            if (returnPromise) {\n                return mutation.mutateAsync(\n                    { resource: callTimeResource, ...callTimeParams },\n                    { onSuccess, onSettled, onError }\n                );\n            }\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSuccess, onSettled, onError }\n            );\n        }\n\n        const {\n            ids: callTimeIds = ids,\n            data: callTimeData = data,\n            meta: callTimeMeta = meta,\n        } = callTimeParams;\n\n        // optimistic update as documented in https://react-query-v3.tanstack.com/guides/optimistic-updates\n        // except we do it in a mutate wrapper instead of the onMutate callback\n        // to have access to success side effects\n\n        const queryKeys = [\n            [callTimeResource, 'getOne'],\n            [callTimeResource, 'getList'],\n            [callTimeResource, 'getMany'],\n            [callTimeResource, 'getManyReference'],\n        ];\n\n        /**\n         * Snapshot the previous values via queryClient.getQueriesData()\n         *\n         * The snapshotData ref will contain an array of tuples [query key, associated data]\n         *\n         * @example\n         * [\n         *   [['posts', 'getOne', { id: '1' }], { id: 1, title: 'Hello' }],\n         *   [['posts', 'getList'], { data: [{ id: 1, title: 'Hello' }], total: 1 }],\n         *   [['posts', 'getMany'], [{ id: 1, title: 'Hello' }]],\n         * ]\n         *\n         * @see https://react-query-v3.tanstack.com/reference/QueryClient#queryclientgetqueriesdata\n         */\n        snapshot.current = queryKeys.reduce(\n            (prev, curr) => prev.concat(queryClient.getQueriesData(curr)),\n            [] as Snapshot\n        );\n\n        // Cancel any outgoing re-fetches (so they don't overwrite our optimistic update)\n        await Promise.all(\n            snapshot.current.map(([key]) => queryClient.cancelQueries(key))\n        );\n\n        // Optimistically update to the new data\n        await updateCache({\n            resource: callTimeResource,\n            ids: callTimeIds,\n            data: callTimeData,\n            meta: callTimeMeta,\n        });\n\n        // run the success callbacks during the next tick\n        if (onSuccess) {\n            setTimeout(\n                () =>\n                    onSuccess(\n                        callTimeIds,\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n        if (reactMutationOptions.onSuccess) {\n            setTimeout(\n                () =>\n                    reactMutationOptions.onSuccess(\n                        callTimeIds,\n                        { resource: callTimeResource, ...callTimeParams },\n                        { snapshot: snapshot.current }\n                    ),\n                0\n            );\n        }\n\n        if (mode.current === 'optimistic') {\n            // call the mutate method without success side effects\n            return mutation.mutate(\n                { resource: callTimeResource, ...callTimeParams },\n                { onSettled, onError }\n            );\n        } else {\n            // undoable mutation: register the mutation for later\n            undoableEventEmitter.once('end', ({ isUndo }) => {\n                if (isUndo) {\n                    // rollback\n                    snapshot.current.forEach(([key, value]) => {\n                        queryClient.setQueryData(key, value);\n                    });\n                } else {\n                    // call the mutate method without success side effects\n                    mutation.mutate(\n                        { resource: callTimeResource, ...callTimeParams },\n                        { onSettled, onError }\n                    );\n                }\n            });\n        }\n    };\n\n    return [useEvent(updateMany), mutation];\n};\n\ntype Snapshot = [key: QueryKey, value: any][];\n\nexport interface UseUpdateManyMutateParams<RecordType extends RaRecord = any> {\n    resource?: string;\n    ids?: Array<RecordType['id']>;\n    data?: Partial<RecordType>;\n    previousData?: any;\n    meta?: any;\n}\n\nexport type UseUpdateManyOptions<\n    RecordType extends RaRecord = any,\n    MutationError = unknown\n> = UseMutationOptions<\n    Array<RecordType['id']>,\n    MutationError,\n    Partial<UseUpdateManyMutateParams<RecordType>>\n> & { mutationMode?: MutationMode };\n\nexport type UseUpdateManyResult<\n    RecordType extends RaRecord = any,\n    TReturnPromise extends boolean = boolean,\n    MutationError = unknown\n> = [\n    (\n        resource?: string,\n        params?: Partial<UpdateManyParams<RecordType>>,\n        options?: MutateOptions<\n            Array<RecordType['id']>,\n            MutationError,\n            Partial<UseUpdateManyMutateParams<RecordType>>,\n            unknown\n        > & { mutationMode?: MutationMode; returnPromise?: TReturnPromise }\n    ) => Promise<TReturnPromise extends true ? Array<RecordType['id']> : void>,\n    UseMutationResult<\n        Array<RecordType['id']>,\n        MutationError,\n        Partial<UpdateManyParams<Partial<RecordType>> & { resource?: string }>,\n        unknown\n    >\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}