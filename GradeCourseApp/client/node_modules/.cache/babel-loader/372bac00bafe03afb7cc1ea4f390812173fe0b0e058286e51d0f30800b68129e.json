{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport { useListContext, useTranslate, useUpdateMany, useRefresh, useNotify, useUnselectAll, useResourceContext } from 'ra-core';\nimport { Confirm } from '../layout';\nimport { Button } from './Button';\nexport var BulkUpdateWithConfirmButton = function (props) {\n  var notify = useNotify();\n  var refresh = useRefresh();\n  var translate = useTranslate();\n  var resource = useResourceContext(props);\n  var unselectAll = useUnselectAll(resource);\n  var _a = useState(false),\n    isOpen = _a[0],\n    setOpen = _a[1];\n  var selectedIds = useListContext(props).selectedIds;\n  var _b = props.confirmTitle,\n    confirmTitle = _b === void 0 ? 'ra.message.bulk_update_title' : _b,\n    _c = props.confirmContent,\n    confirmContent = _c === void 0 ? 'ra.message.bulk_update_content' : _c,\n    data = props.data,\n    _d = props.icon,\n    icon = _d === void 0 ? defaultIcon : _d,\n    _e = props.label,\n    label = _e === void 0 ? 'ra.action.update' : _e,\n    _f = props.mutationMode,\n    mutationMode = _f === void 0 ? 'pessimistic' : _f,\n    onClick = props.onClick,\n    _g = props.onSuccess,\n    onSuccess = _g === void 0 ? function () {\n      refresh();\n      notify('ra.notification.updated', {\n        type: 'info',\n        messageArgs: {\n          smart_count: selectedIds.length\n        },\n        undoable: mutationMode === 'undoable'\n      });\n      unselectAll();\n      setOpen(false);\n    } : _g,\n    _h = props.onError,\n    onError = _h === void 0 ? function (error) {\n      notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n        type: 'error',\n        messageArgs: {\n          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n        }\n      });\n      setOpen(false);\n    } : _h,\n    rest = __rest(props, [\"confirmTitle\", \"confirmContent\", \"data\", \"icon\", \"label\", \"mutationMode\", \"onClick\", \"onSuccess\", \"onError\"]);\n  var _j = useUpdateMany(resource, {\n      ids: selectedIds,\n      data: data\n    }, {\n      onSuccess: onSuccess,\n      onError: onError,\n      mutationMode: mutationMode\n    }),\n    updateMany = _j[0],\n    isLoading = _j[1].isLoading;\n  var handleClick = function (e) {\n    setOpen(true);\n    e.stopPropagation();\n  };\n  var handleDialogClose = function () {\n    setOpen(false);\n  };\n  var handleUpdate = function (e) {\n    updateMany();\n    if (typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n  return React.createElement(Fragment, null, React.createElement(StyledButton, __assign({\n    onClick: handleClick,\n    label: label\n  }, sanitizeRestProps(rest)), icon), React.createElement(Confirm, {\n    isOpen: isOpen,\n    loading: isLoading,\n    title: confirmTitle,\n    content: confirmContent,\n    translateOptions: {\n      smart_count: selectedIds.length,\n      name: translate(\"resources.\".concat(resource, \".forcedCaseName\"), {\n        smart_count: selectedIds.length,\n        _: inflection.humanize(translate(\"resources.\".concat(resource, \".name\"), {\n          smart_count: selectedIds.length,\n          _: inflection.inflect(resource, selectedIds.length)\n        }), true)\n      })\n    },\n    onConfirm: handleUpdate,\n    onClose: handleDialogClose\n  }));\n};\nvar sanitizeRestProps = function (_a) {\n  var filterValues = _a.filterValues,\n    label = _a.label,\n    onSuccess = _a.onSuccess,\n    onError = _a.onError,\n    rest = __rest(_a, [\"filterValues\", \"label\", \"onSuccess\", \"onError\"]);\n  return rest;\n};\nBulkUpdateWithConfirmButton.propTypes = {\n  confirmTitle: PropTypes.string,\n  confirmContent: PropTypes.string,\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  icon: PropTypes.element,\n  data: PropTypes.any.isRequired,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable'])\n};\nvar PREFIX = 'RaBulkUpdateWithConfirmButton';\nvar StyledButton = styled(Button, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var theme = _a.theme;\n  return {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, 0.12),\n      // Reset on mouse devices\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  };\n});\nvar defaultIcon = React.createElement(ActionUpdate, null);","map":{"version":3,"names":["React","Fragment","useState","PropTypes","ActionUpdate","inflection","alpha","styled","useListContext","useTranslate","useUpdateMany","useRefresh","useNotify","useUnselectAll","useResourceContext","Confirm","Button","BulkUpdateWithConfirmButton","props","notify","refresh","translate","resource","unselectAll","_a","isOpen","setOpen","selectedIds","_b","confirmTitle","_c","confirmContent","data","_d","icon","defaultIcon","_e","label","_f","mutationMode","onClick","_g","onSuccess","type","messageArgs","smart_count","length","undoable","_h","onError","error","message","_","undefined","rest","__rest","_j","ids","updateMany","isLoading","handleClick","e","stopPropagation","handleDialogClose","handleUpdate","createElement","StyledButton","__assign","sanitizeRestProps","loading","title","content","translateOptions","name","concat","humanize","inflect","onConfirm","onClose","filterValues","propTypes","string","arrayOf","any","element","isRequired","oneOf","PREFIX","overridesResolver","styles","root","theme","color","palette","primary","main","backgroundColor"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/button/BulkUpdateWithConfirmButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Fragment, useState, ReactElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ActionUpdate from '@mui/icons-material/Update';\nimport inflection from 'inflection';\nimport { alpha, styled } from '@mui/material/styles';\nimport {\n    useListContext,\n    useTranslate,\n    useUpdateMany,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    useResourceContext,\n    MutationMode,\n} from 'ra-core';\n\nimport { Confirm } from '../layout';\nimport { Button, ButtonProps } from './Button';\nimport { BulkActionProps } from '../types';\n\nexport const BulkUpdateWithConfirmButton = (\n    props: BulkUpdateWithConfirmButtonProps\n) => {\n    const notify = useNotify();\n    const refresh = useRefresh();\n    const translate = useTranslate();\n    const resource = useResourceContext(props);\n    const unselectAll = useUnselectAll(resource);\n    const [isOpen, setOpen] = useState(false);\n    const { selectedIds } = useListContext(props);\n\n    const {\n        confirmTitle = 'ra.message.bulk_update_title',\n        confirmContent = 'ra.message.bulk_update_content',\n        data,\n        icon = defaultIcon,\n        label = 'ra.action.update',\n        mutationMode = 'pessimistic',\n        onClick,\n        onSuccess = () => {\n            refresh();\n            notify('ra.notification.updated', {\n                type: 'info',\n                messageArgs: { smart_count: selectedIds.length },\n                undoable: mutationMode === 'undoable',\n            });\n            unselectAll();\n            setOpen(false);\n        },\n        onError = (error: Error | string) => {\n            notify(\n                typeof error === 'string'\n                    ? error\n                    : error.message || 'ra.notification.http_error',\n                {\n                    type: 'error',\n                    messageArgs: {\n                        _:\n                            typeof error === 'string'\n                                ? error\n                                : error && error.message\n                                ? error.message\n                                : undefined,\n                    },\n                }\n            );\n            setOpen(false);\n        },\n        ...rest\n    } = props;\n\n    const [updateMany, { isLoading }] = useUpdateMany(\n        resource,\n        { ids: selectedIds, data },\n        {\n            onSuccess,\n            onError,\n            mutationMode,\n        }\n    );\n\n    const handleClick = e => {\n        setOpen(true);\n        e.stopPropagation();\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    const handleUpdate = e => {\n        updateMany();\n\n        if (typeof onClick === 'function') {\n            onClick(e);\n        }\n    };\n\n    return (\n        <Fragment>\n            <StyledButton\n                onClick={handleClick}\n                label={label}\n                {...sanitizeRestProps(rest)}\n            >\n                {icon}\n            </StyledButton>\n            <Confirm\n                isOpen={isOpen}\n                loading={isLoading}\n                title={confirmTitle}\n                content={confirmContent}\n                translateOptions={{\n                    smart_count: selectedIds.length,\n                    name: translate(`resources.${resource}.forcedCaseName`, {\n                        smart_count: selectedIds.length,\n                        _: inflection.humanize(\n                            translate(`resources.${resource}.name`, {\n                                smart_count: selectedIds.length,\n                                _: inflection.inflect(\n                                    resource,\n                                    selectedIds.length\n                                ),\n                            }),\n                            true\n                        ),\n                    }),\n                }}\n                onConfirm={handleUpdate}\n                onClose={handleDialogClose}\n            />\n        </Fragment>\n    );\n};\n\nconst sanitizeRestProps = ({\n    filterValues,\n    label,\n    onSuccess,\n    onError,\n    ...rest\n}: Omit<\n    BulkUpdateWithConfirmButtonProps,\n    'resource' | 'selectedIds' | 'icon' | 'data'\n>) => rest;\n\nexport interface BulkUpdateWithConfirmButtonProps\n    extends BulkActionProps,\n        ButtonProps {\n    confirmContent?: React.ReactNode;\n    confirmTitle?: string;\n    icon?: ReactElement;\n    data: any;\n    onSuccess?: () => void;\n    onError?: (error: any) => void;\n    mutationMode?: MutationMode;\n}\n\nBulkUpdateWithConfirmButton.propTypes = {\n    confirmTitle: PropTypes.string,\n    confirmContent: PropTypes.string,\n    label: PropTypes.string,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    icon: PropTypes.element,\n    data: PropTypes.any.isRequired,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n};\n\nconst PREFIX = 'RaBulkUpdateWithConfirmButton';\n\nconst StyledButton = styled(Button, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    color: theme.palette.primary.main,\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.primary.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n            backgroundColor: 'transparent',\n        },\n    },\n}));\n\nconst defaultIcon = <ActionUpdate />;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,QAAQ,QAAsB,OAAO;AACxD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,KAAK,EAAEC,MAAM,QAAQ,sBAAsB;AACpD,SACIC,cAAc,EACdC,YAAY,EACZC,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,cAAc,EACdC,kBAAkB,QAEf,SAAS;AAEhB,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,MAAM,QAAqB,UAAU;AAG9C,OAAO,IAAMC,2BAA2B,GAAG,SAAAA,CACvCC,KAAuC;EAEvC,IAAMC,MAAM,GAAGP,SAAS,EAAE;EAC1B,IAAMQ,OAAO,GAAGT,UAAU,EAAE;EAC5B,IAAMU,SAAS,GAAGZ,YAAY,EAAE;EAChC,IAAMa,QAAQ,GAAGR,kBAAkB,CAACI,KAAK,CAAC;EAC1C,IAAMK,WAAW,GAAGV,cAAc,CAACS,QAAQ,CAAC;EACtC,IAAAE,EAAA,GAAoBtB,QAAQ,CAAC,KAAK,CAAC;IAAlCuB,MAAM,GAAAD,EAAA;IAAEE,OAAO,GAAAF,EAAA,GAAmB;EACjC,IAAAG,WAAW,GAAKnB,cAAc,CAACU,KAAK,CAAC,CAAAS,WAA1B;EAGf,IAAAC,EAAA,GAqCAV,KAAK,CAAAW,YArCwC;IAA7CA,YAAY,GAAAD,EAAA,cAAG,8BAA8B,GAAAA,EAAA;IAC7CE,EAAA,GAoCAZ,KAAK,CAAAa,cApC4C;IAAjDA,cAAc,GAAAD,EAAA,cAAG,gCAAgC,GAAAA,EAAA;IACjDE,IAAI,GAmCJd,KAAK,CAAAc,IAnCD;IACJC,EAAA,GAkCAf,KAAK,CAAAgB,IAlCa;IAAlBA,IAAI,GAAAD,EAAA,cAAGE,WAAW,GAAAF,EAAA;IAClBG,EAAA,GAiCAlB,KAAK,CAAAmB,KAjCqB;IAA1BA,KAAK,GAAAD,EAAA,cAAG,kBAAkB,GAAAA,EAAA;IAC1BE,EAAA,GAgCApB,KAAK,CAAAqB,YAhCuB;IAA5BA,YAAY,GAAAD,EAAA,cAAG,aAAa,GAAAA,EAAA;IAC5BE,OAAO,GA+BPtB,KAAK,CAAAsB,OA/BE;IACPC,EAAA,GA8BAvB,KAAK,CAAAwB,SArBJ;IATDA,SAAS,GAAAD,EAAA,cAAG;MACRrB,OAAO,EAAE;MACTD,MAAM,CAAC,yBAAyB,EAAE;QAC9BwB,IAAI,EAAE,MAAM;QACZC,WAAW,EAAE;UAAEC,WAAW,EAAElB,WAAW,CAACmB;QAAM,CAAE;QAChDC,QAAQ,EAAER,YAAY,KAAK;OAC9B,CAAC;MACFhB,WAAW,EAAE;MACbG,OAAO,CAAC,KAAK,CAAC;IAClB,CAAC,GAAAe,EAAA;IACDO,EAAA,GAoBA9B,KAAK,CAAA+B,OAFJ;IAlBDA,OAAO,GAAAD,EAAA,cAAG,UAACE,KAAqB;MAC5B/B,MAAM,CACF,OAAO+B,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACLA,KAAK,CAACC,OAAO,IAAI,4BAA4B,EACnD;QACIR,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE;UACTQ,CAAC,EACG,OAAOF,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACLA,KAAK,IAAIA,KAAK,CAACC,OAAO,GACtBD,KAAK,CAACC,OAAO,GACbE;;OAEjB,CACJ;MACD3B,OAAO,CAAC,KAAK,CAAC;IAClB,CAAC,GAAAsB,EAAA;IACEM,IAAI,GAAAC,MAAA,CACPrC,KAAK,EAtCH,8GAsCL,CADU;EAGL,IAAAsC,EAAA,GAA8B9C,aAAa,CAC7CY,QAAQ,EACR;MAAEmC,GAAG,EAAE9B,WAAW;MAAEK,IAAI,EAAAA;IAAA,CAAE,EAC1B;MACIU,SAAS,EAAAA,SAAA;MACTO,OAAO,EAAAA,OAAA;MACPV,YAAY,EAAAA;KACf,CACJ;IARMmB,UAAU,GAAAF,EAAA;IAAIG,SAAS,GAAAH,EAAA,IAAAG,SAQ7B;EAED,IAAMC,WAAW,GAAG,SAAAA,CAAAC,CAAC;IACjBnC,OAAO,CAAC,IAAI,CAAC;IACbmC,CAAC,CAACC,eAAe,EAAE;EACvB,CAAC;EAED,IAAMC,iBAAiB,GAAG,SAAAA,CAAA;IACtBrC,OAAO,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,IAAMsC,YAAY,GAAG,SAAAA,CAAAH,CAAC;IAClBH,UAAU,EAAE;IAEZ,IAAI,OAAOlB,OAAO,KAAK,UAAU,EAAE;MAC/BA,OAAO,CAACqB,CAAC,CAAC;;EAElB,CAAC;EAED,OACI7D,KAAA,CAAAiE,aAAA,CAAChE,QAAQ,QACLD,KAAA,CAAAiE,aAAA,CAACC,YAAY,EAAAC,QAAA;IACT3B,OAAO,EAAEoB,WAAW;IACpBvB,KAAK,EAAEA;EAAK,GACR+B,iBAAiB,CAACd,IAAI,CAAC,GAE1BpB,IAAI,CACM,EACflC,KAAA,CAAAiE,aAAA,CAAClD,OAAO;IACJU,MAAM,EAAEA,MAAM;IACd4C,OAAO,EAAEV,SAAS;IAClBW,KAAK,EAAEzC,YAAY;IACnB0C,OAAO,EAAExC,cAAc;IACvByC,gBAAgB,EAAE;MACd3B,WAAW,EAAElB,WAAW,CAACmB,MAAM;MAC/B2B,IAAI,EAAEpD,SAAS,CAAC,aAAAqD,MAAA,CAAapD,QAAQ,oBAAiB,EAAE;QACpDuB,WAAW,EAAElB,WAAW,CAACmB,MAAM;QAC/BM,CAAC,EAAE/C,UAAU,CAACsE,QAAQ,CAClBtD,SAAS,CAAC,aAAAqD,MAAA,CAAapD,QAAQ,UAAO,EAAE;UACpCuB,WAAW,EAAElB,WAAW,CAACmB,MAAM;UAC/BM,CAAC,EAAE/C,UAAU,CAACuE,OAAO,CACjBtD,QAAQ,EACRK,WAAW,CAACmB,MAAM;SAEzB,CAAC,EACF,IAAI;OAEX;KACJ;IACD+B,SAAS,EAAEb,YAAY;IACvBc,OAAO,EAAEf;EAAiB,EAC5B,CACK;AAEnB,CAAC;AAED,IAAMK,iBAAiB,GAAG,SAAAA,CAAC5C,EAS1B;EARG,IAAAuD,YAAY,GAAAvD,EAAA,CAAAuD,YAAA;IACZ1C,KAAK,GAAAb,EAAA,CAAAa,KAAA;IACLK,SAAS,GAAAlB,EAAA,CAAAkB,SAAA;IACTO,OAAO,GAAAzB,EAAA,CAAAyB,OAAA;IACJK,IAAI,GAAAC,MAAA,CAAA/B,EAAA,EALgB,iDAM1B,CADU;EAIL,OAAA8B,IAAI;CAAA;AAcVrC,2BAA2B,CAAC+D,SAAS,GAAG;EACpCnD,YAAY,EAAE1B,SAAS,CAAC8E,MAAM;EAC9BlD,cAAc,EAAE5B,SAAS,CAAC8E,MAAM;EAChC5C,KAAK,EAAElC,SAAS,CAAC8E,MAAM;EACvB3D,QAAQ,EAAEnB,SAAS,CAAC8E,MAAM;EAC1BtD,WAAW,EAAExB,SAAS,CAAC+E,OAAO,CAAC/E,SAAS,CAACgF,GAAG,CAAC;EAC7CjD,IAAI,EAAE/B,SAAS,CAACiF,OAAO;EACvBpD,IAAI,EAAE7B,SAAS,CAACgF,GAAG,CAACE,UAAU;EAC9B9C,YAAY,EAAEpC,SAAS,CAACmF,KAAK,CAAC,CAAC,aAAa,EAAE,YAAY,EAAE,UAAU,CAAC;CAC1E;AAED,IAAMC,MAAM,GAAG,+BAA+B;AAE9C,IAAMrB,YAAY,GAAG3D,MAAM,CAACS,MAAM,EAAE;EAChCyD,IAAI,EAAEc,MAAM;EACZC,iBAAiB,EAAE,SAAAA,CAACtE,KAAK,EAAEuE,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAClE,EAAS;MAAPmE,KAAK,GAAAnE,EAAA,CAAAmE,KAAA;EAAO,OAAC;IACfC,KAAK,EAAED,KAAK,CAACE,OAAO,CAACC,OAAO,CAACC,IAAI;IACjC,SAAS,EAAE;MACPC,eAAe,EAAE1F,KAAK,CAACqF,KAAK,CAACE,OAAO,CAACC,OAAO,CAACC,IAAI,EAAE,IAAI,CAAC;MACxD;MACA,sBAAsB,EAAE;QACpBC,eAAe,EAAE;;;GAG5B;AATiB,CAShB,CAAC;AAEH,IAAM7D,WAAW,GAAGnC,KAAA,CAAAiE,aAAA,CAAC7D,YAAY,OAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}