{"ast":null,"code":"import * as React from 'react';\nimport AuthContext from '../AuthContext.js';\nimport { doSignIn } from '../utils/reducers.js';\nimport { AuthKitError } from '../errors.js';\n\n/**\n *@author Arkadip Bhattacharya <in2arkadipb13@gmail.com>\n *@fileoverview Sign In functionality <hook>\n *@copyright Arkadip Bhattacharya 2020\n *@license Apache-2.0\n *\n * Copyright 2020 Arkadip Bhattacharya\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *@function\n *@name useSignIn\n *@description Authentication SignIn Hook\n *@returns - Sign In function\n */\nfunction useSignIn() {\n  var context = React.useContext(AuthContext);\n  if (context === null) {\n    throw new AuthKitError('Auth Provider is missing. ' + 'Please add the AuthProvider before Router');\n  }\n  return function (signInConfig) {\n    var token = signInConfig.token,\n      tokenType = signInConfig.tokenType,\n      authState = signInConfig.authState,\n      expiresIn = signInConfig.expiresIn,\n      refreshToken = signInConfig.refreshToken,\n      refreshTokenExpireIn = signInConfig.refreshTokenExpireIn;\n    var expTime = new Date(new Date().getTime() + expiresIn * 60 * 1000);\n    if (context.authState.isUsingRefreshToken) {\n      // Using the power of refresh token\n      if (!!refreshToken && !!refreshTokenExpireIn) {\n        // refresh token params are provided\n        // sign in with refresh token\n        var refreshTokenExpireAt = new Date(new Date().getTime() + refreshTokenExpireIn * 60 * 1000);\n        context.dispatch(doSignIn({\n          auth: {\n            token: token,\n            type: tokenType,\n            expiresAt: expTime\n          },\n          userState: authState ? authState : null,\n          refresh: {\n            token: refreshToken,\n            expiresAt: refreshTokenExpireAt\n          }\n        }));\n        return true;\n      } else {\n        // refresh token params are not provided\n        // throw an error\n        throw new AuthKitError('Make sure you given \"refreshToken\" and  ' + '\"refreshTokenExpireIn\" parameter');\n      }\n    } else {\n      // Not using refresh token\n      if (!!refreshToken && !!refreshTokenExpireIn) {\n        // params are not expected but provided\n        // throw an error\n        throw new Error('The app doesn\\'t implement \\'refreshToken\\' ' + 'feature.\\nSo you have to implement refresh token feature ' + 'from \\'AuthProvider\\' before using it.');\n      } else {\n        // sign in without the refresh token\n        context.dispatch(doSignIn({\n          auth: {\n            token: token,\n            type: tokenType,\n            expiresAt: expTime\n          },\n          userState: authState ? authState : null,\n          refresh: null\n        }));\n        return true;\n      }\n    }\n  };\n}\nexport { useSignIn as default };","map":{"version":3,"names":["useSignIn","context","React","useContext","AuthContext","AuthKitError","signInConfig","token","tokenType","authState","expiresIn","refreshToken","refreshTokenExpireIn","expTime","Date","getTime","isUsingRefreshToken","refreshTokenExpireAt","dispatch","doSignIn","auth","type","expiresAt","userState","refresh","Error"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/react-auth-kit/src/hooks/useSignIn.ts"],"sourcesContent":["/**\n *@author Arkadip Bhattacharya <in2arkadipb13@gmail.com>\n *@fileoverview Sign In functionality <hook>\n *@copyright Arkadip Bhattacharya 2020\n *@license Apache-2.0\n *\n * Copyright 2020 Arkadip Bhattacharya\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as React from 'react';\nimport AuthContext from '../AuthContext';\nimport {signInFunctionParams} from '../types';\nimport {doSignIn} from '../utils/reducers';\nimport {AuthKitError} from '../errors';\n\n/**\n *@function\n *@name useSignIn\n *@description Authentication SignIn Hook\n *@returns - Sign In function\n */\nfunction useSignIn(): (signInConfig: signInFunctionParams) => boolean {\n  const context = React.useContext(AuthContext);\n  if (context === null) {\n    throw new\n    AuthKitError('Auth Provider is missing. ' +\n      'Please add the AuthProvider before Router');\n  }\n  return (signInConfig: signInFunctionParams): boolean => {\n    const {\n      token,\n      tokenType,\n      authState,\n      expiresIn,\n      refreshToken,\n      refreshTokenExpireIn,\n    } = signInConfig;\n    const expTime = new Date(new Date().getTime() + expiresIn * 60 * 1000);\n    if (context.authState.isUsingRefreshToken) {\n      // Using the power of refresh token\n      if (!!refreshToken && !!refreshTokenExpireIn) {\n        // refresh token params are provided\n        // sign in with refresh token\n        const refreshTokenExpireAt =\n          new Date(new Date().getTime() + refreshTokenExpireIn * 60 * 1000);\n        context.dispatch(doSignIn({\n          auth: {\n            token: token,\n            type: tokenType,\n            expiresAt: expTime,\n          },\n          userState: authState ? authState : null,\n          refresh: {\n            token: refreshToken,\n            expiresAt: refreshTokenExpireAt,\n          },\n        }));\n        return true;\n      } else {\n        // refresh token params are not provided\n        // throw an error\n        throw new AuthKitError('Make sure you given \"refreshToken\" and  ' +\n          '\"refreshTokenExpireIn\" parameter');\n      }\n    } else {\n      // Not using refresh token\n      if (!!refreshToken && !!refreshTokenExpireIn) {\n        // params are not expected but provided\n        // throw an error\n        throw new Error('The app doesn\\'t implement \\'refreshToken\\' ' +\n          'feature.\\nSo you have to implement refresh token feature ' +\n          'from \\'AuthProvider\\' before using it.');\n      } else {\n        // sign in without the refresh token\n        context.dispatch(doSignIn({\n          auth: {\n            token: token,\n            type: tokenType,\n            expiresAt: expTime,\n          },\n          userState: authState ? authState : null,\n          refresh: null,\n        }));\n        return true;\n      }\n    }\n  };\n}\n\n/**\n *@exports useSignIn\n */\nexport default useSignIn;\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;;;AAmBG;AAQH;;;;;AAKG;AACH,SAASA,SAASA,CAAA;EAChB,IAAMC,OAAO,GAAGC,KAAK,CAACC,UAAU,CAACC,WAAW,CAAC;EAC7C,IAAIH,OAAO,KAAK,IAAI,EAAE;IACpB,MAAM,IACNI,YAAY,CAAC,4BAA4B,GACvC,2CAA2C,CAAC;EAC/C;EACD,OAAO,UAACC,YAAkC;IAEtC,IAAAC,KAAK,GAMHD,YAAY,CAAAC,KANT;MACLC,SAAS,GAKPF,YAAY,CALLE,SAAA;MACTC,SAAS,GAIPH,YAAY,CAAAG,SAJL;MACTC,SAAS,GAGPJ,YAAY,CAHLI,SAAA;MACTC,YAAY,GAEVL,YAAY,CAAAK,YAFF;MACZC,oBAAoB,GAClBN,YAAY,CAAAM,oBADM;IAEtB,IAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGL,SAAS,GAAG,EAAE,GAAG,IAAI,CAAC;IACtE,IAAIT,OAAO,CAACQ,SAAS,CAACO,mBAAmB,EAAE;;MAEzC,IAAI,CAAC,CAACL,YAAY,IAAI,CAAC,CAACC,oBAAoB,EAAE;;;QAG5C,IAAMK,oBAAoB,GACxB,IAAIH,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGH,oBAAoB,GAAG,EAAE,GAAG,IAAI,CAAC;QACnEX,OAAO,CAACiB,QAAQ,CAACC,QAAQ,CAAC;UACxBC,IAAI,EAAE;YACJb,KAAK,EAAEA,KAAK;YACZc,IAAI,EAAEb,SAAS;YACfc,SAAS,EAAET;UACZ;UACDU,SAAS,EAAEd,SAAS,GAAGA,SAAS,GAAG,IAAI;UACvCe,OAAO,EAAE;YACPjB,KAAK,EAAEI,YAAY;YACnBW,SAAS,EAAEL;UACZ;QACF,EAAC,CAAC;QACH,OAAO,IAAI;MACZ,OAAM;;;QAGL,MAAM,IAAIZ,YAAY,CAAC,0CAA0C,GAC/D,kCAAkC,CAAC;MACtC;IACF,OAAM;;MAEL,IAAI,CAAC,CAACM,YAAY,IAAI,CAAC,CAACC,oBAAoB,EAAE;;;QAG5C,MAAM,IAAIa,KAAK,CAAC,8CAA8C,GAC5D,2DAA2D,GAC3D,wCAAwC,CAAC;MAC5C,OAAM;;QAELxB,OAAO,CAACiB,QAAQ,CAACC,QAAQ,CAAC;UACxBC,IAAI,EAAE;YACJb,KAAK,EAAEA,KAAK;YACZc,IAAI,EAAEb,SAAS;YACfc,SAAS,EAAET;UACZ;UACDU,SAAS,EAAEd,SAAS,GAAGA,SAAS,GAAG,IAAI;UACvCe,OAAO,EAAE;QACV,EAAC,CAAC;QACH,OAAO,IAAI;MACZ;IACF;EACH,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}