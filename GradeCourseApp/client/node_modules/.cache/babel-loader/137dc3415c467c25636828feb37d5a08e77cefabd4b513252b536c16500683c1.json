{"ast":null,"code":"import * as React from 'react';\nimport { useRef, useEffect, useState, cloneElement } from 'react';\nimport { usePreferencesEditor, PreferenceKeyContextProvider, useTranslate } from 'ra-core';\nimport { alpha, Popover } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport clsx from 'clsx';\n/**\n * Wrap any component with this component to make it configurable\n *\n * When the edit mode is enabled, users will see a button to edit the component;\n * when clicked, the inspector will show the editor element.\n *\n * Creates a context for the preference key, so that both the child component\n * and the editor can access it using usePreferenceKey();\n *\n * @example\n * const ConfigurableTextBlock = ({ preferenceKey = \"TextBlock\", ...props }) => (\n *     <Configurable editor={<TextBlockInspector />} preferenceKey={preferenceKey}>\n *         <TextBlock {...props} />\n *     </Configurable>\n * );\n */\nexport var Configurable = function (props) {\n  var children = props.children,\n    editor = props.editor,\n    preferenceKey = props.preferenceKey,\n    _a = props.openButtonLabel,\n    openButtonLabel = _a === void 0 ? 'ra.configurable.customize' : _a,\n    sx = props.sx;\n  var prefixedPreferenceKey = \"preferences.\".concat(preferenceKey);\n  var preferencesEditorContext = usePreferencesEditor();\n  var hasPreferencesEditorContext = !!preferencesEditorContext;\n  var translate = useTranslate();\n  var _b = preferencesEditorContext || {},\n    isEnabled = _b.isEnabled,\n    setEditor = _b.setEditor,\n    currentPreferenceKey = _b.preferenceKey,\n    setPreferenceKey = _b.setPreferenceKey;\n  var isEditorOpen = prefixedPreferenceKey === currentPreferenceKey;\n  var editorOpenRef = useRef(isEditorOpen);\n  var wrapperRef = useRef(null);\n  var _c = useState(false),\n    isCustomizeButtonVisible = _c[0],\n    setIsCustomizeButtonVisible = _c[1];\n  useEffect(function () {\n    editorOpenRef.current = isEditorOpen;\n  }, [isEditorOpen]);\n  // on unmount, if selected, remove the editor\n  useEffect(function () {\n    return function () {\n      if (!editorOpenRef.current) return;\n      setPreferenceKey && setPreferenceKey(null);\n      setEditor && setEditor(null);\n    };\n  }, [setEditor, setPreferenceKey]);\n  if (!hasPreferencesEditorContext) {\n    return children;\n  }\n  var handleOpenEditor = function () {\n    // include the editorKey as key to force destroy and mount\n    // when switching between two identical editors with different editor keys\n    // otherwise the editor will see an update and its useStore will return one tick later\n    // which would forbid the usage of uncontrolled inputs in the editor\n    setEditor(cloneElement(editor, {\n      preferenceKey: prefixedPreferenceKey,\n      key: prefixedPreferenceKey\n    }));\n    // as we modify the editor, isEditorOpen cannot compare the editor element\n    // we'll compare the editor key instead\n    setPreferenceKey(prefixedPreferenceKey);\n  };\n  var handleShowButton = function (event) {\n    setIsCustomizeButtonVisible(true);\n  };\n  var handleHideButton = function () {\n    setIsCustomizeButtonVisible(false);\n  };\n  return React.createElement(PreferenceKeyContextProvider, {\n    value: prefixedPreferenceKey\n  }, React.createElement(Root, {\n    className: clsx(isEnabled && ConfigurableClasses.editMode, isEditorOpen && ConfigurableClasses.editorActive),\n    sx: sx,\n    ref: wrapperRef,\n    onMouseEnter: isEnabled ? handleShowButton : undefined,\n    onMouseLeave: isEnabled ? handleHideButton : undefined\n  }, children), React.createElement(Popover, {\n    open: isEnabled && (isCustomizeButtonVisible || isEditorOpen),\n    sx: {\n      pointerEvents: 'none',\n      '& .MuiPaper-root': {\n        pointerEvents: 'auto',\n        borderRadius: 10,\n        padding: '2px',\n        lineHeight: 0,\n        backgroundColor: 'warning.light',\n        color: 'warning.contrastText',\n        '&:hover': {\n          cursor: 'pointer'\n        }\n      }\n    },\n    anchorEl: wrapperRef.current,\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'right'\n    },\n    transformOrigin: {\n      vertical: 'center',\n      horizontal: 'center'\n    },\n    onClose: handleHideButton,\n    PaperProps: {\n      elevation: 1,\n      onMouseEnter: handleShowButton,\n      onMouseLeave: handleHideButton,\n      title: translate(openButtonLabel),\n      onClick: handleOpenEditor\n    },\n    disableAutoFocus: true,\n    disableRestoreFocus: true,\n    disableEnforceFocus: true,\n    disableScrollLock: true,\n    marginThreshold: 8\n  }, React.createElement(SettingsIcon\n  // @ts-ignore\n  , {\n    // @ts-ignore\n    fontSize: \"12px\"\n  })));\n};\nvar PREFIX = 'RaConfigurable';\nexport var ConfigurableClasses = {\n  editMode: \"\".concat(PREFIX, \"-editMode\"),\n  editorActive: \"\".concat(PREFIX, \"-editorActive\")\n};\nvar Root = styled('span', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    position: 'relative',\n    display: 'inline-block'\n  }, _b[\"&.\".concat(ConfigurableClasses.editMode)] = {\n    transition: theme.transitions.create('outline'),\n    outline: \"\".concat(alpha(theme.palette.warning.main, 0.3), \" solid 2px\")\n  }, _b[\"&.\".concat(ConfigurableClasses.editMode, \":hover \")] = {\n    outline: \"\".concat(alpha(theme.palette.warning.main, 0.5), \" solid 2px\")\n  }, _b[\"&.\".concat(ConfigurableClasses.editMode, \".\").concat(ConfigurableClasses.editorActive, \" , &.\").concat(ConfigurableClasses.editMode, \".\").concat(ConfigurableClasses.editorActive, \":hover \")] = {\n    outline: \"\".concat(theme.palette.warning.main, \" solid 2px\")\n  }, _b;\n});","map":{"version":3,"names":["React","useRef","useEffect","useState","cloneElement","usePreferencesEditor","PreferenceKeyContextProvider","useTranslate","alpha","Popover","styled","SettingsIcon","clsx","Configurable","props","children","editor","preferenceKey","_a","openButtonLabel","sx","prefixedPreferenceKey","concat","preferencesEditorContext","hasPreferencesEditorContext","translate","_b","isEnabled","setEditor","currentPreferenceKey","setPreferenceKey","isEditorOpen","editorOpenRef","wrapperRef","_c","isCustomizeButtonVisible","setIsCustomizeButtonVisible","current","handleOpenEditor","key","handleShowButton","event","handleHideButton","createElement","value","Root","className","ConfigurableClasses","editMode","editorActive","ref","onMouseEnter","undefined","onMouseLeave","open","pointerEvents","borderRadius","padding","lineHeight","backgroundColor","color","cursor","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","onClose","PaperProps","elevation","title","onClick","disableAutoFocus","disableRestoreFocus","disableEnforceFocus","disableScrollLock","marginThreshold","fontSize","PREFIX","name","overridesResolver","styles","root","theme","position","display","transition","transitions","create","outline","palette","warning","main"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/preferences/Configurable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useRef, useEffect, useState, cloneElement, ReactElement } from 'react';\nimport {\n    usePreferencesEditor,\n    PreferenceKeyContextProvider,\n    useTranslate,\n} from 'ra-core';\nimport { alpha, Popover } from '@mui/material';\nimport { styled, SxProps } from '@mui/material/styles';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport clsx from 'clsx';\n\n/**\n * Wrap any component with this component to make it configurable\n *\n * When the edit mode is enabled, users will see a button to edit the component;\n * when clicked, the inspector will show the editor element.\n *\n * Creates a context for the preference key, so that both the child component\n * and the editor can access it using usePreferenceKey();\n *\n * @example\n * const ConfigurableTextBlock = ({ preferenceKey = \"TextBlock\", ...props }) => (\n *     <Configurable editor={<TextBlockInspector />} preferenceKey={preferenceKey}>\n *         <TextBlock {...props} />\n *     </Configurable>\n * );\n */\nexport const Configurable = (props: ConfigurableProps) => {\n    const {\n        children,\n        editor,\n        preferenceKey,\n        openButtonLabel = 'ra.configurable.customize',\n        sx,\n    } = props;\n\n    const prefixedPreferenceKey = `preferences.${preferenceKey}`;\n    const preferencesEditorContext = usePreferencesEditor();\n    const hasPreferencesEditorContext = !!preferencesEditorContext;\n\n    const translate = useTranslate();\n\n    const {\n        isEnabled,\n        setEditor,\n        preferenceKey: currentPreferenceKey,\n        setPreferenceKey,\n    } = preferencesEditorContext || {};\n\n    const isEditorOpen = prefixedPreferenceKey === currentPreferenceKey;\n    const editorOpenRef = useRef(isEditorOpen);\n    const wrapperRef = useRef(null);\n    const [isCustomizeButtonVisible, setIsCustomizeButtonVisible] = useState(\n        false\n    );\n\n    useEffect(() => {\n        editorOpenRef.current = isEditorOpen;\n    }, [isEditorOpen]);\n\n    // on unmount, if selected, remove the editor\n    useEffect(() => {\n        return () => {\n            if (!editorOpenRef.current) return;\n            setPreferenceKey && setPreferenceKey(null);\n            setEditor && setEditor(null);\n        };\n    }, [setEditor, setPreferenceKey]);\n\n    if (!hasPreferencesEditorContext) {\n        return children;\n    }\n\n    const handleOpenEditor = () => {\n        // include the editorKey as key to force destroy and mount\n        // when switching between two identical editors with different editor keys\n        // otherwise the editor will see an update and its useStore will return one tick later\n        // which would forbid the usage of uncontrolled inputs in the editor\n        setEditor(\n            cloneElement(editor, {\n                preferenceKey: prefixedPreferenceKey,\n                key: prefixedPreferenceKey,\n            })\n        );\n        // as we modify the editor, isEditorOpen cannot compare the editor element\n        // we'll compare the editor key instead\n        setPreferenceKey(prefixedPreferenceKey);\n    };\n\n    const handleShowButton = event => {\n        setIsCustomizeButtonVisible(true);\n    };\n\n    const handleHideButton = () => {\n        setIsCustomizeButtonVisible(false);\n    };\n\n    return (\n        <PreferenceKeyContextProvider value={prefixedPreferenceKey}>\n            <Root\n                className={clsx(\n                    isEnabled && ConfigurableClasses.editMode,\n                    isEditorOpen && ConfigurableClasses.editorActive\n                )}\n                sx={sx}\n                ref={wrapperRef}\n                onMouseEnter={isEnabled ? handleShowButton : undefined}\n                onMouseLeave={isEnabled ? handleHideButton : undefined}\n            >\n                {children}\n            </Root>\n            <Popover\n                open={isEnabled && (isCustomizeButtonVisible || isEditorOpen)}\n                sx={{\n                    pointerEvents: 'none',\n                    '& .MuiPaper-root': {\n                        pointerEvents: 'auto',\n                        borderRadius: 10,\n                        padding: '2px',\n                        lineHeight: 0,\n                        backgroundColor: 'warning.light',\n                        color: 'warning.contrastText',\n                        '&:hover': {\n                            cursor: 'pointer',\n                        },\n                    },\n                }}\n                anchorEl={wrapperRef.current}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n                transformOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                onClose={handleHideButton}\n                PaperProps={{\n                    elevation: 1,\n                    onMouseEnter: handleShowButton,\n                    onMouseLeave: handleHideButton,\n                    title: translate(openButtonLabel),\n                    onClick: handleOpenEditor,\n                }}\n                disableAutoFocus\n                disableRestoreFocus\n                disableEnforceFocus\n                disableScrollLock\n                marginThreshold={8}\n            >\n                <SettingsIcon\n                    // @ts-ignore\n                    fontSize=\"12px\"\n                />\n            </Popover>\n        </PreferenceKeyContextProvider>\n    );\n};\n\nexport interface ConfigurableProps {\n    children: ReactElement;\n    editor: ReactElement;\n    preferenceKey: string;\n    openButtonLabel?: string;\n    sx?: SxProps;\n}\n\nconst PREFIX = 'RaConfigurable';\n\nexport const ConfigurableClasses = {\n    editMode: `${PREFIX}-editMode`,\n    editorActive: `${PREFIX}-editorActive`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    position: 'relative',\n    display: 'inline-block',\n    [`&.${ConfigurableClasses.editMode}`]: {\n        transition: theme.transitions.create('outline'),\n        outline: `${alpha(theme.palette.warning.main, 0.3)} solid 2px`,\n    },\n    [`&.${ConfigurableClasses.editMode}:hover `]: {\n        outline: `${alpha(theme.palette.warning.main, 0.5)} solid 2px`,\n    },\n    [`&.${ConfigurableClasses.editMode}.${ConfigurableClasses.editorActive} , &.${ConfigurableClasses.editMode}.${ConfigurableClasses.editorActive}:hover `]: {\n        outline: `${theme.palette.warning.main} solid 2px`,\n    },\n}));\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,YAAY,QAAsB,OAAO;AAC/E,SACIC,oBAAoB,EACpBC,4BAA4B,EAC5BC,YAAY,QACT,SAAS;AAChB,SAASC,KAAK,EAAEC,OAAO,QAAQ,eAAe;AAC9C,SAASC,MAAM,QAAiB,sBAAsB;AACtD,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,IAAI,MAAM,MAAM;AAEvB;;;;;;;;;;;;;;;;AAgBA,OAAO,IAAMC,YAAY,GAAG,SAAAA,CAACC,KAAwB;EAE7C,IAAAC,QAAQ,GAKRD,KAAK,CAAAC,QALG;IACRC,MAAM,GAINF,KAAK,CAAAE,MAJC;IACNC,aAAa,GAGbH,KAAK,CAAAG,aAHQ;IACbC,EAAA,GAEAJ,KAAK,CAAAK,eAFwC;IAA7CA,eAAe,GAAAD,EAAA,cAAG,2BAA2B,GAAAA,EAAA;IAC7CE,EAAE,GACFN,KAAK,CAAAM,EADH;EAGN,IAAMC,qBAAqB,GAAG,eAAAC,MAAA,CAAeL,aAAa,CAAE;EAC5D,IAAMM,wBAAwB,GAAGlB,oBAAoB,EAAE;EACvD,IAAMmB,2BAA2B,GAAG,CAAC,CAACD,wBAAwB;EAE9D,IAAME,SAAS,GAAGlB,YAAY,EAAE;EAE1B,IAAAmB,EAAA,GAKFH,wBAAwB,IAAI,EAAE;IAJ9BI,SAAS,GAAAD,EAAA,CAAAC,SAAA;IACTC,SAAS,GAAAF,EAAA,CAAAE,SAAA;IACMC,oBAAoB,GAAAH,EAAA,CAAAT,aAAA;IACnCa,gBAAgB,GAAAJ,EAAA,CAAAI,gBACc;EAElC,IAAMC,YAAY,GAAGV,qBAAqB,KAAKQ,oBAAoB;EACnE,IAAMG,aAAa,GAAG/B,MAAM,CAAC8B,YAAY,CAAC;EAC1C,IAAME,UAAU,GAAGhC,MAAM,CAAC,IAAI,CAAC;EACzB,IAAAiC,EAAA,GAA0D/B,QAAQ,CACpE,KAAK,CACR;IAFMgC,wBAAwB,GAAAD,EAAA;IAAEE,2BAA2B,GAAAF,EAAA,GAE3D;EAEDhC,SAAS,CAAC;IACN8B,aAAa,CAACK,OAAO,GAAGN,YAAY;EACxC,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB;EACA7B,SAAS,CAAC;IACN,OAAO;MACH,IAAI,CAAC8B,aAAa,CAACK,OAAO,EAAE;MAC5BP,gBAAgB,IAAIA,gBAAgB,CAAC,IAAI,CAAC;MAC1CF,SAAS,IAAIA,SAAS,CAAC,IAAI,CAAC;IAChC,CAAC;EACL,CAAC,EAAE,CAACA,SAAS,EAAEE,gBAAgB,CAAC,CAAC;EAEjC,IAAI,CAACN,2BAA2B,EAAE;IAC9B,OAAOT,QAAQ;;EAGnB,IAAMuB,gBAAgB,GAAG,SAAAA,CAAA;IACrB;IACA;IACA;IACA;IACAV,SAAS,CACLxB,YAAY,CAACY,MAAM,EAAE;MACjBC,aAAa,EAAEI,qBAAqB;MACpCkB,GAAG,EAAElB;KACR,CAAC,CACL;IACD;IACA;IACAS,gBAAgB,CAACT,qBAAqB,CAAC;EAC3C,CAAC;EAED,IAAMmB,gBAAgB,GAAG,SAAAA,CAAAC,KAAK;IAC1BL,2BAA2B,CAAC,IAAI,CAAC;EACrC,CAAC;EAED,IAAMM,gBAAgB,GAAG,SAAAA,CAAA;IACrBN,2BAA2B,CAAC,KAAK,CAAC;EACtC,CAAC;EAED,OACIpC,KAAA,CAAA2C,aAAA,CAACrC,4BAA4B;IAACsC,KAAK,EAAEvB;EAAqB,GACtDrB,KAAA,CAAA2C,aAAA,CAACE,IAAI;IACDC,SAAS,EAAElC,IAAI,CACXe,SAAS,IAAIoB,mBAAmB,CAACC,QAAQ,EACzCjB,YAAY,IAAIgB,mBAAmB,CAACE,YAAY,CACnD;IACD7B,EAAE,EAAEA,EAAE;IACN8B,GAAG,EAAEjB,UAAU;IACfkB,YAAY,EAAExB,SAAS,GAAGa,gBAAgB,GAAGY,SAAS;IACtDC,YAAY,EAAE1B,SAAS,GAAGe,gBAAgB,GAAGU;EAAS,GAErDrC,QAAQ,CACN,EACPf,KAAA,CAAA2C,aAAA,CAAClC,OAAO;IACJ6C,IAAI,EAAE3B,SAAS,KAAKQ,wBAAwB,IAAIJ,YAAY,CAAC;IAC7DX,EAAE,EAAE;MACAmC,aAAa,EAAE,MAAM;MACrB,kBAAkB,EAAE;QAChBA,aAAa,EAAE,MAAM;QACrBC,YAAY,EAAE,EAAE;QAChBC,OAAO,EAAE,KAAK;QACdC,UAAU,EAAE,CAAC;QACbC,eAAe,EAAE,eAAe;QAChCC,KAAK,EAAE,sBAAsB;QAC7B,SAAS,EAAE;UACPC,MAAM,EAAE;;;KAGnB;IACDC,QAAQ,EAAE7B,UAAU,CAACI,OAAO;IAC5B0B,YAAY,EAAE;MACVC,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;KACf;IACDC,eAAe,EAAE;MACbF,QAAQ,EAAE,QAAQ;MAClBC,UAAU,EAAE;KACf;IACDE,OAAO,EAAEzB,gBAAgB;IACzB0B,UAAU,EAAE;MACRC,SAAS,EAAE,CAAC;MACZlB,YAAY,EAAEX,gBAAgB;MAC9Ba,YAAY,EAAEX,gBAAgB;MAC9B4B,KAAK,EAAE7C,SAAS,CAACN,eAAe,CAAC;MACjCoD,OAAO,EAAEjC;KACZ;IACDkC,gBAAgB;IAChBC,mBAAmB;IACnBC,mBAAmB;IACnBC,iBAAiB;IACjBC,eAAe,EAAE;EAAC,GAElB5E,KAAA,CAAA2C,aAAA,CAAChC;EACG;EAAA,E;IAAA;IACAkE,QAAQ,EAAC;EAAM,EACjB,CACI,CACiB;AAEvC,CAAC;AAUD,IAAMC,MAAM,GAAG,gBAAgB;AAE/B,OAAO,IAAM/B,mBAAmB,GAAG;EAC/BC,QAAQ,EAAE,GAAA1B,MAAA,CAAGwD,MAAM,cAAW;EAC9B7B,YAAY,EAAE,GAAA3B,MAAA,CAAGwD,MAAM;CAC1B;AAED,IAAMjC,IAAI,GAAGnC,MAAM,CAAC,MAAM,EAAE;EACxBqE,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,SAAAA,CAAClE,KAAK,EAAEmE,MAAM;IAAK,OAAAA,MAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC,UAAChE,EAAS;;MAAPiE,KAAK,GAAAjE,EAAA,CAAAiE,KAAA;EAAO,OAAAzD,EAAA;IACd0D,QAAQ,EAAE,UAAU;IACpBC,OAAO,EAAE;KACT3D,EAAA,CAAC,KAAAJ,MAAA,CAAKyB,mBAAmB,CAACC,QAAQ,CAAE,IAAG;IACnCsC,UAAU,EAAEH,KAAK,CAACI,WAAW,CAACC,MAAM,CAAC,SAAS,CAAC;IAC/CC,OAAO,EAAE,GAAAnE,MAAA,CAAGd,KAAK,CAAC2E,KAAK,CAACO,OAAO,CAACC,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC;GACrD,EACDlE,EAAA,CAAC,KAAAJ,MAAA,CAAKyB,mBAAmB,CAACC,QAAQ,YAAS,IAAG;IAC1CyC,OAAO,EAAE,GAAAnE,MAAA,CAAGd,KAAK,CAAC2E,KAAK,CAACO,OAAO,CAACC,OAAO,CAACC,IAAI,EAAE,GAAG,CAAC;GACrD,EACDlE,EAAA,CAAC,KAAAJ,MAAA,CAAKyB,mBAAmB,CAACC,QAAQ,OAAA1B,MAAA,CAAIyB,mBAAmB,CAACE,YAAY,WAAA3B,MAAA,CAAQyB,mBAAmB,CAACC,QAAQ,OAAA1B,MAAA,CAAIyB,mBAAmB,CAACE,YAAY,YAAS,IAAG;IACtJwC,OAAO,EAAE,GAAAnE,MAAA,CAAG6D,KAAK,CAACO,OAAO,CAACC,OAAO,CAACC,IAAI;GACzC,E;AAZa,CAahB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}