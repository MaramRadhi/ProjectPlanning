{"ast":null,"code":"var _jsxFileName = \"/Users/imrun10/Documents/GitHub/GradeCourseApp/client/src/pages/CoursePage.js\",\n  _s = $RefreshSig$();\nimport react from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\"; // useLocation will allow us to use data sent from other pages when they link here\nimport Axios from \"axios\"; // Axios is a HTTP client for the browser and node.js (send data to backend)\nimport { useState } from \"react\"; // useState is a hook that allows us to use variables in the html portoin of the code\nimport \"../App.css\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Table from \"../components/Table\"; // table component\nimport Papa from \"papaparse\"; // papa parse is a library that allows us to parse csv files\nimport Navbar from \"../components/NavBar\";\nimport Error1 from \"../components/Error1\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CoursePage() {\n  _s();\n  const location = useLocation(); // we create and instance of this function and use it to get the data sent from the previous page\n  const [importedStudents, setImportedStudents] = useState([]); // this use state will help us save the data we get from the backend of all the students in the course the user clicked\n\n  navigate = useNavigate(); // intiales an instance of the useNavigate function and use this instance to route\n  function goCourseDetails() {\n    navigate(\"course\", {\n      state: location.state\n    });\n  } // navigate to the course page and send the course data (props [object]) to the course page\n\n  /*------------------------------- Axios Requests -------------------------------*/\n  Axios.get(\"http://localhost:3001/api/student\", {\n    // this is a get request to the backend to get all the students in the course the user clicked\n    params: {\n      // this is how you send data to the back end when using a get request\n      name: location.state.name\n      // we send the name of the course so when parsing the test_student array we can get the right students for the right course\n    }\n  }).then(response => setImportedStudents(response.data)); // we save the data we get from the backend in the importedStudents variable\n  console.log(importedStudents); // this is just a console log to make sure the data was saved in the importedStudents variable\n  function sendFile() {\n    // this function will send the csv file to the backend\n    Axios.post(\"http://localhost:3001/api/save/\", {\n      arr: parsedData // this is how we send data to the backend when using a post request, parsedData is an object, and you could add more objects or vars if you want after the comma but it has to be same format\n    }).then(console.log(\"SENT\")); // this is just a console log to make sure the data was sent\n  }\n\n  function showData() {\n    // this function will send a get request to the backend to check the array has been saved in the database\n    Axios.get(\"http://localhost:3001/api/checkArray\").then(console.log(\"shown\"));\n  }\n  /*--------------------------------------------------------------------------*/\n\n  /*------------------------------- Convert csv to an array -------------------------------*/\n  //State to store all data in a list of objects\n  const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n  const changeHandler = event => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map(d => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // Parsed Data Response in array format\n        setParsedData(results.data);\n\n        // Filtered Column Names\n        setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        setValues(valuesArray);\n      }\n    });\n  };\n\n  /*-----------------------------------------------------------------------------------*/\n\n  if (importedStudents === \"MISSING\") {\n    return /*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Error1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 42\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          class: \"smaller-title\",\n          children: location.state.name.charAt(0).toUpperCase() + location.state.name.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(Table, {\n              props: importedStudents,\n              code: 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n            class: \"footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              class: \"btn btn-primary\",\n              type: \"file\",\n              name: \"file\",\n              accept: \".csv\",\n              onChange: changeHandler // this is how we call the function that converts the csv file to an array\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn btn-primary\",\n              style: {\n                backgroundColor: \"RGB(100, 239, 100\",\n                borderColor: \"RGB(100, 239, 100)\"\n              },\n              onClick: e => {\n                sendFile();\n                showData();\n              },\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn btn-primary sign-out\",\n              style: {\n                color: \"white\",\n                fontSize: \"20px\"\n              },\n              onClick: goCourseDetails(),\n              children: \" Expand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(CoursePage, \"VG5dPeuCw/mdBD5NkKUZ7CjGHbs=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = CoursePage;\nvar _c;\n$RefreshReg$(_c, \"CoursePage\");","map":{"version":3,"names":["react","useLocation","useNavigate","Axios","useState","Table","Papa","Navbar","Error1","jsxDEV","_jsxDEV","CoursePage","_s","location","importedStudents","setImportedStudents","navigate","goCourseDetails","state","get","params","name","then","response","data","console","log","sendFile","post","arr","parsedData","showData","setParsedData","tableRows","setTableRows","values","setValues","changeHandler","event","parse","target","files","header","skipEmptyLines","complete","results","rowsArray","valuesArray","map","d","push","Object","keys","children","fileName","_jsxFileName","lineNumber","columnNumber","class","charAt","toUpperCase","slice","id","props","code","type","accept","onChange","style","backgroundColor","borderColor","onClick","e","color","fontSize","_c","$RefreshReg$"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/src/pages/CoursePage.js"],"sourcesContent":["import react from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\"; // useLocation will allow us to use data sent from other pages when they link here\nimport Axios from \"axios\"; // Axios is a HTTP client for the browser and node.js (send data to backend)\nimport { useState } from \"react\"; // useState is a hook that allows us to use variables in the html portoin of the code\nimport \"../App.css\";\n\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Table from \"../components/Table\"; // table component\nimport Papa from \"papaparse\"; // papa parse is a library that allows us to parse csv files\nimport Navbar from \"../components/NavBar\";\nimport Error1 from \"../components/Error1\";\nexport default function CoursePage() {\n  const location = useLocation(); // we create and instance of this function and use it to get the data sent from the previous page\n  const [importedStudents, setImportedStudents] = useState([]); // this use state will help us save the data we get from the backend of all the students in the course the user clicked\n\n  navigate = useNavigate(); // intiales an instance of the useNavigate function and use this instance to route\n  function goCourseDetails() {\n  \n    navigate(\"course\", {state: location.state});} // navigate to the course page and send the course data (props [object]) to the course page\n\n  /*------------------------------- Axios Requests -------------------------------*/\n  Axios.get(\"http://localhost:3001/api/student\", {\n    // this is a get request to the backend to get all the students in the course the user clicked\n    params: {\n      // this is how you send data to the back end when using a get request\n      name: location.state.name,\n      // we send the name of the course so when parsing the test_student array we can get the right students for the right course\n    },\n  }).then((response) => setImportedStudents(response.data)); // we save the data we get from the backend in the importedStudents variable\n  console.log(importedStudents); // this is just a console log to make sure the data was saved in the importedStudents variable\n  function sendFile() {\n    // this function will send the csv file to the backend\n    Axios.post(\"http://localhost:3001/api/save/\", {\n      arr: parsedData, // this is how we send data to the backend when using a post request, parsedData is an object, and you could add more objects or vars if you want after the comma but it has to be same format\n    }).then(console.log(\"SENT\")); // this is just a console log to make sure the data was sent\n  }\n\n  function showData() {\n\n    // this function will send a get request to the backend to check the array has been saved in the database\n    Axios.get(\"http://localhost:3001/api/checkArray\").then(\n      console.log(\"shown\")\n    );\n  }\n  /*--------------------------------------------------------------------------*/\n\n  /*------------------------------- Convert csv to an array -------------------------------*/\n  //State to store all data in a list of objects\n  const [parsedData, setParsedData] = useState([]);\n\n  //State to store table Column name\n  const [tableRows, setTableRows] = useState([]);\n\n  //State to store the values\n  const [values, setValues] = useState([]);\n\n  const changeHandler = (event) => {\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const rowsArray = [];\n        const valuesArray = [];\n\n        // Iterating data to get column name and their values\n        results.data.map((d) => {\n          rowsArray.push(Object.keys(d));\n          valuesArray.push(Object.values(d));\n        });\n\n        // Parsed Data Response in array format\n        setParsedData(results.data);\n\n        // Filtered Column Names\n        setTableRows(rowsArray[0]);\n\n        // Filtered Values\n        setValues(valuesArray);\n      },\n    });\n  };\n\n  /*-----------------------------------------------------------------------------------*/\n\n\n  if(importedStudents === \"MISSING\"){\n    return (<header><Navbar /></header>, <Error1 />)\n  }\n  else{\n    return (\n      <div>\n        <header>\n          <Navbar />\n          <h1 class=\"smaller-title\">\n            {location.state.name.charAt(0).toUpperCase() +\n              location.state.name.slice(1)}\n          </h1>\n        </header>\n\n        <body>\n          <div class=\"wrapper\">\n            <div id=\"content\">\n              <Table props={importedStudents} code={3}/>{\" \"}\n              {/* this is how we pass data to the table component */}\n            </div>\n            <footer class=\"footer\">\n              <input\n                class=\"btn btn-primary\"\n                type=\"file\"\n                name=\"file\"\n                accept=\".csv\"\n                onChange={changeHandler} // this is how we call the function that converts the csv file to an array\n              />\n\n              <button\n                class=\"btn btn-primary\"\n                style={{\n                  backgroundColor: \"RGB(100, 239, 100\",\n                  borderColor: \"RGB(100, 239, 100)\",\n                }}\n                onClick={(e) => {\n                  sendFile();\n                  showData();\n                }}\n              >\n                +\n              </button>\n              <button class = \"btn btn-primary sign-out\" style = {{color:\"white\",fontSize:\"20px\"}} onClick={goCourseDetails()}> Expand</button>\n            </footer>\n          </div>\n        </body>\n      </div>\n    );\n  }}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}