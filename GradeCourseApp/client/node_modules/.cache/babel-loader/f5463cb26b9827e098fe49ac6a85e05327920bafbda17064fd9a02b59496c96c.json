{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { useCallback, useMemo, useEffect, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSaveContext } from '../controller';\nimport { useRecordContext } from '../controller';\nimport getFormInitialValues from './getFormInitialValues';\nimport { getSimpleValidationResolver } from './getSimpleValidationResolver';\nimport { setSubmissionErrors } from './setSubmissionErrors';\nimport { useNotifyIsFormInvalid } from './useNotifyIsFormInvalid';\nimport { useWarnWhenUnsavedChanges } from './useWarnWhenUnsavedChanges';\nimport { sanitizeEmptyValues as sanitizeValues } from './sanitizeEmptyValues';\n/**\n * Wrapper around react-hook-form's useForm\n *\n * This hook adds the following features to react-hook-form's useForm:\n *\n * - form initialization based on RecordContext\n * - validation based on a validate function\n * - sanitization of empty values\n * - notification on invalid form\n * - stop form submission event propagation\n */\nexport var useAugmentedForm = function (props) {\n  var context = props.context,\n    _a = props.criteriaMode,\n    criteriaMode = _a === void 0 ? 'firstError' : _a,\n    defaultValues = props.defaultValues,\n    delayError = props.delayError,\n    formRootPathname = props.formRootPathname,\n    mode = props.mode,\n    resolver = props.resolver,\n    _b = props.reValidateMode,\n    reValidateMode = _b === void 0 ? 'onChange' : _b,\n    onSubmit = props.onSubmit,\n    sanitizeEmptyValues = props.sanitizeEmptyValues,\n    shouldFocusError = props.shouldFocusError,\n    shouldUnregister = props.shouldUnregister,\n    shouldUseNativeValidation = props.shouldUseNativeValidation,\n    warnWhenUnsavedChanges = props.warnWhenUnsavedChanges,\n    validate = props.validate;\n  var record = useRecordContext(props);\n  var saveContext = useSaveContext();\n  var defaultValuesIncludingRecord = useMemo(function () {\n    return getFormInitialValues(defaultValues, record);\n  },\n  // eslint-disable-next-line\n  [\n  // eslint-disable-next-line\n  JSON.stringify({\n    defaultValues: typeof defaultValues === 'function' ? 'function' : defaultValues,\n    record: record\n  })]);\n  var finalResolver = resolver ? resolver : validate ? getSimpleValidationResolver(validate) : undefined;\n  var form = useForm({\n    context: context,\n    criteriaMode: criteriaMode,\n    defaultValues: defaultValuesIncludingRecord,\n    delayError: delayError,\n    mode: mode,\n    reValidateMode: reValidateMode,\n    resolver: finalResolver,\n    shouldFocusError: shouldFocusError,\n    shouldUnregister: shouldUnregister,\n    shouldUseNativeValidation: shouldUseNativeValidation\n  });\n  var formRef = useRef(form);\n  // According to react-hook-form docs: https://react-hook-form.com/api/useform/formstate\n  // `formState` must be read before a render in order to enable the state update.\n  var _c = form.formState,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isSubmitting = _c.isSubmitting,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isDirty = _c.isDirty,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isValid = _c.isValid,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isValidating = _c.isValidating,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    dirtyFields = _c.dirtyFields,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    errors = _c.errors,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    submitCount = _c.submitCount,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    touchedFields = _c.touchedFields,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isSubmitted = _c.isSubmitted,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isSubmitSuccessful = _c.isSubmitSuccessful;\n  // initialize form with record\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(function () {\n    if (!record) {\n      return;\n    }\n    var initialValues = getFormInitialValues(defaultValues, record);\n    form.reset(initialValues);\n  }, [JSON.stringify({\n    defaultValues: typeof defaultValues === 'function' ? 'function' : defaultValues,\n    record: record\n  })]);\n  /* eslint-enable react-hooks/exhaustive-deps */\n  // notify on invalid form\n  useNotifyIsFormInvalid(form.control);\n  // warn when unsaved change\n  useWarnWhenUnsavedChanges(Boolean(warnWhenUnsavedChanges), formRootPathname, form.control);\n  // submit callbacks\n  var handleSubmit = useCallback(function (values, event) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var errors, finalValues;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            finalValues = sanitizeEmptyValues ? sanitizeValues(values, record) : values;\n            if (!onSubmit) return [3 /*break*/, 2];\n            return [4 /*yield*/, onSubmit(finalValues, event)];\n          case 1:\n            errors = _a.sent();\n            _a.label = 2;\n          case 2:\n            if (!(onSubmit == null && (saveContext === null || saveContext === void 0 ? void 0 : saveContext.save))) return [3 /*break*/, 4];\n            return [4 /*yield*/, saveContext.save(finalValues, event)];\n          case 3:\n            errors = _a.sent();\n            _a.label = 4;\n          case 4:\n            if (errors != null) {\n              setSubmissionErrors(errors, formRef.current.setError);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [onSubmit, saveContext, sanitizeEmptyValues, record]);\n  var formHandleSubmit = useCallback(function (event) {\n    if (!event.defaultPrevented) {\n      // Prevent outer forms to receive the event\n      event.stopPropagation();\n      form.handleSubmit(handleSubmit)(event);\n    }\n    return;\n  }, [form, handleSubmit]);\n  return {\n    form: form,\n    handleSubmit: handleSubmit,\n    formHandleSubmit: formHandleSubmit\n  };\n};","map":{"version":3,"names":["useCallback","useMemo","useEffect","useRef","useForm","useSaveContext","useRecordContext","getFormInitialValues","getSimpleValidationResolver","setSubmissionErrors","useNotifyIsFormInvalid","useWarnWhenUnsavedChanges","sanitizeEmptyValues","sanitizeValues","useAugmentedForm","props","context","_a","criteriaMode","defaultValues","delayError","formRootPathname","mode","resolver","_b","reValidateMode","onSubmit","shouldFocusError","shouldUnregister","shouldUseNativeValidation","warnWhenUnsavedChanges","validate","record","saveContext","defaultValuesIncludingRecord","JSON","stringify","finalResolver","undefined","form","formRef","_c","formState","isSubmitting","isDirty","isValid","isValidating","dirtyFields","errors","submitCount","touchedFields","isSubmitted","isSubmitSuccessful","initialValues","reset","control","Boolean","handleSubmit","values","event","__awaiter","finalValues","sent","save","current","setError","formHandleSubmit","defaultPrevented","stopPropagation"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/form/useAugmentedForm.ts"],"sourcesContent":["import {\n    BaseSyntheticEvent,\n    useCallback,\n    useMemo,\n    useEffect,\n    useRef,\n} from 'react';\nimport {\n    FieldValues,\n    SubmitHandler,\n    useForm,\n    UseFormProps,\n} from 'react-hook-form';\n\nimport { RaRecord } from '../types';\nimport { useSaveContext } from '../controller';\nimport { useRecordContext } from '../controller';\nimport getFormInitialValues from './getFormInitialValues';\nimport {\n    getSimpleValidationResolver,\n    ValidateForm,\n} from './getSimpleValidationResolver';\nimport { setSubmissionErrors } from './setSubmissionErrors';\nimport { useNotifyIsFormInvalid } from './useNotifyIsFormInvalid';\nimport { useWarnWhenUnsavedChanges } from './useWarnWhenUnsavedChanges';\nimport { sanitizeEmptyValues as sanitizeValues } from './sanitizeEmptyValues';\n\n/**\n * Wrapper around react-hook-form's useForm\n *\n * This hook adds the following features to react-hook-form's useForm:\n *\n * - form initialization based on RecordContext\n * - validation based on a validate function\n * - sanitization of empty values\n * - notification on invalid form\n * - stop form submission event propagation\n */\nexport const useAugmentedForm = (props: UseAugmentedFormProps) => {\n    const {\n        context,\n        criteriaMode = 'firstError',\n        defaultValues,\n        delayError,\n        formRootPathname,\n        mode,\n        resolver,\n        reValidateMode = 'onChange',\n        onSubmit,\n        sanitizeEmptyValues,\n        shouldFocusError,\n        shouldUnregister,\n        shouldUseNativeValidation,\n        warnWhenUnsavedChanges,\n        validate,\n    } = props;\n    const record = useRecordContext(props);\n    const saveContext = useSaveContext();\n\n    const defaultValuesIncludingRecord = useMemo(\n        () => getFormInitialValues(defaultValues, record),\n        // eslint-disable-next-line\n        [\n            // eslint-disable-next-line\n            JSON.stringify({\n                defaultValues:\n                    typeof defaultValues === 'function'\n                        ? 'function'\n                        : defaultValues,\n                record,\n            }),\n        ]\n    );\n\n    const finalResolver = resolver\n        ? resolver\n        : validate\n        ? getSimpleValidationResolver(validate)\n        : undefined;\n\n    const form = useForm({\n        context,\n        criteriaMode,\n        defaultValues: defaultValuesIncludingRecord,\n        delayError,\n        mode,\n        reValidateMode,\n        resolver: finalResolver,\n        shouldFocusError,\n        shouldUnregister,\n        shouldUseNativeValidation,\n    });\n\n    const formRef = useRef(form);\n\n    // According to react-hook-form docs: https://react-hook-form.com/api/useform/formstate\n    // `formState` must be read before a render in order to enable the state update.\n    const {\n        formState: {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isSubmitting,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isDirty,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isValid,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isValidating,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            dirtyFields,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            errors,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            submitCount,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            touchedFields,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isSubmitted,\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            isSubmitSuccessful,\n        },\n    } = form;\n\n    // initialize form with record\n    /* eslint-disable react-hooks/exhaustive-deps */\n    useEffect(() => {\n        if (!record) {\n            return;\n        }\n        const initialValues = getFormInitialValues(defaultValues, record);\n        form.reset(initialValues);\n    }, [\n        JSON.stringify({\n            defaultValues:\n                typeof defaultValues === 'function'\n                    ? 'function'\n                    : defaultValues,\n            record,\n        }),\n    ]);\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    // notify on invalid form\n    useNotifyIsFormInvalid(form.control);\n\n    // warn when unsaved change\n    useWarnWhenUnsavedChanges(\n        Boolean(warnWhenUnsavedChanges),\n        formRootPathname,\n        form.control\n    );\n\n    // submit callbacks\n    const handleSubmit = useCallback(\n        async (values, event) => {\n            let errors;\n            const finalValues = sanitizeEmptyValues\n                ? sanitizeValues(values, record)\n                : values;\n            if (onSubmit) {\n                errors = await onSubmit(finalValues, event);\n            }\n            if (onSubmit == null && saveContext?.save) {\n                errors = await saveContext.save(finalValues, event);\n            }\n            if (errors != null) {\n                setSubmissionErrors(errors, formRef.current.setError);\n            }\n        },\n        [onSubmit, saveContext, sanitizeEmptyValues, record]\n    );\n\n    const formHandleSubmit = useCallback(\n        (event: BaseSyntheticEvent) => {\n            if (!event.defaultPrevented) {\n                // Prevent outer forms to receive the event\n                event.stopPropagation();\n                form.handleSubmit(handleSubmit)(event);\n            }\n            return;\n        },\n        [form, handleSubmit]\n    );\n\n    return {\n        form,\n        handleSubmit,\n        formHandleSubmit,\n    };\n};\n\nexport type UseAugmentedFormProps = UseFormOwnProps &\n    Omit<UseFormProps, 'onSubmit'> & {\n        validate?: ValidateForm;\n    };\n\nexport interface UseFormOwnProps {\n    defaultValues?: any;\n    formRootPathname?: string;\n    record?: Partial<RaRecord>;\n    onSubmit?: SubmitHandler<FieldValues>;\n    warnWhenUnsavedChanges?: boolean;\n    sanitizeEmptyValues?: boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}