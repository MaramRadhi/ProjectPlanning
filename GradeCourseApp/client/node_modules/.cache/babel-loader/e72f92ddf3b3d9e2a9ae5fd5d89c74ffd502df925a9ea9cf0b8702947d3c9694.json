{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useEffect } from 'react';\nimport { useController, useFormContext } from 'react-hook-form';\nimport get from 'lodash/get';\nimport { useRecordContext } from '../controller';\nimport { composeValidators } from './validate';\nimport isRequired from './isRequired';\nimport { useFormGroupContext } from './useFormGroupContext';\nimport { useGetValidationErrorMessage } from './useGetValidationErrorMessage';\nimport { useFormGroups } from './useFormGroups';\nimport { useApplyInputDefaultValues } from './useApplyInputDefaultValues';\n// replace null or undefined values by empty string to avoid controlled/uncontrolled input warning\nvar defaultFormat = function (value) {\n  return value == null ? '' : value;\n};\n// parse empty string into null as it's more suitable for a majority of backends\nvar defaultParse = function (value) {\n  return value === '' ? null : value;\n};\nexport var useInput = function (props) {\n  var defaultValue = props.defaultValue,\n    _a = props.format,\n    format = _a === void 0 ? defaultFormat : _a,\n    id = props.id,\n    isRequiredOption = props.isRequired,\n    name = props.name,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    _b = props.parse,\n    parse = _b === void 0 ? defaultParse : _b,\n    source = props.source,\n    validate = props.validate,\n    options = __rest(props, [\"defaultValue\", \"format\", \"id\", \"isRequired\", \"name\", \"onBlur\", \"onChange\", \"parse\", \"source\", \"validate\"]);\n  var finalName = name || source;\n  var formGroupName = useFormGroupContext();\n  var formGroups = useFormGroups();\n  var record = useRecordContext();\n  var getValidationErrorMessage = useGetValidationErrorMessage();\n  var formContext = useFormContext();\n  useEffect(function () {\n    if (!formGroups || formGroupName == null) {\n      return;\n    }\n    formGroups.registerField(source, formGroupName);\n    return function () {\n      formGroups.unregisterField(source, formGroupName);\n    };\n  }, [formGroups, formGroupName, source]);\n  var sanitizedValidate = Array.isArray(validate) ? composeValidators(validate) : validate;\n  // Fetch the defaultValue from the record if available or apply the provided defaultValue.\n  // This ensures dynamically added inputs have their value set correctly (ArrayInput for example).\n  // We don't do this for the form level defaultValues so that it works as it should in react-hook-form\n  // (i.e. field level defaultValue override form level defaultValues for this field).\n  var _c = useController(__assign({\n      name: finalName,\n      defaultValue: get(record, source, defaultValue),\n      rules: {\n        validate: function (value) {\n          return __awaiter(void 0, void 0, void 0, function () {\n            var error;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  if (!sanitizedValidate) return [2 /*return*/, true];\n                  return [4 /*yield*/, sanitizedValidate(value, formContext.getValues(), props)];\n                case 1:\n                  error = _a.sent();\n                  if (!error) return [2 /*return*/, true];\n                  return [2 /*return*/, getValidationErrorMessage(error)];\n              }\n            });\n          });\n        }\n      }\n    }, options)),\n    controllerField = _c.field,\n    fieldState = _c.fieldState,\n    formState = _c.formState;\n  // Because our forms may receive an asynchronously loaded record for instance,\n  // they may reset their default values which would override the input default value.\n  // This hook ensures that the input default value is applied when a new record is loaded but has\n  // no value for the input.\n  useApplyInputDefaultValues(props);\n  var field = __assign(__assign({}, controllerField), {\n    value: format ? format(controllerField.value) : controllerField.value,\n    onBlur: function () {\n      var event = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        event[_i] = arguments[_i];\n      }\n      if (onBlur) {\n        onBlur.apply(void 0, event);\n      }\n      controllerField.onBlur();\n    },\n    onChange: function () {\n      var _a, _b, _c, _d, _e;\n      var event = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        event[_i] = arguments[_i];\n      }\n      if (onChange) {\n        onChange.apply(void 0, event);\n      }\n      var eventOrValue = props.type === 'checkbox' && ((_b = (_a = event[0]) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.value) === 'on' ? event[0].target.checked : (_e = (_d = (_c = event[0]) === null || _c === void 0 ? void 0 : _c.target) === null || _d === void 0 ? void 0 : _d.value) !== null && _e !== void 0 ? _e : event[0];\n      controllerField.onChange(parse ? parse(eventOrValue) : eventOrValue);\n    }\n  });\n  return {\n    id: id || source,\n    field: field,\n    fieldState: fieldState,\n    formState: formState,\n    isRequired: isRequiredOption || isRequired(validate)\n  };\n};","map":{"version":3,"names":["useEffect","useController","useFormContext","get","useRecordContext","composeValidators","isRequired","useFormGroupContext","useGetValidationErrorMessage","useFormGroups","useApplyInputDefaultValues","defaultFormat","value","defaultParse","useInput","props","defaultValue","_a","format","id","isRequiredOption","name","onBlur","onChange","_b","parse","source","validate","options","__rest","finalName","formGroupName","formGroups","record","getValidationErrorMessage","formContext","registerField","unregisterField","sanitizedValidate","Array","isArray","_c","__assign","rules","__awaiter","getValues","error","sent","controllerField","field","fieldState","formState","event","_i","arguments","length","apply","eventOrValue","type","target","checked","_e","_d"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/form/useInput.ts"],"sourcesContent":["import { ReactElement, useEffect } from 'react';\nimport {\n    ControllerFieldState,\n    ControllerRenderProps,\n    useController,\n    UseControllerProps,\n    UseControllerReturn,\n    useFormContext,\n    UseFormStateReturn,\n} from 'react-hook-form';\nimport get from 'lodash/get';\n\nimport { useRecordContext } from '../controller';\nimport { composeValidators, Validator } from './validate';\nimport isRequired from './isRequired';\nimport { useFormGroupContext } from './useFormGroupContext';\nimport { useGetValidationErrorMessage } from './useGetValidationErrorMessage';\nimport { useFormGroups } from './useFormGroups';\nimport { useApplyInputDefaultValues } from './useApplyInputDefaultValues';\n\n// replace null or undefined values by empty string to avoid controlled/uncontrolled input warning\nconst defaultFormat = (value: any) => (value == null ? '' : value);\n// parse empty string into null as it's more suitable for a majority of backends\nconst defaultParse = (value: string) => (value === '' ? null : value);\n\nexport const useInput = (props: InputProps): UseInputValue => {\n    const {\n        defaultValue,\n        format = defaultFormat,\n        id,\n        isRequired: isRequiredOption,\n        name,\n        onBlur,\n        onChange,\n        parse = defaultParse,\n        source,\n        validate,\n        ...options\n    } = props;\n    const finalName = name || source;\n    const formGroupName = useFormGroupContext();\n    const formGroups = useFormGroups();\n    const record = useRecordContext();\n    const getValidationErrorMessage = useGetValidationErrorMessage();\n    const formContext = useFormContext();\n\n    useEffect(() => {\n        if (!formGroups || formGroupName == null) {\n            return;\n        }\n\n        formGroups.registerField(source, formGroupName);\n\n        return () => {\n            formGroups.unregisterField(source, formGroupName);\n        };\n    }, [formGroups, formGroupName, source]);\n\n    const sanitizedValidate = Array.isArray(validate)\n        ? composeValidators(validate)\n        : validate;\n\n    // Fetch the defaultValue from the record if available or apply the provided defaultValue.\n    // This ensures dynamically added inputs have their value set correctly (ArrayInput for example).\n    // We don't do this for the form level defaultValues so that it works as it should in react-hook-form\n    // (i.e. field level defaultValue override form level defaultValues for this field).\n    const { field: controllerField, fieldState, formState } = useController({\n        name: finalName,\n        defaultValue: get(record, source, defaultValue),\n        rules: {\n            validate: async value => {\n                if (!sanitizedValidate) return true;\n                const error = await sanitizedValidate(\n                    value,\n                    formContext.getValues(),\n                    props\n                );\n\n                if (!error) return true;\n                return getValidationErrorMessage(error);\n            },\n        },\n        ...options,\n    });\n\n    // Because our forms may receive an asynchronously loaded record for instance,\n    // they may reset their default values which would override the input default value.\n    // This hook ensures that the input default value is applied when a new record is loaded but has\n    // no value for the input.\n    useApplyInputDefaultValues(props);\n\n    const field = {\n        ...controllerField,\n        value: format ? format(controllerField.value) : controllerField.value,\n        onBlur: (...event: any[]) => {\n            if (onBlur) {\n                onBlur(...event);\n            }\n            controllerField.onBlur();\n        },\n        onChange: (...event: any[]) => {\n            if (onChange) {\n                onChange(...event);\n            }\n            const eventOrValue = (props.type === 'checkbox' &&\n            event[0]?.target?.value === 'on'\n                ? event[0].target.checked\n                : event[0]?.target?.value ?? event[0]) as any;\n            controllerField.onChange(\n                parse ? parse(eventOrValue) : eventOrValue\n            );\n        },\n    };\n\n    return {\n        id: id || source,\n        field,\n        fieldState,\n        formState,\n        isRequired: isRequiredOption || isRequired(validate),\n    };\n};\n\nexport type InputProps<ValueType = any> = Omit<\n    UseControllerProps,\n    'name' | 'defaultValue' | 'rules'\n> &\n    Partial<UseControllerReturn> & {\n        alwaysOn?: any;\n        defaultValue?: any;\n        format?: (value: ValueType) => any;\n        id?: string;\n        isRequired?: boolean;\n        label?: string | ReactElement | false;\n        helperText?: string | ReactElement | false;\n        name?: string;\n        onBlur?: (...event: any[]) => void;\n        onChange?: (...event: any[]) => void;\n        parse?: (value: any) => ValueType;\n        type?: string;\n        resource?: string;\n        source: string;\n        validate?: Validator | Validator[];\n    };\n\nexport type UseInputValue = {\n    id: string;\n    isRequired: boolean;\n    field: ControllerRenderProps;\n    formState: UseFormStateReturn<Record<string, string>>;\n    fieldState: ControllerFieldState;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}