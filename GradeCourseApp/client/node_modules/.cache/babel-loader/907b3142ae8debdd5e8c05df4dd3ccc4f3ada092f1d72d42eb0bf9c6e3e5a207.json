{"ast":null,"code":"import * as React from 'react';\nimport useAuthState from './useAuthState';\n/**\n * Restrict access to children to authenticated users.\n * Redirects anonymous users to the login page.\n *\n * Use it to decorate your custom page components to require\n * authentication.\n *\n * By default this component is optimistic: it does not block\n * rendering children when checking authentication, but this mode\n * can be turned off by setting `requireAuth` to true.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @see useAuthState\n *\n * @example\n *     import { Admin, CustomRoutes, Authenticated } from 'react-admin';\n *\n *     const customRoutes = [\n *         <Route\n *             path=\"/foo\"\n *             element={\n *                 <Authenticated authParams={{ foo: 'bar' }}>\n *                     <Foo />\n *                 </Authenticated>\n *             }\n *         />\n *     ];\n *     const App = () => (\n *         <Admin>\n *             <CustomRoutes>{customRoutes}</CustomRoutes>\n *         </Admin>\n *     );\n */\nexport var Authenticated = function (props) {\n  var authParams = props.authParams,\n    children = props.children,\n    _a = props.requireAuth,\n    requireAuth = _a === void 0 ? false : _a;\n  // this hook will log out if the authProvider doesn't validate that the user is authenticated\n  var _b = useAuthState(authParams, true),\n    isLoading = _b.isLoading,\n    authenticated = _b.authenticated;\n  // in pessimistic mode don't render the children until authenticated\n  if (requireAuth && isLoading || !authenticated) {\n    return null;\n  }\n  // render the children in optimistic rendering or after authenticated\n  return React.createElement(React.Fragment, null, children);\n};","map":{"version":3,"names":["React","useAuthState","Authenticated","props","authParams","children","_a","requireAuth","_b","isLoading","authenticated","createElement","Fragment"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/auth/Authenticated.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ReactNode } from 'react';\n\nimport useAuthState from './useAuthState';\n\n/**\n * Restrict access to children to authenticated users.\n * Redirects anonymous users to the login page.\n *\n * Use it to decorate your custom page components to require\n * authentication.\n *\n * By default this component is optimistic: it does not block\n * rendering children when checking authentication, but this mode\n * can be turned off by setting `requireAuth` to true.\n *\n * You can set additional `authParams` at will if your authProvider\n * requires it.\n *\n * @see useAuthState\n *\n * @example\n *     import { Admin, CustomRoutes, Authenticated } from 'react-admin';\n *\n *     const customRoutes = [\n *         <Route\n *             path=\"/foo\"\n *             element={\n *                 <Authenticated authParams={{ foo: 'bar' }}>\n *                     <Foo />\n *                 </Authenticated>\n *             }\n *         />\n *     ];\n *     const App = () => (\n *         <Admin>\n *             <CustomRoutes>{customRoutes}</CustomRoutes>\n *         </Admin>\n *     );\n */\nexport const Authenticated = (props: AuthenticatedProps) => {\n    const { authParams, children, requireAuth = false } = props;\n\n    // this hook will log out if the authProvider doesn't validate that the user is authenticated\n    const { isLoading, authenticated } = useAuthState(authParams, true);\n\n    // in pessimistic mode don't render the children until authenticated\n    if ((requireAuth && isLoading) || !authenticated) {\n        return null;\n    }\n\n    // render the children in optimistic rendering or after authenticated\n    return <>{children}</>;\n};\n\nexport interface AuthenticatedProps {\n    children: ReactNode;\n    authParams?: object;\n    requireAuth?: boolean;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAG9B,OAAOC,YAAY,MAAM,gBAAgB;AAEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAO,IAAMC,aAAa,GAAG,SAAAA,CAACC,KAAyB;EAC3C,IAAAC,UAAU,GAAoCD,KAAK,CAAAC,UAAzC;IAAEC,QAAQ,GAA0BF,KAAK,CAAAE,QAA/B;IAAEC,EAAA,GAAwBH,KAAK,CAAAI,WAAV;IAAnBA,WAAW,GAAAD,EAAA,cAAG,KAAK,GAAAA,EAAA;EAEjD;EACM,IAAAE,EAAA,GAA+BP,YAAY,CAACG,UAAU,EAAE,IAAI,CAAC;IAA3DK,SAAS,GAAAD,EAAA,CAAAC,SAAA;IAAEC,aAAa,GAAAF,EAAA,CAAAE,aAAmC;EAEnE;EACA,IAAKH,WAAW,IAAIE,SAAS,IAAK,CAACC,aAAa,EAAE;IAC9C,OAAO,IAAI;;EAGf;EACA,OAAOV,KAAA,CAAAW,aAAA,CAAAX,KAAA,CAAAY,QAAA,QAAGP,QAAQ,CAAI;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}