{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Children, isValidElement } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Stack } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useRecordContext, OptionalRecordContextProvider } from 'ra-core';\nimport { Labeled } from '../Labeled';\n/**\n * Layout for a Show view showing fields in one column.\n *\n * It pulls the record from the RecordContext. It renders the record fields in\n * a single-column layout (via MUI's `<Stack>` component).\n * `<SimpleShowLayout>` delegates the actual rendering of fields to its children.\n * It wraps each field inside a `<Labeled>` component to add a label.\n *\n * @example\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <SimpleShowLayout>\n *             <TextField source=\"title\" />\n *         </SimpleShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n *\n * @param {SimpleShowLayoutProps} props\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {ReactNode} props.divider An optional divider between each field, passed to `<Stack>`.\n * @param {number} props.spacing The spacing to use between each field, passed to `<Stack>`. Defaults to 1.\n * @param {Object} props.sx Custom style object.\n */\nexport var SimpleShowLayout = function (props) {\n  var className = props.className,\n    children = props.children,\n    divider = props.divider,\n    _a = props.spacing,\n    spacing = _a === void 0 ? 1 : _a,\n    rest = __rest(props, [\"className\", \"children\", \"divider\", \"spacing\"]);\n  var record = useRecordContext(props);\n  if (!record) {\n    return null;\n  }\n  return React.createElement(OptionalRecordContextProvider, {\n    value: props.record\n  }, React.createElement(Root, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), React.createElement(Stack, {\n    spacing: spacing,\n    divider: divider,\n    className: SimpleShowLayoutClasses.stack\n  }, Children.map(children, function (field) {\n    return field && isValidElement(field) ? React.createElement(Labeled, {\n      key: field.props.source,\n      className: clsx('ra-field', field.props.source && \"ra-field-\".concat(field.props.source), SimpleShowLayoutClasses.row, field.props.className)\n    }, field) : null;\n  }))));\n};\nSimpleShowLayout.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  record: PropTypes.object,\n  spacing: PropTypes.any,\n  sx: PropTypes.any\n};\nvar PREFIX = 'RaSimpleShowLayout';\nexport var SimpleShowLayoutClasses = {\n  stack: \"\".concat(PREFIX, \"-stack\"),\n  row: \"\".concat(PREFIX, \"-row\")\n};\nvar Root = styled('div', {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    flex: 1,\n    padding: \"\".concat(theme.spacing(1), \" \").concat(theme.spacing(2))\n  }, _b[\"& .\".concat(SimpleShowLayoutClasses.stack)] = {}, _b[\"& .\".concat(SimpleShowLayoutClasses.row)] = {\n    display: 'inline'\n  }, _b;\n});\nvar sanitizeRestProps = function (_a) {\n  var record = _a.record,\n    resource = _a.resource,\n    initialValues = _a.initialValues,\n    translate = _a.translate,\n    rest = __rest(_a, [\"record\", \"resource\", \"initialValues\", \"translate\"]);\n  return rest;\n};","map":{"version":3,"names":["React","Children","isValidElement","styled","Stack","PropTypes","clsx","useRecordContext","OptionalRecordContextProvider","Labeled","SimpleShowLayout","props","className","children","divider","_a","spacing","rest","__rest","record","createElement","value","Root","__assign","sanitizeRestProps","SimpleShowLayoutClasses","stack","map","field","key","source","concat","row","propTypes","node","string","object","any","sx","PREFIX","name","overridesResolver","styles","root","theme","_b","flex","padding","display","resource","initialValues","translate"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/detail/SimpleShowLayout.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Children, isValidElement, ReactNode } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Stack } from '@mui/material';\nimport { ResponsiveStyleValue, SxProps } from '@mui/system';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    RaRecord,\n    useRecordContext,\n    OptionalRecordContextProvider,\n} from 'ra-core';\nimport { Labeled } from '../Labeled';\n\n/**\n * Layout for a Show view showing fields in one column.\n *\n * It pulls the record from the RecordContext. It renders the record fields in\n * a single-column layout (via MUI's `<Stack>` component).\n * `<SimpleShowLayout>` delegates the actual rendering of fields to its children.\n * It wraps each field inside a `<Labeled>` component to add a label.\n *\n * @example\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n * export const PostShow = () => (\n *     <Show>\n *         <SimpleShowLayout>\n *             <TextField source=\"title\" />\n *         </SimpleShowLayout>\n *     </Show>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostShow } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" show={PostShow} />\n *     </Admin>\n * );\n *\n * @param {SimpleShowLayoutProps} props\n * @param {string} props.className A className to apply to the page content.\n * @param {ElementType} props.component The component to use as root component (div by default).\n * @param {ReactNode} props.divider An optional divider between each field, passed to `<Stack>`.\n * @param {number} props.spacing The spacing to use between each field, passed to `<Stack>`. Defaults to 1.\n * @param {Object} props.sx Custom style object.\n */\nexport const SimpleShowLayout = (props: SimpleShowLayoutProps) => {\n    const { className, children, divider, spacing = 1, ...rest } = props;\n    const record = useRecordContext(props);\n    if (!record) {\n        return null;\n    }\n    return (\n        <OptionalRecordContextProvider value={props.record}>\n            <Root className={className} {...sanitizeRestProps(rest)}>\n                <Stack\n                    spacing={spacing}\n                    divider={divider}\n                    className={SimpleShowLayoutClasses.stack}\n                >\n                    {Children.map(children, field =>\n                        field && isValidElement<any>(field) ? (\n                            <Labeled\n                                key={field.props.source}\n                                className={clsx(\n                                    'ra-field',\n                                    field.props.source &&\n                                        `ra-field-${field.props.source}`,\n                                    SimpleShowLayoutClasses.row,\n                                    field.props.className\n                                )}\n                            >\n                                {field}\n                            </Labeled>\n                        ) : null\n                    )}\n                </Stack>\n            </Root>\n        </OptionalRecordContextProvider>\n    );\n};\n\nexport interface SimpleShowLayoutProps {\n    children: ReactNode;\n    className?: string;\n    divider?: ReactNode;\n    record?: RaRecord;\n    spacing?: ResponsiveStyleValue<number | string>;\n    sx?: SxProps;\n}\n\nSimpleShowLayout.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    record: PropTypes.object,\n    spacing: PropTypes.any,\n    sx: PropTypes.any,\n};\n\nconst PREFIX = 'RaSimpleShowLayout';\n\nexport const SimpleShowLayoutClasses = {\n    stack: `${PREFIX}-stack`,\n    row: `${PREFIX}-row`,\n};\n\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    flex: 1,\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    [`& .${SimpleShowLayoutClasses.stack}`]: {},\n    [`& .${SimpleShowLayoutClasses.row}`]: {\n        display: 'inline',\n    },\n}));\n\nconst sanitizeRestProps = ({\n    record,\n    resource,\n    initialValues,\n    translate,\n    ...rest\n}: any) => rest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}