{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { Select, MenuItem, InputLabel, FormHelperText, FormControl, Chip, OutlinedInput } from '@mui/material';\nimport { FieldTitle, useInput, useChoicesContext, useChoices } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { LinearProgress } from '../layout';\nimport { Labeled } from '../Labeled';\nimport { useSupportCreateSuggestion } from './useSupportCreateSuggestion';\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\nexport var SelectArrayInput = function (props) {\n  var _a;\n  var choicesProp = props.choices,\n    className = props.className,\n    create = props.create,\n    createLabel = props.createLabel,\n    createValue = props.createValue,\n    disableValue = props.disableValue,\n    format = props.format,\n    helperText = props.helperText,\n    label = props.label,\n    isFetchingProp = props.isFetching,\n    isLoadingProp = props.isLoading,\n    margin = props.margin,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onCreate = props.onCreate,\n    options = props.options,\n    optionText = props.optionText,\n    optionValue = props.optionValue,\n    parse = props.parse,\n    resourceProp = props.resource,\n    _b = props.size,\n    size = _b === void 0 ? 'small' : _b,\n    sourceProp = props.source,\n    translateChoice = props.translateChoice,\n    validate = props.validate,\n    variant = props.variant,\n    rest = __rest(props, [\"choices\", \"className\", \"create\", \"createLabel\", \"createValue\", \"disableValue\", \"format\", \"helperText\", \"label\", \"isFetching\", \"isLoading\", \"margin\", \"onBlur\", \"onChange\", \"onCreate\", \"options\", \"optionText\", \"optionValue\", \"parse\", \"resource\", \"size\", \"source\", \"translateChoice\", \"validate\", \"variant\"]);\n  var inputLabel = useRef(null);\n  var _c = useChoicesContext({\n      choices: choicesProp,\n      isLoading: isLoadingProp,\n      isFetching: isFetchingProp,\n      resource: resourceProp,\n      source: sourceProp\n    }),\n    allChoices = _c.allChoices,\n    isLoading = _c.isLoading,\n    fetchError = _c.error,\n    source = _c.source,\n    resource = _c.resource;\n  var _d = useChoices({\n      optionText: optionText,\n      optionValue: optionValue,\n      disableValue: disableValue,\n      translateChoice: translateChoice\n    }),\n    getChoiceText = _d.getChoiceText,\n    getChoiceValue = _d.getChoiceValue,\n    getDisableValue = _d.getDisableValue;\n  var _e = useInput(__assign({\n      format: format,\n      onBlur: onBlur,\n      onChange: onChange,\n      parse: parse,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _e.field,\n    isRequired = _e.isRequired,\n    _f = _e.fieldState,\n    error = _f.error,\n    invalid = _f.invalid,\n    isTouched = _f.isTouched,\n    isSubmitted = _e.formState.isSubmitted;\n  var handleChange = useCallback(function (eventOrChoice) {\n    // We might receive an event from the mui component\n    // In this case, it will be the choice id\n    if (eventOrChoice === null || eventOrChoice === void 0 ? void 0 : eventOrChoice.target) {\n      // when used with different IDs types, unselection leads to double selection with both types\n      // instead of the value being removed from the array\n      // e.g. we receive eventOrChoice.target.value = [1, '2', 2] instead of [1] after removing 2\n      // this snippet removes a value if it is present twice\n      eventOrChoice.target.value = eventOrChoice.target.value.reduce(function (acc, value) {\n        // eslint-disable-next-line eqeqeq\n        var index = acc.findIndex(function (v) {\n          return v == value;\n        });\n        return index < 0 ? __spreadArray(__spreadArray([], acc, true), [value], false) : __spreadArray(__spreadArray([], acc.slice(0, index), true), acc.slice(index + 1), true);\n      }, []);\n      field.onChange(eventOrChoice);\n    } else {\n      // Or we might receive a choice directly, for instance a newly created one\n      field.onChange(__spreadArray(__spreadArray([], field.value || [], true), [getChoiceValue(eventOrChoice)], false));\n    }\n  }, [field, getChoiceValue]);\n  var _g = useSupportCreateSuggestion({\n      create: create,\n      createLabel: createLabel,\n      createValue: createValue,\n      handleChange: handleChange,\n      onCreate: onCreate,\n      optionText: optionText\n    }),\n    getCreateItem = _g.getCreateItem,\n    handleChangeWithCreateSupport = _g.handleChange,\n    createElement = _g.createElement;\n  var createItem = create || onCreate ? getCreateItem() : null;\n  var finalChoices = create || onCreate ? __spreadArray(__spreadArray([], allChoices || [], true), [createItem], false) : allChoices || [];\n  var renderMenuItemOption = useCallback(function (choice) {\n    return !!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id && typeof optionText === 'function' ? createItem.name : getChoiceText(choice);\n  }, [createItem, getChoiceText, optionText]);\n  var renderMenuItem = useCallback(function (choice) {\n    return choice ? React.createElement(MenuItem, {\n      key: getChoiceValue(choice),\n      value: getChoiceValue(choice),\n      disabled: getDisableValue(choice)\n    }, renderMenuItemOption(!!createItem && (choice === null || choice === void 0 ? void 0 : choice.id) === createItem.id ? createItem : choice)) : null;\n  }, [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]);\n  if (isLoading) {\n    return React.createElement(Labeled, {\n      label: label,\n      source: source,\n      resource: resource,\n      className: clsx('ra-input', \"ra-input-\".concat(source), className),\n      isRequired: isRequired\n    }, React.createElement(LinearProgress, null));\n  }\n  // Here wen ensure we always have an array and this array does not contain the default value (empty string)\n  var finalValue = Array.isArray((_a = field.value) !== null && _a !== void 0 ? _a : []) ? field.value : field.value ? [field.value] : [];\n  var outlinedInputProps = variant === 'outlined' ? {\n    input: React.createElement(OutlinedInput, {\n      id: \"select-multiple-chip\",\n      label: React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resource,\n        isRequired: isRequired\n      })\n    })\n  } : {};\n  return React.createElement(React.Fragment, null, React.createElement(StyledFormControl, __assign({\n    margin: margin,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    error: fetchError || (isTouched || isSubmitted) && invalid,\n    variant: variant\n  }, sanitizeRestProps(rest)), React.createElement(InputLabel, {\n    ref: inputLabel,\n    id: \"\".concat(label, \"-outlined-label\")\n  }, React.createElement(FieldTitle, {\n    label: label,\n    source: source,\n    resource: resource,\n    isRequired: isRequired\n  })), React.createElement(Select, __assign({\n    autoWidth: true,\n    labelId: \"\".concat(label, \"-outlined-label\"),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    multiple: true,\n    error: !!fetchError || (isTouched || isSubmitted) && invalid,\n    renderValue: function (selected) {\n      return React.createElement(\"div\", {\n        className: SelectArrayInputClasses.chips\n      }, (Array.isArray(selected) ? selected : []).map(function (item) {\n        return (allChoices || []).find(\n        // eslint-disable-next-line eqeqeq\n        function (choice) {\n          return getChoiceValue(choice) == item;\n        });\n      }).filter(function (item) {\n        return !!item;\n      }).map(function (item) {\n        return React.createElement(Chip, {\n          key: getChoiceValue(item),\n          label: renderMenuItemOption(item),\n          className: SelectArrayInputClasses.chip,\n          size: \"small\"\n        });\n      }));\n    },\n    \"data-testid\": \"selectArray\",\n    size: size\n  }, field, options, {\n    onChange: handleChangeWithCreateSupport,\n    value: finalValue\n  }, outlinedInputProps), finalChoices.map(renderMenuItem)), React.createElement(FormHelperText, {\n    error: fetchError || isTouched && !!error\n  }, React.createElement(InputHelperText, {\n    touched: isTouched || isSubmitted || fetchError,\n    error: (error === null || error === void 0 ? void 0 : error.message) || (fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n    helperText: helperText\n  }))), createElement);\n};\nSelectArrayInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  disableValue: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\nSelectArrayInput.defaultProps = {\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  disableValue: 'disabled',\n  translateChoice: true\n};\nvar sanitizeRestProps = function (_a) {\n  var alwaysOn = _a.alwaysOn,\n    choices = _a.choices,\n    classNamInputWithOptionsPropse = _a.classNamInputWithOptionsPropse,\n    componenInputWithOptionsPropst = _a.componenInputWithOptionsPropst,\n    crudGetMInputWithOptionsPropsatching = _a.crudGetMInputWithOptionsPropsatching,\n    crudGetOInputWithOptionsPropsne = _a.crudGetOInputWithOptionsPropsne,\n    defaultValue = _a.defaultValue,\n    disableValue = _a.disableValue,\n    emptyText = _a.emptyText,\n    enableGetChoices = _a.enableGetChoices,\n    filter = _a.filter,\n    filterToQuery = _a.filterToQuery,\n    formClassName = _a.formClassName,\n    initializeForm = _a.initializeForm,\n    initialValue = _a.initialValue,\n    input = _a.input,\n    isRequired = _a.isRequired,\n    label = _a.label,\n    limitChoicesToValue = _a.limitChoicesToValue,\n    loaded = _a.loaded,\n    locale = _a.locale,\n    meta = _a.meta,\n    onChange = _a.onChange,\n    options = _a.options,\n    optionValue = _a.optionValue,\n    optionText = _a.optionText,\n    perPage = _a.perPage,\n    record = _a.record,\n    reference = _a.reference,\n    resource = _a.resource,\n    setFilter = _a.setFilter,\n    setPagination = _a.setPagination,\n    setSort = _a.setSort,\n    sort = _a.sort,\n    source = _a.source,\n    textAlign = _a.textAlign,\n    translate = _a.translate,\n    translateChoice = _a.translateChoice,\n    validation = _a.validation,\n    rest = __rest(_a, [\"alwaysOn\", \"choices\", \"classNamInputWithOptionsPropse\", \"componenInputWithOptionsPropst\", \"crudGetMInputWithOptionsPropsatching\", \"crudGetOInputWithOptionsPropsne\", \"defaultValue\", \"disableValue\", \"emptyText\", \"enableGetChoices\", \"filter\", \"filterToQuery\", \"formClassName\", \"initializeForm\", \"initialValue\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"loaded\", \"locale\", \"meta\", \"onChange\", \"options\", \"optionValue\", \"optionText\", \"perPage\", \"record\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"source\", \"textAlign\", \"translate\", \"translateChoice\", \"validation\"]);\n  return rest;\n};\nvar PREFIX = 'RaSelectArrayInput';\nexport var SelectArrayInputClasses = {\n  chips: \"\".concat(PREFIX, \"-chips\"),\n  chip: \"\".concat(PREFIX, \"-chip\")\n};\nvar StyledFormControl = styled(FormControl, {\n  name: PREFIX,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {\n    minWidth: theme.spacing(20)\n  }, _b[\"& .\".concat(SelectArrayInputClasses.chips)] = {\n    display: 'flex',\n    flexWrap: 'wrap'\n  }, _b[\"& .\".concat(SelectArrayInputClasses.chip)] = {\n    marginTop: theme.spacing(0.5),\n    marginRight: theme.spacing(0.5)\n  }, _b;\n});","map":{"version":3,"names":["React","styled","useCallback","useRef","PropTypes","clsx","Select","MenuItem","InputLabel","FormHelperText","FormControl","Chip","OutlinedInput","FieldTitle","useInput","useChoicesContext","useChoices","InputHelperText","LinearProgress","Labeled","useSupportCreateSuggestion","SelectArrayInput","props","choicesProp","choices","className","create","createLabel","createValue","disableValue","format","helperText","label","isFetchingProp","isFetching","isLoadingProp","isLoading","margin","onBlur","onChange","onCreate","options","optionText","optionValue","parse","resourceProp","resource","_b","size","sourceProp","source","translateChoice","validate","variant","rest","__rest","inputLabel","_c","allChoices","fetchError","error","_d","getChoiceText","getChoiceValue","getDisableValue","_e","__assign","field","isRequired","_f","fieldState","invalid","isTouched","isSubmitted","formState","handleChange","eventOrChoice","target","value","reduce","acc","index","findIndex","v","__spreadArray","slice","_g","getCreateItem","handleChangeWithCreateSupport","createElement","createItem","finalChoices","renderMenuItemOption","choice","id","name","renderMenuItem","key","disabled","concat","finalValue","Array","isArray","_a","outlinedInputProps","input","Fragment","StyledFormControl","sanitizeRestProps","ref","autoWidth","labelId","multiple","renderValue","selected","SelectArrayInputClasses","chips","map","item","find","filter","chip","touched","message","propTypes","arrayOf","object","string","children","node","oneOfType","bool","element","func","defaultProps","alwaysOn","classNamInputWithOptionsPropse","componenInputWithOptionsPropst","crudGetMInputWithOptionsPropsatching","crudGetOInputWithOptionsPropsne","defaultValue","emptyText","enableGetChoices","filterToQuery","formClassName","initializeForm","initialValue","limitChoicesToValue","loaded","locale","meta","perPage","record","reference","setFilter","setPagination","setSort","sort","textAlign","translate","validation","PREFIX","overridesResolver","styles","root","theme","minWidth","spacing","display","flexWrap","marginTop","marginRight"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/input/SelectArrayInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useCallback, useRef, ChangeEvent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n    Select,\n    SelectProps,\n    MenuItem,\n    InputLabel,\n    FormHelperText,\n    FormControl,\n    Chip,\n    OutlinedInput,\n} from '@mui/material';\nimport {\n    ChoicesProps,\n    FieldTitle,\n    useInput,\n    useChoicesContext,\n    useChoices,\n    RaRecord,\n} from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { FormControlProps } from '@mui/material/FormControl';\n\nimport { LinearProgress } from '../layout';\nimport { CommonInputProps } from './CommonInputProps';\nimport { Labeled } from '../Labeled';\nimport {\n    SupportCreateSuggestionOptions,\n    useSupportCreateSuggestion,\n} from './useSupportCreateSuggestion';\n\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property as the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that can access\n * the related choice through the `useRecordContext` hook. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = () => {\n *     const record = useRecordContext();\n *     return (<span>{record.first_name} {record.last_name}</span>)\n * };\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\nexport const SelectArrayInput = (props: SelectArrayInputProps) => {\n    const {\n        choices: choicesProp,\n        className,\n        create,\n        createLabel,\n        createValue,\n        disableValue,\n        format,\n        helperText,\n        label,\n        isFetching: isFetchingProp,\n        isLoading: isLoadingProp,\n        margin,\n        onBlur,\n        onChange,\n        onCreate,\n        options,\n        optionText,\n        optionValue,\n        parse,\n        resource: resourceProp,\n        size = 'small',\n        source: sourceProp,\n        translateChoice,\n        validate,\n        variant,\n        ...rest\n    } = props;\n\n    const inputLabel = useRef(null);\n\n    const {\n        allChoices,\n        isLoading,\n        error: fetchError,\n        source,\n        resource,\n    } = useChoicesContext({\n        choices: choicesProp,\n        isLoading: isLoadingProp,\n        isFetching: isFetchingProp,\n        resource: resourceProp,\n        source: sourceProp,\n    });\n\n    const { getChoiceText, getChoiceValue, getDisableValue } = useChoices({\n        optionText,\n        optionValue,\n        disableValue,\n        translateChoice,\n    });\n\n    const {\n        field,\n        isRequired,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n    } = useInput({\n        format,\n        onBlur,\n        onChange,\n        parse,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const handleChange = useCallback(\n        (eventOrChoice: ChangeEvent<HTMLInputElement> | RaRecord) => {\n            // We might receive an event from the mui component\n            // In this case, it will be the choice id\n            if (eventOrChoice?.target) {\n                // when used with different IDs types, unselection leads to double selection with both types\n                // instead of the value being removed from the array\n                // e.g. we receive eventOrChoice.target.value = [1, '2', 2] instead of [1] after removing 2\n                // this snippet removes a value if it is present twice\n                eventOrChoice.target.value = eventOrChoice.target.value.reduce(\n                    (acc, value) => {\n                        // eslint-disable-next-line eqeqeq\n                        const index = acc.findIndex(v => v == value);\n                        return index < 0\n                            ? [...acc, value]\n                            : [...acc.slice(0, index), ...acc.slice(index + 1)];\n                    },\n                    []\n                );\n                field.onChange(eventOrChoice);\n            } else {\n                // Or we might receive a choice directly, for instance a newly created one\n                field.onChange([\n                    ...(field.value || []),\n                    getChoiceValue(eventOrChoice),\n                ]);\n            }\n        },\n        [field, getChoiceValue]\n    );\n\n    const {\n        getCreateItem,\n        handleChange: handleChangeWithCreateSupport,\n        createElement,\n    } = useSupportCreateSuggestion({\n        create,\n        createLabel,\n        createValue,\n        handleChange,\n        onCreate,\n        optionText,\n    });\n\n    const createItem = create || onCreate ? getCreateItem() : null;\n    const finalChoices =\n        create || onCreate\n            ? [...(allChoices || []), createItem]\n            : allChoices || [];\n\n    const renderMenuItemOption = useCallback(\n        choice =>\n            !!createItem &&\n            choice?.id === createItem.id &&\n            typeof optionText === 'function'\n                ? createItem.name\n                : getChoiceText(choice),\n        [createItem, getChoiceText, optionText]\n    );\n\n    const renderMenuItem = useCallback(\n        choice => {\n            return choice ? (\n                <MenuItem\n                    key={getChoiceValue(choice)}\n                    value={getChoiceValue(choice)}\n                    disabled={getDisableValue(choice)}\n                >\n                    {renderMenuItemOption(\n                        !!createItem && choice?.id === createItem.id\n                            ? createItem\n                            : choice\n                    )}\n                </MenuItem>\n            ) : null;\n        },\n        [getChoiceValue, getDisableValue, renderMenuItemOption, createItem]\n    );\n\n    if (isLoading) {\n        return (\n            <Labeled\n                label={label}\n                source={source}\n                resource={resource}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                isRequired={isRequired}\n            >\n                <LinearProgress />\n            </Labeled>\n        );\n    }\n\n    // Here wen ensure we always have an array and this array does not contain the default value (empty string)\n    const finalValue = Array.isArray(field.value ?? [])\n        ? field.value\n        : field.value\n        ? [field.value]\n        : [];\n\n    const outlinedInputProps =\n        variant === 'outlined'\n            ? {\n                  input: (\n                      <OutlinedInput\n                          id=\"select-multiple-chip\"\n                          label={\n                              <FieldTitle\n                                  label={label}\n                                  source={source}\n                                  resource={resource}\n                                  isRequired={isRequired}\n                              />\n                          }\n                      />\n                  ),\n              }\n            : {};\n\n    return (\n        <>\n            <StyledFormControl\n                margin={margin}\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                error={fetchError || ((isTouched || isSubmitted) && invalid)}\n                variant={variant}\n                {...sanitizeRestProps(rest)}\n            >\n                <InputLabel ref={inputLabel} id={`${label}-outlined-label`}>\n                    <FieldTitle\n                        label={label}\n                        source={source}\n                        resource={resource}\n                        isRequired={isRequired}\n                    />\n                </InputLabel>\n                <Select\n                    autoWidth\n                    labelId={`${label}-outlined-label`}\n                    label={\n                        <FieldTitle\n                            label={label}\n                            source={source}\n                            resource={resource}\n                            isRequired={isRequired}\n                        />\n                    }\n                    multiple\n                    error={\n                        !!fetchError || ((isTouched || isSubmitted) && invalid)\n                    }\n                    renderValue={(selected: any[]) => (\n                        <div className={SelectArrayInputClasses.chips}>\n                            {(Array.isArray(selected) ? selected : [])\n                                .map(item =>\n                                    (allChoices || []).find(\n                                        // eslint-disable-next-line eqeqeq\n                                        choice => getChoiceValue(choice) == item\n                                    )\n                                )\n                                .filter(item => !!item)\n                                .map(item => (\n                                    <Chip\n                                        key={getChoiceValue(item)}\n                                        label={renderMenuItemOption(item)}\n                                        className={SelectArrayInputClasses.chip}\n                                        size=\"small\"\n                                    />\n                                ))}\n                        </div>\n                    )}\n                    data-testid=\"selectArray\"\n                    size={size}\n                    {...field}\n                    {...options}\n                    onChange={handleChangeWithCreateSupport}\n                    value={finalValue}\n                    {...outlinedInputProps}\n                >\n                    {finalChoices.map(renderMenuItem)}\n                </Select>\n                <FormHelperText error={fetchError || (isTouched && !!error)}>\n                    <InputHelperText\n                        touched={isTouched || isSubmitted || fetchError}\n                        error={error?.message || fetchError?.message}\n                        helperText={helperText}\n                    />\n                </FormHelperText>\n            </StyledFormControl>\n            {createElement}\n        </>\n    );\n};\n\nexport type SelectArrayInputProps = ChoicesProps &\n    Omit<SupportCreateSuggestionOptions, 'handleChange'> &\n    Omit<CommonInputProps, 'source'> &\n    Omit<FormControlProps, 'defaultValue' | 'onBlur' | 'onChange'> & {\n        options?: SelectProps;\n        disableValue?: string;\n        source?: string;\n        onChange?: (event: ChangeEvent<HTMLInputElement> | RaRecord) => void;\n    };\n\nSelectArrayInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object),\n    className: PropTypes.string,\n    children: PropTypes.node,\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]).isRequired,\n    optionValue: PropTypes.string.isRequired,\n    disableValue: PropTypes.string,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translateChoice: PropTypes.bool,\n};\n\nSelectArrayInput.defaultProps = {\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    disableValue: 'disabled',\n    translateChoice: true,\n};\n\nconst sanitizeRestProps = ({\n    alwaysOn,\n    choices,\n    classNamInputWithOptionsPropse,\n    componenInputWithOptionsPropst,\n    crudGetMInputWithOptionsPropsatching,\n    crudGetOInputWithOptionsPropsne,\n    defaultValue,\n    disableValue,\n    emptyText,\n    enableGetChoices,\n    filter,\n    filterToQuery,\n    formClassName,\n    initializeForm,\n    initialValue,\n    input,\n    isRequired,\n    label,\n    limitChoicesToValue,\n    loaded,\n    locale,\n    meta,\n    onChange,\n    options,\n    optionValue,\n    optionText,\n    perPage,\n    record,\n    reference,\n    resource,\n    setFilter,\n    setPagination,\n    setSort,\n    sort,\n    source,\n    textAlign,\n    translate,\n    translateChoice,\n    validation,\n    ...rest\n}: any) => rest;\n\nconst PREFIX = 'RaSelectArrayInput';\n\nexport const SelectArrayInputClasses = {\n    chips: `${PREFIX}-chips`,\n    chip: `${PREFIX}-chip`,\n};\n\nconst StyledFormControl = styled(FormControl, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    minWidth: theme.spacing(20),\n    [`& .${SelectArrayInputClasses.chips}`]: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n\n    [`& .${SelectArrayInputClasses.chip}`]: {\n        marginTop: theme.spacing(0.5),\n        marginRight: theme.spacing(0.5),\n    },\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}