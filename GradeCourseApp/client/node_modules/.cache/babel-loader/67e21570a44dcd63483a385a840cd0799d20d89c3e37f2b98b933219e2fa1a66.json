{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport get from 'lodash/get';\nimport { useCallback, useEffect, useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\nvar defaultFilter = {};\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isLoading, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport var useReferenceManyFieldController = function (props) {\n  var reference = props.reference,\n    record = props.record,\n    target = props.target,\n    _a = props.filter,\n    filter = _a === void 0 ? defaultFilter : _a,\n    source = props.source,\n    initialPage = props.page,\n    initialPerPage = props.perPage,\n    _b = props.sort,\n    initialSort = _b === void 0 ? {\n      field: 'id',\n      order: 'DESC'\n    } : _b;\n  var notify = useNotify();\n  var resource = useResourceContext(props);\n  // pagination logic\n  var _c = usePaginationState({\n      page: initialPage,\n      perPage: initialPerPage\n    }),\n    page = _c.page,\n    setPage = _c.setPage,\n    perPage = _c.perPage,\n    setPerPage = _c.setPerPage;\n  // sort logic\n  var _d = useSortState(initialSort),\n    sort = _d.sort,\n    setSortState = _d.setSort;\n  var setSort = useCallback(function (sort) {\n    setSortState(sort);\n    setPage(1);\n  }, [setPage, setSortState]);\n  // selection logic\n  var _e = useRecordSelection(\"\".concat(resource, \".\").concat(record === null || record === void 0 ? void 0 : record.id, \".\").concat(reference)),\n    selectedIds = _e[0],\n    selectionModifiers = _e[1];\n  // filter logic\n  var filterRef = useRef(filter);\n  var _f = useSafeSetState({}),\n    displayedFilters = _f[0],\n    setDisplayedFilters = _f[1];\n  var _g = useSafeSetState(filter),\n    filterValues = _g[0],\n    setFilterValues = _g[1];\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n        _b = filterName,\n        _ = _a[_b],\n        newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n    setDisplayedFilters(displayedFilters);\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]);\n  // handle filter prop change\n  useEffect(function () {\n    if (!isEqual(filter, filterRef.current)) {\n      filterRef.current = filter;\n      setFilterValues(filter);\n    }\n  });\n  var _h = useGetManyReference(reference, {\n      target: target,\n      id: get(record, source),\n      pagination: {\n        page: page,\n        perPage: perPage\n      },\n      sort: sort,\n      filter: filterValues\n    }, {\n      keepPreviousData: true,\n      onError: function (error) {\n        return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'error',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n      }\n    }),\n    data = _h.data,\n    total = _h.total,\n    pageInfo = _h.pageInfo,\n    error = _h.error,\n    isFetching = _h.isFetching,\n    isLoading = _h.isLoading,\n    refetch = _h.refetch;\n  return {\n    sort: sort,\n    data: data,\n    defaultTitle: null,\n    displayedFilters: displayedFilters,\n    error: error,\n    filterValues: filterValues,\n    hideFilter: hideFilter,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    onSelect: selectionModifiers.select,\n    onToggleItem: selectionModifiers.toggle,\n    onUnselectItems: selectionModifiers.clearSelection,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: reference,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    hasNextPage: pageInfo ? pageInfo.hasNextPage : total != null ? page * perPage < total : undefined,\n    hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};","map":{"version":3,"names":["get","useCallback","useEffect","useRef","isEqual","useSafeSetState","removeEmpty","useGetManyReference","useNotify","usePaginationState","useRecordSelection","useSortState","useResourceContext","defaultFilter","useReferenceManyFieldController","props","reference","record","target","_a","filter","source","initialPage","page","initialPerPage","perPage","_b","sort","initialSort","field","order","notify","resource","_c","setPage","setPerPage","_d","setSortState","setSort","_e","concat","id","selectedIds","selectionModifiers","filterRef","_f","displayedFilters","setDisplayedFilters","_g","filterValues","setFilterValues","hideFilter","filterName","previousState","_","newState","__rest","showFilter","defaultValue","__assign","setFilters","filters","current","_h","pagination","keepPreviousData","onError","error","message","type","messageArgs","undefined","data","total","pageInfo","isFetching","isLoading","refetch","defaultTitle","onSelect","select","onToggleItem","toggle","onUnselectItems","clearSelection","hasNextPage","hasPreviousPage"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/controller/field/useReferenceManyFieldController.ts"],"sourcesContent":["import get from 'lodash/get';\nimport { useCallback, useEffect, useRef } from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport { useSafeSetState, removeEmpty } from '../../util';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport { RaRecord, SortPayload } from '../../types';\nimport { ListControllerResult } from '../list';\nimport usePaginationState from '../usePaginationState';\nimport { useRecordSelection } from '../list/useRecordSelection';\nimport useSortState from '../useSortState';\nimport { useResourceContext } from '../../core';\n\nexport interface UseReferenceManyFieldControllerParams {\n    filter?: any;\n    page?: number;\n    perPage?: number;\n    record?: RaRecord;\n    reference: string;\n    resource?: string;\n    sort?: SortPayload;\n    source?: string;\n    target: string;\n}\n\nconst defaultFilter = {};\n\n/**\n * Fetch reference records, and return them when available\n *\n * Uses dataProvider.getManyReference() internally.\n *\n * @example // fetch the comments related to the current post\n * const { isLoading, data } = useReferenceManyFieldController({\n *     reference: 'comments',\n *     target: 'post_id',\n *     record: { id: 123, title: 'hello, world' },\n *     resource: 'posts',\n * });\n *\n * @param {Object} props\n * @param {string} props.reference The linked resource name. Required.\n * @param {string} props.target The target resource key. Required.\n * @param {Object} props.filter The filter applied on the recorded records list\n * @param {number} props.page the page number\n * @param {number} props.perPage the number of item per page\n * @param {Object} props.record The current resource record\n * @param {string} props.resource The current resource name\n * @param {Object} props.sort the sort to apply to the referenced records\n * @param {string} props.source The key of the linked resource identifier\n *\n * @returns {ListControllerResult} The reference many props\n */\nexport const useReferenceManyFieldController = (\n    props: UseReferenceManyFieldControllerParams\n): ListControllerResult => {\n    const {\n        reference,\n        record,\n        target,\n        filter = defaultFilter,\n        source,\n        page: initialPage,\n        perPage: initialPerPage,\n        sort: initialSort = { field: 'id', order: 'DESC' },\n    } = props;\n    const notify = useNotify();\n    const resource = useResourceContext(props);\n\n    // pagination logic\n    const { page, setPage, perPage, setPerPage } = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    });\n\n    // sort logic\n    const { sort, setSort: setSortState } = useSortState(initialSort);\n    const setSort = useCallback(\n        (sort: SortPayload) => {\n            setSortState(sort);\n            setPage(1);\n        },\n        [setPage, setSortState]\n    );\n\n    // selection logic\n    const [selectedIds, selectionModifiers] = useRecordSelection(\n        `${resource}.${record?.id}.${reference}`\n    );\n\n    // filter logic\n    const filterRef = useRef(filter);\n    const [displayedFilters, setDisplayedFilters] = useSafeSetState<{\n        [key: string]: boolean;\n    }>({});\n    const [filterValues, setFilterValues] = useSafeSetState<{\n        [key: string]: any;\n    }>(filter);\n    const hideFilter = useCallback(\n        (filterName: string) => {\n            setDisplayedFilters(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n            setFilterValues(previousState => {\n                const { [filterName]: _, ...newState } = previousState;\n                return newState;\n            });\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const showFilter = useCallback(\n        (filterName: string, defaultValue: any) => {\n            setDisplayedFilters(previousState => ({\n                ...previousState,\n                [filterName]: true,\n            }));\n            setFilterValues(previousState => ({\n                ...previousState,\n                [filterName]: defaultValue,\n            }));\n        },\n        [setDisplayedFilters, setFilterValues]\n    );\n    const setFilters = useCallback(\n        (filters, displayedFilters) => {\n            setFilterValues(removeEmpty(filters));\n            setDisplayedFilters(displayedFilters);\n            setPage(1);\n        },\n        [setDisplayedFilters, setFilterValues, setPage]\n    );\n    // handle filter prop change\n    useEffect(() => {\n        if (!isEqual(filter, filterRef.current)) {\n            filterRef.current = filter;\n            setFilterValues(filter);\n        }\n    });\n\n    const {\n        data,\n        total,\n        pageInfo,\n        error,\n        isFetching,\n        isLoading,\n        refetch,\n    } = useGetManyReference(\n        reference,\n        {\n            target,\n            id: get(record, source),\n            pagination: { page, perPage },\n            sort,\n            filter: filterValues,\n        },\n        {\n            keepPreviousData: true,\n            onError: error =>\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'error',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                ),\n        }\n    );\n\n    return {\n        sort,\n        data,\n        defaultTitle: null,\n        displayedFilters,\n        error,\n        filterValues,\n        hideFilter,\n        isFetching,\n        isLoading,\n        onSelect: selectionModifiers.select,\n        onToggleItem: selectionModifiers.toggle,\n        onUnselectItems: selectionModifiers.clearSelection,\n        page,\n        perPage,\n        refetch,\n        resource: reference,\n        selectedIds,\n        setFilters,\n        setPage,\n        setPerPage,\n        hasNextPage: pageInfo\n            ? pageInfo.hasNextPage\n            : total != null\n            ? page * perPage < total\n            : undefined,\n        hasPreviousPage: pageInfo ? pageInfo.hasPreviousPage : page > 1,\n        setSort,\n        showFilter,\n        total,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}