{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { Link } from '@mui/material';\nimport { useRecordContext, useTranslate } from 'ra-core';\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { fieldPropTypes } from './types';\nexport var EmailField = memo(function (props) {\n  var className = props.className,\n    source = props.source,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"className\", \"source\", \"emptyText\"]);\n  var record = useRecordContext(props);\n  var value = get(record, source);\n  var translate = useTranslate();\n  if (value == null) {\n    return emptyText ? React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body2\",\n      className: className\n    }, sanitizeFieldRestProps(rest)), emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  return React.createElement(Link, __assign({\n    className: className,\n    href: \"mailto:\".concat(value),\n    onClick: stopPropagation,\n    variant: \"body2\"\n  }, sanitizeFieldRestProps(rest)), value);\n});\nEmailField.propTypes = fieldPropTypes;\nEmailField.displayName = 'EmailField';\n// useful to prevent click bubbling in a Datagrid with rowClick\nvar stopPropagation = function (e) {\n  return e.stopPropagation();\n};","map":{"version":3,"names":["React","memo","get","Typography","Link","useRecordContext","useTranslate","sanitizeFieldRestProps","fieldPropTypes","EmailField","props","className","source","emptyText","rest","__rest","record","value","translate","createElement","__assign","component","variant","_","href","concat","onClick","stopPropagation","propTypes","displayName","e"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/field/EmailField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, FC } from 'react';\nimport get from 'lodash/get';\nimport Typography from '@mui/material/Typography';\nimport { Link, LinkProps } from '@mui/material';\nimport { useRecordContext, useTranslate } from 'ra-core';\n\nimport { sanitizeFieldRestProps } from './sanitizeFieldRestProps';\nimport { PublicFieldProps, InjectedFieldProps, fieldPropTypes } from './types';\n\nexport const EmailField: FC<EmailFieldProps> = memo(props => {\n    const { className, source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n    const translate = useTranslate();\n\n    if (value == null) {\n        return emptyText ? (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null;\n    }\n\n    return (\n        <Link\n            className={className}\n            href={`mailto:${value}`}\n            onClick={stopPropagation}\n            variant=\"body2\"\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {value}\n        </Link>\n    );\n});\n\nEmailField.propTypes = fieldPropTypes;\nEmailField.displayName = 'EmailField';\n\nexport interface EmailFieldProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        Omit<LinkProps, 'textAlign'> {}\n\n// useful to prevent click bubbling in a Datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,IAAI,QAAY,OAAO;AAChC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,QAAmB,eAAe;AAC/C,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,SAAS;AAExD,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,SAA+CC,cAAc,QAAQ,SAAS;AAE9E,OAAO,IAAMC,UAAU,GAAwBR,IAAI,CAAC,UAAAS,KAAK;EAC7C,IAAAC,SAAS,GAAiCD,KAAK,CAAAC,SAAtC;IAAEC,MAAM,GAAyBF,KAAK,CAAAE,MAA9B;IAAEC,SAAS,GAAcH,KAAK,CAAAG,SAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKL,KAAK,EAAjD,oCAAyC,CAAF;EAC7C,IAAMM,MAAM,GAAGX,gBAAgB,CAACK,KAAK,CAAC;EACtC,IAAMO,KAAK,GAAGf,GAAG,CAACc,MAAM,EAAEJ,MAAM,CAAC;EACjC,IAAMM,SAAS,GAAGZ,YAAY,EAAE;EAEhC,IAAIW,KAAK,IAAI,IAAI,EAAE;IACf,OAAOJ,SAAS,GACZb,KAAA,CAAAmB,aAAA,CAAChB,UAAU,EAAAiB,QAAA;MACPC,SAAS,EAAC,MAAM;MAChBC,OAAO,EAAC,OAAO;MACfX,SAAS,EAAEA;IAAS,GAChBJ,sBAAsB,CAACO,IAAI,CAAC,GAE/BD,SAAS,IAAIK,SAAS,CAACL,SAAS,EAAE;MAAEU,CAAC,EAAEV;IAAS,CAAE,CAAC,CAC3C,GACb,IAAI;;EAGZ,OACIb,KAAA,CAAAmB,aAAA,CAACf,IAAI,EAAAgB,QAAA;IACDT,SAAS,EAAEA,SAAS;IACpBa,IAAI,EAAE,UAAAC,MAAA,CAAUR,KAAK,CAAE;IACvBS,OAAO,EAAEC,eAAe;IACxBL,OAAO,EAAC;EAAO,GACXf,sBAAsB,CAACO,IAAI,CAAC,GAE/BG,KAAK,CACH;AAEf,CAAC,CAAC;AAEFR,UAAU,CAACmB,SAAS,GAAGpB,cAAc;AACrCC,UAAU,CAACoB,WAAW,GAAG,YAAY;AAOrC;AACA,IAAMF,eAAe,GAAG,SAAAA,CAAAG,CAAC;EAAI,OAAAA,CAAC,CAACH,eAAe,EAAE;AAAnB,CAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}