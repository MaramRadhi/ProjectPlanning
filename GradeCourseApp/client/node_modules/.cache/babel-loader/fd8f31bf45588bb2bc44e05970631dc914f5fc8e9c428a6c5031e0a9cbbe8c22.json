{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { useLocaleState } from './useLocaleState';\nimport { useTranslateLabel } from './useTranslateLabel';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\nexport var useTranslatable = function (options) {\n  var localeFromUI = useLocaleState()[0];\n  var _a = options.defaultLocale,\n    defaultLocale = _a === void 0 ? localeFromUI : _a,\n    locales = options.locales;\n  var _b = useState(defaultLocale),\n    selectedLocale = _b[0],\n    setSelectedLocale = _b[1];\n  var resource = useResourceContext({});\n  var translateLabel = useTranslateLabel();\n  var context = useMemo(function () {\n    return {\n      getSource: function (source, locale) {\n        if (locale === void 0) {\n          locale = selectedLocale;\n        }\n        return \"\".concat(source, \".\").concat(locale);\n      },\n      getLabel: function (source, label) {\n        return translateLabel({\n          source: source,\n          resource: resource,\n          label: label\n        });\n      },\n      locales: locales,\n      selectedLocale: selectedLocale,\n      selectLocale: setSelectedLocale\n    };\n  }, [locales, resource, selectedLocale, translateLabel]);\n  return context;\n};","map":{"version":3,"names":["useState","useMemo","useResourceContext","useLocaleState","useTranslateLabel","useTranslatable","options","localeFromUI","_a","defaultLocale","locales","_b","selectedLocale","setSelectedLocale","resource","translateLabel","context","getSource","source","locale","concat","getLabel","label","selectLocale"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/i18n/useTranslatable.ts"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { TranslatableContextValue } from './TranslatableContext';\nimport { useLocaleState } from './useLocaleState';\nimport { useTranslateLabel } from './useTranslateLabel';\n\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabel: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\nexport const useTranslatable = (\n    options: UseTranslatableOptions\n): TranslatableContextValue => {\n    const [localeFromUI] = useLocaleState();\n    const { defaultLocale = localeFromUI, locales } = options;\n    const [selectedLocale, setSelectedLocale] = useState(defaultLocale);\n    const resource = useResourceContext({});\n    const translateLabel = useTranslateLabel();\n\n    const context = useMemo<TranslatableContextValue>(\n        () => ({\n            getSource: (source: string, locale: string = selectedLocale) =>\n                `${source}.${locale}`,\n            getLabel: (source: string, label?: string) =>\n                translateLabel({ source, resource, label }) as string,\n            locales,\n            selectedLocale,\n            selectLocale: setSelectedLocale,\n        }),\n        [locales, resource, selectedLocale, translateLabel]\n    );\n\n    return context;\n};\n\nexport type UseTranslatableOptions = {\n    defaultLocale?: string;\n    locales: string[];\n};\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACzC,SAASC,kBAAkB,QAAQ,SAAS;AAE5C,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,eAAe,GAAG,SAAAA,CAC3BC,OAA+B;EAExB,IAAAC,YAAY,GAAIJ,cAAc,EAAE,GAApB;EACX,IAAAK,EAAA,GAA0CF,OAAO,CAAAG,aAArB;IAA5BA,aAAa,GAAAD,EAAA,cAAGD,YAAY,GAAAC,EAAA;IAAEE,OAAO,GAAKJ,OAAO,CAAAI,OAAZ;EACvC,IAAAC,EAAA,GAAsCX,QAAQ,CAACS,aAAa,CAAC;IAA5DG,cAAc,GAAAD,EAAA;IAAEE,iBAAiB,GAAAF,EAAA,GAA2B;EACnE,IAAMG,QAAQ,GAAGZ,kBAAkB,CAAC,EAAE,CAAC;EACvC,IAAMa,cAAc,GAAGX,iBAAiB,EAAE;EAE1C,IAAMY,OAAO,GAAGf,OAAO,CACnB;IAAM,OAAC;MACHgB,SAAS,EAAE,SAAAA,CAACC,MAAc,EAAEC,MAA+B;QAA/B,IAAAA,MAAA;UAAAA,MAAA,GAAAP,cAA+B;QAAA;QACvD,UAAAQ,MAAA,CAAGF,MAAM,OAAAE,MAAA,CAAID,MAAM,CAAE;MAArB,CAAqB;MACzBE,QAAQ,EAAE,SAAAA,CAACH,MAAc,EAAEI,KAAc;QACrC,OAAAP,cAAc,CAAC;UAAEG,MAAM,EAAAA,MAAA;UAAEJ,QAAQ,EAAAA,QAAA;UAAEQ,KAAK,EAAAA;QAAA,CAAE,CAAW;MAArD,CAAqD;MACzDZ,OAAO,EAAAA,OAAA;MACPE,cAAc,EAAAA,cAAA;MACdW,YAAY,EAAEV;KACjB;EARK,CAQJ,EACF,CAACH,OAAO,EAAEI,QAAQ,EAAEF,cAAc,EAAEG,cAAc,CAAC,CACtD;EAED,OAAOC,OAAO;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}