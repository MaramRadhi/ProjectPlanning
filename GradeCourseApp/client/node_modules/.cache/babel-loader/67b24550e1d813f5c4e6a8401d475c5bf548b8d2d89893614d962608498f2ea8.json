{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useQueryClient, QueryObserver } from 'react-query';\n/**\n * Check if react-query has already fetched data for a query key.\n *\n * This hook is reactive.\n *\n * @example\n * const isCustomerLoaded = useIsDataLoaded(['customers', 'getOne', { id: customerId }]);\n *\n * @returns {boolean} true if the data is loaded, false otherwise\n */\nexport var useIsDataLoaded = function (queryKey, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.enabled,\n    enabled = _a === void 0 ? true : _a;\n  var queryClient = useQueryClient();\n  var _b = useState(function () {\n      if (!enabled) {\n        return false;\n      }\n      return queryClient.getQueryData(queryKey) !== undefined;\n    }),\n    isDataLoaded = _b[0],\n    setDataLoaded = _b[1];\n  useEffect(function () {\n    if (!enabled) return;\n    if (queryClient.getQueryData(queryKey) === undefined) {\n      var observer = new QueryObserver(queryClient, {\n        queryKey: queryKey\n      });\n      var unsubscribe_1 = observer.subscribe(function (result) {\n        setDataLoaded(!result.isLoading);\n        unsubscribe_1();\n      });\n      return unsubscribe_1;\n    }\n  }, [enabled, queryKey, queryClient]);\n  return isDataLoaded;\n};","map":{"version":3,"names":["useEffect","useState","useQueryClient","QueryObserver","useIsDataLoaded","queryKey","options","_a","enabled","queryClient","_b","getQueryData","undefined","isDataLoaded","setDataLoaded","observer","unsubscribe_1","subscribe","result","isLoading"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-core/src/dataProvider/useIsDataLoaded.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useQueryClient, QueryObserver } from 'react-query';\n\n/**\n * Check if react-query has already fetched data for a query key.\n *\n * This hook is reactive.\n *\n * @example\n * const isCustomerLoaded = useIsDataLoaded(['customers', 'getOne', { id: customerId }]);\n *\n * @returns {boolean} true if the data is loaded, false otherwise\n */\nexport const useIsDataLoaded = (\n    queryKey: any,\n    options: { enabled?: boolean } = {}\n) => {\n    const { enabled = true } = options;\n    const queryClient = useQueryClient();\n    const [isDataLoaded, setDataLoaded] = useState<boolean>(() => {\n        if (!enabled) {\n            return false;\n        }\n        return queryClient.getQueryData(queryKey) !== undefined;\n    });\n\n    useEffect(() => {\n        if (!enabled) return;\n        if (queryClient.getQueryData(queryKey) === undefined) {\n            const observer = new QueryObserver(queryClient, { queryKey });\n            const unsubscribe = observer.subscribe(result => {\n                setDataLoaded(!result.isLoading);\n                unsubscribe();\n            });\n            return unsubscribe;\n        }\n    }, [enabled, queryKey, queryClient]);\n\n    return isDataLoaded;\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,aAAa,QAAQ,aAAa;AAE3D;;;;;;;;;;AAUA,OAAO,IAAMC,eAAe,GAAG,SAAAA,CAC3BC,QAAa,EACbC,OAAmC;EAAnC,IAAAA,OAAA;IAAAA,OAAA,KAAmC;EAAA;EAE3B,IAAAC,EAAA,GAAmBD,OAAO,CAAAE,OAAZ;IAAdA,OAAO,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;EACtB,IAAME,WAAW,GAAGP,cAAc,EAAE;EAC9B,IAAAQ,EAAA,GAAgCT,QAAQ,CAAU;MACpD,IAAI,CAACO,OAAO,EAAE;QACV,OAAO,KAAK;;MAEhB,OAAOC,WAAW,CAACE,YAAY,CAACN,QAAQ,CAAC,KAAKO,SAAS;IAC3D,CAAC,CAAC;IALKC,YAAY,GAAAH,EAAA;IAAEI,aAAa,GAAAJ,EAAA,GAKhC;EAEFV,SAAS,CAAC;IACN,IAAI,CAACQ,OAAO,EAAE;IACd,IAAIC,WAAW,CAACE,YAAY,CAACN,QAAQ,CAAC,KAAKO,SAAS,EAAE;MAClD,IAAMG,QAAQ,GAAG,IAAIZ,aAAa,CAACM,WAAW,EAAE;QAAEJ,QAAQ,EAAAA;MAAA,CAAE,CAAC;MAC7D,IAAMW,aAAW,GAAGD,QAAQ,CAACE,SAAS,CAAC,UAAAC,MAAM;QACzCJ,aAAa,CAAC,CAACI,MAAM,CAACC,SAAS,CAAC;QAChCH,aAAW,EAAE;MACjB,CAAC,CAAC;MACF,OAAOA,aAAW;;EAE1B,CAAC,EAAE,CAACR,OAAO,EAAEH,QAAQ,EAAEI,WAAW,CAAC,CAAC;EAEpC,OAAOI,YAAY;AACvB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}