{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { IconButton, Tooltip } from '@mui/material';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport { useTranslate, usePreferencesEditor } from 'ra-core';\nexport var InspectorButton = React.forwardRef(function (_a, ref) {\n  var _b = _a.label,\n    label = _b === void 0 ? 'ra.configurable.configureMode' : _b,\n    _c = _a.SvgIconProps,\n    SvgIconProps = _c === void 0 ? {} : _c,\n    props = __rest(_a, [\"label\", \"SvgIconProps\"]);\n  var _d = usePreferencesEditor(),\n    enable = _d.enable,\n    disable = _d.disable,\n    setPreferenceKey = _d.setPreferenceKey,\n    isEnabled = _d.isEnabled;\n  var translate = useTranslate();\n  var handleClick = function () {\n    if (isEnabled) {\n      disable();\n      setPreferenceKey(null);\n    } else {\n      enable();\n    }\n  };\n  var translatedLabel = translate(label, {\n    _: 'Configure mode'\n  });\n  return React.createElement(Tooltip, {\n    title: translatedLabel\n  }, React.createElement(IconButton, __assign({\n    \"aria-label\": translatedLabel,\n    onClick: handleClick,\n    color: \"inherit\",\n    ref: ref\n  }, props), React.createElement(SettingsIcon, __assign({\n    fontSize: \"inherit\"\n  }, SvgIconProps))));\n});","map":{"version":3,"names":["React","IconButton","Tooltip","SettingsIcon","useTranslate","usePreferencesEditor","InspectorButton","forwardRef","_a","ref","_b","label","_c","SvgIconProps","props","__rest","_d","enable","disable","setPreferenceKey","isEnabled","translate","handleClick","translatedLabel","_","createElement","title","__assign","onClick","color","fontSize"],"sources":["/Users/imrun10/Documents/GitHub/GradeCourseApp/client/node_modules/ra-ui-materialui/src/preferences/InspectorButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { MouseEventHandler } from 'react';\nimport { IconButton, IconButtonProps, Tooltip } from '@mui/material';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport { useTranslate, usePreferencesEditor } from 'ra-core';\n\nexport const InspectorButton = React.forwardRef<\n    HTMLButtonElement,\n    IconButtonProps & { label?: string; SvgIconProps?: any }\n>(\n    (\n        {\n            label = 'ra.configurable.configureMode',\n            SvgIconProps = {},\n            ...props\n        },\n        ref\n    ) => {\n        const {\n            enable,\n            disable,\n            setPreferenceKey,\n            isEnabled,\n        } = usePreferencesEditor();\n        const translate = useTranslate();\n\n        const handleClick: MouseEventHandler<HTMLButtonElement> = () => {\n            if (isEnabled) {\n                disable();\n                setPreferenceKey(null);\n            } else {\n                enable();\n            }\n        };\n\n        const translatedLabel = translate(label, { _: 'Configure mode' });\n\n        return (\n            <Tooltip title={translatedLabel}>\n                <IconButton\n                    aria-label={translatedLabel}\n                    onClick={handleClick}\n                    color=\"inherit\"\n                    ref={ref}\n                    {...props}\n                >\n                    <SettingsIcon fontSize=\"inherit\" {...SvgIconProps} />\n                </IconButton>\n            </Tooltip>\n        );\n    }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,UAAU,EAAmBC,OAAO,QAAQ,eAAe;AACpE,OAAOC,YAAY,MAAM,8BAA8B;AACvD,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,SAAS;AAE5D,OAAO,IAAMC,eAAe,GAAGN,KAAK,CAACO,UAAU,CAI3C,UACIC,EAIC,EACDC,GAAG;EAJC,IAAAC,EAAA,GAAAF,EAAA,CAAAG,KAAuC;IAAvCA,KAAK,GAAAD,EAAA,cAAG,+BAA+B,GAAAA,EAAA;IACvCE,EAAA,GAAAJ,EAAA,CAAAK,YAAiB;IAAjBA,YAAY,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;IACdE,KAAK,GAAAC,MAAA,CAAAP,EAAA,EAHZ,yBAIC,CADW;EAIN,IAAAQ,EAAA,GAKFX,oBAAoB,EAAE;IAJtBY,MAAM,GAAAD,EAAA,CAAAC,MAAA;IACNC,OAAO,GAAAF,EAAA,CAAAE,OAAA;IACPC,gBAAgB,GAAAH,EAAA,CAAAG,gBAAA;IAChBC,SAAS,GAAAJ,EAAA,CAAAI,SACa;EAC1B,IAAMC,SAAS,GAAGjB,YAAY,EAAE;EAEhC,IAAMkB,WAAW,GAAyC,SAAAA,CAAA;IACtD,IAAIF,SAAS,EAAE;MACXF,OAAO,EAAE;MACTC,gBAAgB,CAAC,IAAI,CAAC;KACzB,MAAM;MACHF,MAAM,EAAE;;EAEhB,CAAC;EAED,IAAMM,eAAe,GAAGF,SAAS,CAACV,KAAK,EAAE;IAAEa,CAAC,EAAE;EAAgB,CAAE,CAAC;EAEjE,OACIxB,KAAA,CAAAyB,aAAA,CAACvB,OAAO;IAACwB,KAAK,EAAEH;EAAe,GAC3BvB,KAAA,CAAAyB,aAAA,CAACxB,UAAU,EAAA0B,QAAA;IAAA,cACKJ,eAAe;IAC3BK,OAAO,EAAEN,WAAW;IACpBO,KAAK,EAAC,SAAS;IACfpB,GAAG,EAAEA;EAAG,GACJK,KAAK,GAETd,KAAA,CAAAyB,aAAA,CAACtB,YAAY,EAAAwB,QAAA;IAACG,QAAQ,EAAC;EAAS,GAAKjB,YAAY,EAAI,CAC5C,CACP;AAElB,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}